"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

Object.defineProperty(exports, "__esModule", {
  value: true
});

var utils = require("../../utils");

var EntryTransformer =
/*#__PURE__*/
function () {
  function EntryTransformer(_settings) {
    _classCallCheck(this, EntryTransformer);

    this._settings = _settings;
  }

  _createClass(EntryTransformer, [{
    key: "getTransformer",
    value: function getTransformer() {
      var _this = this;

      return function (entry) {
        return _this._transform(entry);
      };
    }
  }, {
    key: "_transform",
    value: function _transform(entry) {
      var filepath = entry.path;

      if (this._settings.absolute) {
        filepath = utils.path.makeAbsolute(this._settings.cwd, filepath);
        filepath = utils.path.unixify(filepath);
      }

      if (this._settings.markDirectories && entry.dirent.isDirectory()) {
        filepath += '/';
      }

      if (!this._settings.objectMode) {
        return filepath;
      }

      return Object.assign(Object.assign({}, entry), {
        path: filepath
      });
    }
  }]);

  return EntryTransformer;
}();

exports["default"] = EntryTransformer;