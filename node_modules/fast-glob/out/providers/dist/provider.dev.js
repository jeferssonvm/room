"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

Object.defineProperty(exports, "__esModule", {
  value: true
});

var path = require("path");

var deep_1 = require("./filters/deep");

var entry_1 = require("./filters/entry");

var error_1 = require("./filters/error");

var entry_2 = require("./transformers/entry");

var Provider =
/*#__PURE__*/
function () {
  function Provider(_settings) {
    _classCallCheck(this, Provider);

    this._settings = _settings;
    this.errorFilter = new error_1["default"](this._settings);
    this.entryFilter = new entry_1["default"](this._settings, this._getMicromatchOptions());
    this.deepFilter = new deep_1["default"](this._settings, this._getMicromatchOptions());
    this.entryTransformer = new entry_2["default"](this._settings);
  }

  _createClass(Provider, [{
    key: "_getRootDirectory",
    value: function _getRootDirectory(task) {
      return path.resolve(this._settings.cwd, task.base);
    }
  }, {
    key: "_getReaderOptions",
    value: function _getReaderOptions(task) {
      var basePath = task.base === '.' ? '' : task.base;
      return {
        basePath: basePath,
        pathSegmentSeparator: '/',
        concurrency: this._settings.concurrency,
        deepFilter: this.deepFilter.getFilter(basePath, task.positive, task.negative),
        entryFilter: this.entryFilter.getFilter(task.positive, task.negative),
        errorFilter: this.errorFilter.getFilter(),
        followSymbolicLinks: this._settings.followSymbolicLinks,
        fs: this._settings.fs,
        stats: this._settings.stats,
        throwErrorOnBrokenSymbolicLink: this._settings.throwErrorOnBrokenSymbolicLink,
        transform: this.entryTransformer.getTransformer()
      };
    }
  }, {
    key: "_getMicromatchOptions",
    value: function _getMicromatchOptions() {
      return {
        dot: this._settings.dot,
        matchBase: this._settings.baseNameMatch,
        nobrace: !this._settings.braceExpansion,
        nocase: !this._settings.caseSensitiveMatch,
        noext: !this._settings.extglob,
        noglobstar: !this._settings.globstar,
        posix: true,
        strictSlashes: false
      };
    }
  }]);

  return Provider;
}();

exports["default"] = Provider;