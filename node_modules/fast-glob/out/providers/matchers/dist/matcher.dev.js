"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

Object.defineProperty(exports, "__esModule", {
  value: true
});

var utils = require("../../utils");

var Matcher =
/*#__PURE__*/
function () {
  function Matcher(_patterns, _settings, _micromatchOptions) {
    _classCallCheck(this, Matcher);

    this._patterns = _patterns;
    this._settings = _settings;
    this._micromatchOptions = _micromatchOptions;
    this._storage = [];

    this._fillStorage();
  }

  _createClass(Matcher, [{
    key: "_fillStorage",
    value: function _fillStorage() {
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = this._patterns[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var pattern = _step.value;

          var segments = this._getPatternSegments(pattern);

          var sections = this._splitSegmentsIntoSections(segments);

          this._storage.push({
            complete: sections.length <= 1,
            pattern: pattern,
            segments: segments,
            sections: sections
          });
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator["return"] != null) {
            _iterator["return"]();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }
    }
  }, {
    key: "_getPatternSegments",
    value: function _getPatternSegments(pattern) {
      var _this = this;

      var parts = utils.pattern.getPatternParts(pattern, this._micromatchOptions);
      return parts.map(function (part) {
        var dynamic = utils.pattern.isDynamicPattern(part, _this._settings);

        if (!dynamic) {
          return {
            dynamic: false,
            pattern: part
          };
        }

        return {
          dynamic: true,
          pattern: part,
          patternRe: utils.pattern.makeRe(part, _this._micromatchOptions)
        };
      });
    }
  }, {
    key: "_splitSegmentsIntoSections",
    value: function _splitSegmentsIntoSections(segments) {
      return utils.array.splitWhen(segments, function (segment) {
        return segment.dynamic && utils.pattern.hasGlobStar(segment.pattern);
      });
    }
  }]);

  return Matcher;
}();

exports["default"] = Matcher;