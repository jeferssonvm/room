"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

Object.defineProperty(exports, "__esModule", {
  value: true
});

var matcher_1 = require("./matcher");

var PartialMatcher =
/*#__PURE__*/
function (_matcher_1$default) {
  _inherits(PartialMatcher, _matcher_1$default);

  function PartialMatcher() {
    _classCallCheck(this, PartialMatcher);

    return _possibleConstructorReturn(this, _getPrototypeOf(PartialMatcher).apply(this, arguments));
  }

  _createClass(PartialMatcher, [{
    key: "match",
    value: function match(filepath) {
      var parts = filepath.split('/');
      var levels = parts.length;

      var patterns = this._storage.filter(function (info) {
        return !info.complete || info.segments.length > levels;
      });

      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        var _loop = function _loop() {
          var pattern = _step.value;
          var section = pattern.sections[0];
          /**
           * In this case, the pattern has a globstar and we must read all directories unconditionally,
           * but only if the level has reached the end of the first group.
           *
           * fixtures/{a,b}/**
           *  ^ true/false  ^ always true
          */

          if (!pattern.complete && levels > section.length) {
            return {
              v: true
            };
          }

          var match = parts.every(function (part, index) {
            var segment = pattern.segments[index];

            if (segment.dynamic && segment.patternRe.test(part)) {
              return true;
            }

            if (!segment.dynamic && segment.pattern === part) {
              return true;
            }

            return false;
          });

          if (match) {
            return {
              v: true
            };
          }
        };

        for (var _iterator = patterns[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var _ret = _loop();

          if (_typeof(_ret) === "object") return _ret.v;
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator["return"] != null) {
            _iterator["return"]();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      return false;
    }
  }]);

  return PartialMatcher;
}(matcher_1["default"]);

exports["default"] = PartialMatcher;