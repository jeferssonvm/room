"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

Object.defineProperty(exports, "__esModule", {
  value: true
});

var utils = require("../../utils");

var partial_1 = require("../matchers/partial");

var DeepFilter =
/*#__PURE__*/
function () {
  function DeepFilter(_settings, _micromatchOptions) {
    _classCallCheck(this, DeepFilter);

    this._settings = _settings;
    this._micromatchOptions = _micromatchOptions;
  }

  _createClass(DeepFilter, [{
    key: "getFilter",
    value: function getFilter(basePath, positive, negative) {
      var _this = this;

      var matcher = this._getMatcher(positive);

      var negativeRe = this._getNegativePatternsRe(negative);

      return function (entry) {
        return _this._filter(basePath, entry, matcher, negativeRe);
      };
    }
  }, {
    key: "_getMatcher",
    value: function _getMatcher(patterns) {
      return new partial_1["default"](patterns, this._settings, this._micromatchOptions);
    }
  }, {
    key: "_getNegativePatternsRe",
    value: function _getNegativePatternsRe(patterns) {
      var affectDepthOfReadingPatterns = patterns.filter(utils.pattern.isAffectDepthOfReadingPattern);
      return utils.pattern.convertPatternsToRe(affectDepthOfReadingPatterns, this._micromatchOptions);
    }
  }, {
    key: "_filter",
    value: function _filter(basePath, entry, matcher, negativeRe) {
      if (this._isSkippedByDeep(basePath, entry.path)) {
        return false;
      }

      if (this._isSkippedSymbolicLink(entry)) {
        return false;
      }

      var filepath = utils.path.removeLeadingDotSegment(entry.path);

      if (this._isSkippedByPositivePatterns(filepath, matcher)) {
        return false;
      }

      return this._isSkippedByNegativePatterns(filepath, negativeRe);
    }
  }, {
    key: "_isSkippedByDeep",
    value: function _isSkippedByDeep(basePath, entryPath) {
      /**
       * Avoid unnecessary depth calculations when it doesn't matter.
       */
      if (this._settings.deep === Infinity) {
        return false;
      }

      return this._getEntryLevel(basePath, entryPath) >= this._settings.deep;
    }
  }, {
    key: "_getEntryLevel",
    value: function _getEntryLevel(basePath, entryPath) {
      var entryPathDepth = entryPath.split('/').length;

      if (basePath === '') {
        return entryPathDepth;
      }

      var basePathDepth = basePath.split('/').length;
      return entryPathDepth - basePathDepth;
    }
  }, {
    key: "_isSkippedSymbolicLink",
    value: function _isSkippedSymbolicLink(entry) {
      return !this._settings.followSymbolicLinks && entry.dirent.isSymbolicLink();
    }
  }, {
    key: "_isSkippedByPositivePatterns",
    value: function _isSkippedByPositivePatterns(entryPath, matcher) {
      return !this._settings.baseNameMatch && !matcher.match(entryPath);
    }
  }, {
    key: "_isSkippedByNegativePatterns",
    value: function _isSkippedByNegativePatterns(entryPath, patternsRe) {
      return !utils.pattern.matchAny(entryPath, patternsRe);
    }
  }]);

  return DeepFilter;
}();

exports["default"] = DeepFilter;