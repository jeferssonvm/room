"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

Object.defineProperty(exports, "__esModule", {
  value: true
});

var fsStat = require("@nodelib/fs.stat");

var fsWalk = require("@nodelib/fs.walk");

var reader_1 = require("./reader");

var ReaderSync =
/*#__PURE__*/
function (_reader_1$default) {
  _inherits(ReaderSync, _reader_1$default);

  function ReaderSync() {
    var _this;

    _classCallCheck(this, ReaderSync);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(ReaderSync).apply(this, arguments));
    _this._walkSync = fsWalk.walkSync;
    _this._statSync = fsStat.statSync;
    return _this;
  }

  _createClass(ReaderSync, [{
    key: "dynamic",
    value: function dynamic(root, options) {
      return this._walkSync(root, options);
    }
  }, {
    key: "static",
    value: function _static(patterns, options) {
      var entries = [];
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = patterns[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var pattern = _step.value;

          var filepath = this._getFullEntryPath(pattern);

          var entry = this._getEntry(filepath, pattern, options);

          if (entry === null || !options.entryFilter(entry)) {
            continue;
          }

          entries.push(entry);
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator["return"] != null) {
            _iterator["return"]();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      return entries;
    }
  }, {
    key: "_getEntry",
    value: function _getEntry(filepath, pattern, options) {
      try {
        var stats = this._getStat(filepath);

        return this._makeEntry(stats, pattern);
      } catch (error) {
        if (options.errorFilter(error)) {
          return null;
        }

        throw error;
      }
    }
  }, {
    key: "_getStat",
    value: function _getStat(filepath) {
      return this._statSync(filepath, this._fsStatSettings);
    }
  }]);

  return ReaderSync;
}(reader_1["default"]);

exports["default"] = ReaderSync;