"use strict";
exports.__esModule = true;
exports.SetArray = exports.pop = exports.put = exports.get = void 0;
/**
 * SetArray acts like a `Set` (allowing only one occurrence of a string `key`), but provides the
 * index of the `key` in the backing array.
 *
 * This is designed to allow synchronizing a second array with the contents of the backing array,
 * like how in a sourcemap `sourcesContent[i]` is the source content associated with `source[i]`,
 * and there are never duplicates.
 */
var SetArray = /** @class */ (function () {
    function SetArray() {
        this._indexes = { __proto__: null };
        this.array = [];
    }
    return SetArray;
}());
exports.SetArray = SetArray;
{
    exports.get = function (strarr, key) { return strarr._indexes[key]; };
    exports.put = function (strarr, key) {
        // The key may or may not be present. If it is present, it's a number.
        var index = exports.get(strarr, key);
        if (index !== undefined)
            return index;
        var array = strarr.array, indexes = strarr._indexes;
        return (indexes[key] = array.push(key) - 1);
    };
    exports.pop = function (strarr) {
        var array = strarr.array, indexes = strarr._indexes;
        if (array.length === 0)
            return;
        var last = array.pop();
        indexes[last] = undefined;
    };
}
