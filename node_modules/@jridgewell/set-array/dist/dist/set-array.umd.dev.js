"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

(function (global, factory) {
  (typeof exports === "undefined" ? "undefined" : _typeof(exports)) === 'object' && typeof module !== 'undefined' ? factory(exports) : typeof define === 'function' && define.amd ? define(['exports'], factory) : (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.setArray = {}));
})(void 0, function (exports) {
  'use strict';
  /**
   * Gets the index associated with `key` in the backing array, if it is already present.
   */

  exports.get = void 0;
  /**
   * Puts `key` into the backing array, if it is not already present. Returns
   * the index of the `key` in the backing array.
   */

  exports.put = void 0;
  /**
   * Pops the last added item out of the SetArray.
   */

  exports.pop = void 0;
  /**
   * SetArray acts like a `Set` (allowing only one occurrence of a string `key`), but provides the
   * index of the `key` in the backing array.
   *
   * This is designed to allow synchronizing a second array with the contents of the backing array,
   * like how in a sourcemap `sourcesContent[i]` is the source content associated with `source[i]`,
   * and there are never duplicates.
   */

  var SetArray = function SetArray() {
    _classCallCheck(this, SetArray);

    this._indexes = {
      __proto__: null
    };
    this.array = [];
  };

  (function () {
    exports.get = function (strarr, key) {
      return strarr._indexes[key];
    };

    exports.put = function (strarr, key) {
      // The key may or may not be present. If it is present, it's a number.
      var index = exports.get(strarr, key);
      if (index !== undefined) return index;
      var array = strarr.array,
          indexes = strarr._indexes;
      return indexes[key] = array.push(key) - 1;
    };

    exports.pop = function (strarr) {
      var array = strarr.array,
          indexes = strarr._indexes;
      if (array.length === 0) return;
      var last = array.pop();
      indexes[last] = undefined;
    };
  })();

  exports.SetArray = SetArray;
  Object.defineProperty(exports, '__esModule', {
    value: true
  });
});