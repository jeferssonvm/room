"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.readdir = exports.readdirWithFileTypes = exports.read = void 0;

var fsStat = require("@nodelib/fs.stat");

var rpl = require("run-parallel");

var constants_1 = require("../constants");

var utils = require("../utils");

var common = require("./common");

function read(directory, settings, callback) {
  if (!settings.stats && constants_1.IS_SUPPORT_READDIR_WITH_FILE_TYPES) {
    readdirWithFileTypes(directory, settings, callback);
    return;
  }

  readdir(directory, settings, callback);
}

exports.read = read;

function readdirWithFileTypes(directory, settings, callback) {
  settings.fs.readdir(directory, {
    withFileTypes: true
  }, function (readdirError, dirents) {
    if (readdirError !== null) {
      callFailureCallback(callback, readdirError);
      return;
    }

    var entries = dirents.map(function (dirent) {
      return {
        dirent: dirent,
        name: dirent.name,
        path: common.joinPathSegments(directory, dirent.name, settings.pathSegmentSeparator)
      };
    });

    if (!settings.followSymbolicLinks) {
      callSuccessCallback(callback, entries);
      return;
    }

    var tasks = entries.map(function (entry) {
      return makeRplTaskEntry(entry, settings);
    });
    rpl(tasks, function (rplError, rplEntries) {
      if (rplError !== null) {
        callFailureCallback(callback, rplError);
        return;
      }

      callSuccessCallback(callback, rplEntries);
    });
  });
}

exports.readdirWithFileTypes = readdirWithFileTypes;

function makeRplTaskEntry(entry, settings) {
  return function (done) {
    if (!entry.dirent.isSymbolicLink()) {
      done(null, entry);
      return;
    }

    settings.fs.stat(entry.path, function (statError, stats) {
      if (statError !== null) {
        if (settings.throwErrorOnBrokenSymbolicLink) {
          done(statError);
          return;
        }

        done(null, entry);
        return;
      }

      entry.dirent = utils.fs.createDirentFromStats(entry.name, stats);
      done(null, entry);
    });
  };
}

function readdir(directory, settings, callback) {
  settings.fs.readdir(directory, function (readdirError, names) {
    if (readdirError !== null) {
      callFailureCallback(callback, readdirError);
      return;
    }

    var tasks = names.map(function (name) {
      var path = common.joinPathSegments(directory, name, settings.pathSegmentSeparator);
      return function (done) {
        fsStat.stat(path, settings.fsStatSettings, function (error, stats) {
          if (error !== null) {
            done(error);
            return;
          }

          var entry = {
            name: name,
            path: path,
            dirent: utils.fs.createDirentFromStats(name, stats)
          };

          if (settings.stats) {
            entry.stats = stats;
          }

          done(null, entry);
        });
      };
    });
    rpl(tasks, function (rplError, entries) {
      if (rplError !== null) {
        callFailureCallback(callback, rplError);
        return;
      }

      callSuccessCallback(callback, entries);
    });
  });
}

exports.readdir = readdir;

function callFailureCallback(callback, error) {
  callback(error);
}

function callSuccessCallback(callback, result) {
  callback(null, result);
}