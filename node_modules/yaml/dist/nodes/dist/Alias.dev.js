'use strict';

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var anchors = require('../doc/anchors.js');

var visit = require('../visit.js');

var identity = require('./identity.js');

var Node = require('./Node.js');

var toJS = require('./toJS.js');

var Alias =
/*#__PURE__*/
function (_Node$NodeBase) {
  _inherits(Alias, _Node$NodeBase);

  function Alias(source) {
    var _this;

    _classCallCheck(this, Alias);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(Alias).call(this, identity.ALIAS));
    _this.source = source;
    Object.defineProperty(_assertThisInitialized(_this), 'tag', {
      set: function set() {
        throw new Error('Alias nodes cannot have tags');
      }
    });
    return _this;
  }
  /**
   * Resolve the value of this alias within `doc`, finding the last
   * instance of the `source` anchor before this node.
   */


  _createClass(Alias, [{
    key: "resolve",
    value: function resolve(doc) {
      var _this2 = this;

      var found = undefined;
      visit.visit(doc, {
        Node: function Node(_key, node) {
          if (node === _this2) return visit.visit.BREAK;
          if (node.anchor === _this2.source) found = node;
        }
      });
      return found;
    }
  }, {
    key: "toJSON",
    value: function toJSON(_arg, ctx) {
      if (!ctx) return {
        source: this.source
      };
      var anchors = ctx.anchors,
          doc = ctx.doc,
          maxAliasCount = ctx.maxAliasCount;
      var source = this.resolve(doc);

      if (!source) {
        var msg = "Unresolved alias (the anchor must be set before the alias): ".concat(this.source);
        throw new ReferenceError(msg);
      }

      var data = anchors.get(source);

      if (!data) {
        // Resolve anchors for Node.prototype.toJS()
        toJS.toJS(source, null, ctx);
        data = anchors.get(source);
      }
      /* istanbul ignore if */


      if (!data || data.res === undefined) {
        var _msg = 'This should not happen: Alias anchor was not resolved?';
        throw new ReferenceError(_msg);
      }

      if (maxAliasCount >= 0) {
        data.count += 1;
        if (data.aliasCount === 0) data.aliasCount = getAliasCount(doc, source, anchors);

        if (data.count * data.aliasCount > maxAliasCount) {
          var _msg2 = 'Excessive alias count indicates a resource exhaustion attack';
          throw new ReferenceError(_msg2);
        }
      }

      return data.res;
    }
  }, {
    key: "toString",
    value: function toString(ctx, _onComment, _onChompKeep) {
      var src = "*".concat(this.source);

      if (ctx) {
        anchors.anchorIsValid(this.source);

        if (ctx.options.verifyAliasOrder && !ctx.anchors.has(this.source)) {
          var msg = "Unresolved alias (the anchor must be set before the alias): ".concat(this.source);
          throw new Error(msg);
        }

        if (ctx.implicitKey) return "".concat(src, " ");
      }

      return src;
    }
  }]);

  return Alias;
}(Node.NodeBase);

function getAliasCount(doc, node, anchors) {
  if (identity.isAlias(node)) {
    var source = node.resolve(doc);
    var anchor = anchors && source && anchors.get(source);
    return anchor ? anchor.count * anchor.aliasCount : 0;
  } else if (identity.isCollection(node)) {
    var count = 0;
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = node.items[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        var item = _step.value;
        var c = getAliasCount(doc, item, anchors);
        if (c > count) count = c;
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator["return"] != null) {
          _iterator["return"]();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }

    return count;
  } else if (identity.isPair(node)) {
    var kc = getAliasCount(doc, node.key, anchors);
    var vc = getAliasCount(doc, node.value, anchors);
    return Math.max(kc, vc);
  }

  return 1;
}

exports.Alias = Alias;