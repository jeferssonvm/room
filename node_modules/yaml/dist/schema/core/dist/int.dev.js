'use strict';

var stringifyNumber = require('../../stringify/stringifyNumber.js');

var intIdentify = function intIdentify(value) {
  return typeof value === 'bigint' || Number.isInteger(value);
};

var intResolve = function intResolve(str, offset, radix, _ref) {
  var intAsBigInt = _ref.intAsBigInt;
  return intAsBigInt ? BigInt(str) : parseInt(str.substring(offset), radix);
};

function intStringify(node, radix, prefix) {
  var value = node.value;
  if (intIdentify(value) && value >= 0) return prefix + value.toString(radix);
  return stringifyNumber.stringifyNumber(node);
}

var intOct = {
  identify: function identify(value) {
    return intIdentify(value) && value >= 0;
  },
  "default": true,
  tag: 'tag:yaml.org,2002:int',
  format: 'OCT',
  test: /^0o[0-7]+$/,
  resolve: function resolve(str, _onError, opt) {
    return intResolve(str, 2, 8, opt);
  },
  stringify: function stringify(node) {
    return intStringify(node, 8, '0o');
  }
};
var _int = {
  identify: intIdentify,
  "default": true,
  tag: 'tag:yaml.org,2002:int',
  test: /^[-+]?[0-9]+$/,
  resolve: function resolve(str, _onError, opt) {
    return intResolve(str, 0, 10, opt);
  },
  stringify: stringifyNumber.stringifyNumber
};
var intHex = {
  identify: function identify(value) {
    return intIdentify(value) && value >= 0;
  },
  "default": true,
  tag: 'tag:yaml.org,2002:int',
  format: 'HEX',
  test: /^0x[0-9a-fA-F]+$/,
  resolve: function resolve(str, _onError, opt) {
    return intResolve(str, 2, 16, opt);
  },
  stringify: function stringify(node) {
    return intStringify(node, 16, '0x');
  }
};
exports["int"] = _int;
exports.intHex = intHex;
exports.intOct = intOct;