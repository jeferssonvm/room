'use strict';

var Scalar = require('../../nodes/Scalar.js');

var map = require('../common/map.js');

var seq = require('../common/seq.js');

function intIdentify(value) {
  return typeof value === 'bigint' || Number.isInteger(value);
}

var stringifyJSON = function stringifyJSON(_ref) {
  var value = _ref.value;
  return JSON.stringify(value);
};

var jsonScalars = [{
  identify: function identify(value) {
    return typeof value === 'string';
  },
  "default": true,
  tag: 'tag:yaml.org,2002:str',
  resolve: function resolve(str) {
    return str;
  },
  stringify: stringifyJSON
}, {
  identify: function identify(value) {
    return value == null;
  },
  createNode: function createNode() {
    return new Scalar.Scalar(null);
  },
  "default": true,
  tag: 'tag:yaml.org,2002:null',
  test: /^null$/,
  resolve: function resolve() {
    return null;
  },
  stringify: stringifyJSON
}, {
  identify: function identify(value) {
    return typeof value === 'boolean';
  },
  "default": true,
  tag: 'tag:yaml.org,2002:bool',
  test: /^true|false$/,
  resolve: function resolve(str) {
    return str === 'true';
  },
  stringify: stringifyJSON
}, {
  identify: intIdentify,
  "default": true,
  tag: 'tag:yaml.org,2002:int',
  test: /^-?(?:0|[1-9][0-9]*)$/,
  resolve: function resolve(str, _onError, _ref2) {
    var intAsBigInt = _ref2.intAsBigInt;
    return intAsBigInt ? BigInt(str) : parseInt(str, 10);
  },
  stringify: function stringify(_ref3) {
    var value = _ref3.value;
    return intIdentify(value) ? value.toString() : JSON.stringify(value);
  }
}, {
  identify: function identify(value) {
    return typeof value === 'number';
  },
  "default": true,
  tag: 'tag:yaml.org,2002:float',
  test: /^-?(?:0|[1-9][0-9]*)(?:\.[0-9]*)?(?:[eE][-+]?[0-9]+)?$/,
  resolve: function resolve(str) {
    return parseFloat(str);
  },
  stringify: stringifyJSON
}];
var jsonError = {
  "default": true,
  tag: '',
  test: /^/,
  resolve: function resolve(str, onError) {
    onError("Unresolved plain scalar ".concat(JSON.stringify(str)));
    return str;
  }
};
var schema = [map.map, seq.seq].concat(jsonScalars, jsonError);
exports.schema = schema;