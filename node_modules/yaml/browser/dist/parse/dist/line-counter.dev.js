"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.LineCounter = void 0;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Tracks newlines during parsing in order to provide an efficient API for
 * determining the one-indexed `{ line, col }` position for any offset
 * within the input.
 */
var LineCounter = function LineCounter() {
  var _this = this;

  _classCallCheck(this, LineCounter);

  this.lineStarts = [];
  /**
   * Should be called in ascending order. Otherwise, call
   * `lineCounter.lineStarts.sort()` before calling `linePos()`.
   */

  this.addNewLine = function (offset) {
    return _this.lineStarts.push(offset);
  };
  /**
   * Performs a binary search and returns the 1-indexed { line, col }
   * position of `offset`. If `line === 0`, `addNewLine` has never been
   * called or `offset` is before the first known newline.
   */


  this.linePos = function (offset) {
    var low = 0;
    var high = _this.lineStarts.length;

    while (low < high) {
      var mid = low + high >> 1; // Math.floor((low + high) / 2)

      if (_this.lineStarts[mid] < offset) low = mid + 1;else high = mid;
    }

    if (_this.lineStarts[low] === offset) return {
      line: low + 1,
      col: 1
    };
    if (low === 0) return {
      line: 0,
      col: offset
    };
    var start = _this.lineStarts[low - 1];
    return {
      line: low,
      col: offset - start + 1
    };
  };
};

exports.LineCounter = LineCounter;