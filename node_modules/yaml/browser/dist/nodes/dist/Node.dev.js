"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.NodeBase = void 0;

var _applyReviver = require("../doc/applyReviver.js");

var _identity = require("./identity.js");

var _toJS2 = require("./toJS.js");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var NodeBase =
/*#__PURE__*/
function () {
  function NodeBase(type) {
    _classCallCheck(this, NodeBase);

    Object.defineProperty(this, _identity.NODE_TYPE, {
      value: type
    });
  }
  /** Create a copy of this node.  */


  _createClass(NodeBase, [{
    key: "clone",
    value: function clone() {
      var copy = Object.create(Object.getPrototypeOf(this), Object.getOwnPropertyDescriptors(this));
      if (this.range) copy.range = this.range.slice();
      return copy;
    }
    /** A plain JavaScript representation of this node. */

  }, {
    key: "toJS",
    value: function toJS(doc) {
      var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
          mapAsMap = _ref.mapAsMap,
          maxAliasCount = _ref.maxAliasCount,
          onAnchor = _ref.onAnchor,
          reviver = _ref.reviver;

      if (!(0, _identity.isDocument)(doc)) throw new TypeError('A document argument is required');
      var ctx = {
        anchors: new Map(),
        doc: doc,
        keep: true,
        mapAsMap: mapAsMap === true,
        mapKeyWarned: false,
        maxAliasCount: typeof maxAliasCount === 'number' ? maxAliasCount : 100
      };
      var res = (0, _toJS2.toJS)(this, '', ctx);

      if (typeof onAnchor === 'function') {
        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
          for (var _iterator = ctx.anchors.values()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var _step$value = _step.value,
                count = _step$value.count,
                _res = _step$value.res;
            onAnchor(_res, count);
          }
        } catch (err) {
          _didIteratorError = true;
          _iteratorError = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion && _iterator["return"] != null) {
              _iterator["return"]();
            }
          } finally {
            if (_didIteratorError) {
              throw _iteratorError;
            }
          }
        }
      }

      return typeof reviver === 'function' ? (0, _applyReviver.applyReviver)(reviver, {
        '': res
      }, '', res) : res;
    }
  }]);

  return NodeBase;
}();

exports.NodeBase = NodeBase;