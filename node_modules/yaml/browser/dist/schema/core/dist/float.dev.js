"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.floatNaN = exports.floatExp = exports["float"] = void 0;

var _Scalar = require("../../nodes/Scalar.js");

var _stringifyNumber = require("../../stringify/stringifyNumber.js");

var floatNaN = {
  identify: function identify(value) {
    return typeof value === 'number';
  },
  "default": true,
  tag: 'tag:yaml.org,2002:float',
  test: /^(?:[-+]?\.(?:inf|Inf|INF|nan|NaN|NAN))$/,
  resolve: function resolve(str) {
    return str.slice(-3).toLowerCase() === 'nan' ? NaN : str[0] === '-' ? Number.NEGATIVE_INFINITY : Number.POSITIVE_INFINITY;
  },
  stringify: _stringifyNumber.stringifyNumber
};
exports.floatNaN = floatNaN;
var floatExp = {
  identify: function identify(value) {
    return typeof value === 'number';
  },
  "default": true,
  tag: 'tag:yaml.org,2002:float',
  format: 'EXP',
  test: /^[-+]?(?:\.[0-9]+|[0-9]+(?:\.[0-9]*)?)[eE][-+]?[0-9]+$/,
  resolve: function resolve(str) {
    return parseFloat(str);
  },
  stringify: function stringify(node) {
    var num = Number(node.value);
    return isFinite(num) ? num.toExponential() : (0, _stringifyNumber.stringifyNumber)(node);
  }
};
exports.floatExp = floatExp;
var _float = {
  identify: function identify(value) {
    return typeof value === 'number';
  },
  "default": true,
  tag: 'tag:yaml.org,2002:float',
  test: /^[-+]?(?:\.[0-9]+|[0-9]+\.[0-9]*)$/,
  resolve: function resolve(str) {
    var node = new _Scalar.Scalar(parseFloat(str));
    var dot = str.indexOf('.');
    if (dot !== -1 && str[str.length - 1] === '0') node.minFractionDigits = str.length - dot - 1;
    return node;
  },
  stringify: _stringifyNumber.stringifyNumber
};
exports["float"] = _float;