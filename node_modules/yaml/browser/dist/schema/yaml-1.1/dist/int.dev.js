"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.intOct = exports.intHex = exports.intBin = exports["int"] = void 0;

var _stringifyNumber = require("../../stringify/stringifyNumber.js");

var intIdentify = function intIdentify(value) {
  return typeof value === 'bigint' || Number.isInteger(value);
};

function intResolve(str, offset, radix, _ref) {
  var intAsBigInt = _ref.intAsBigInt;
  var sign = str[0];
  if (sign === '-' || sign === '+') offset += 1;
  str = str.substring(offset).replace(/_/g, '');

  if (intAsBigInt) {
    switch (radix) {
      case 2:
        str = "0b".concat(str);
        break;

      case 8:
        str = "0o".concat(str);
        break;

      case 16:
        str = "0x".concat(str);
        break;
    }

    var _n = BigInt(str);

    return sign === '-' ? BigInt(-1) * _n : _n;
  }

  var n = parseInt(str, radix);
  return sign === '-' ? -1 * n : n;
}

function intStringify(node, radix, prefix) {
  var value = node.value;

  if (intIdentify(value)) {
    var str = value.toString(radix);
    return value < 0 ? '-' + prefix + str.substr(1) : prefix + str;
  }

  return (0, _stringifyNumber.stringifyNumber)(node);
}

var intBin = {
  identify: intIdentify,
  "default": true,
  tag: 'tag:yaml.org,2002:int',
  format: 'BIN',
  test: /^[-+]?0b[0-1_]+$/,
  resolve: function resolve(str, _onError, opt) {
    return intResolve(str, 2, 2, opt);
  },
  stringify: function stringify(node) {
    return intStringify(node, 2, '0b');
  }
};
exports.intBin = intBin;
var intOct = {
  identify: intIdentify,
  "default": true,
  tag: 'tag:yaml.org,2002:int',
  format: 'OCT',
  test: /^[-+]?0[0-7_]+$/,
  resolve: function resolve(str, _onError, opt) {
    return intResolve(str, 1, 8, opt);
  },
  stringify: function stringify(node) {
    return intStringify(node, 8, '0');
  }
};
exports.intOct = intOct;
var _int = {
  identify: intIdentify,
  "default": true,
  tag: 'tag:yaml.org,2002:int',
  test: /^[-+]?[0-9][0-9_]*$/,
  resolve: function resolve(str, _onError, opt) {
    return intResolve(str, 0, 10, opt);
  },
  stringify: _stringifyNumber.stringifyNumber
};
exports["int"] = _int;
var intHex = {
  identify: intIdentify,
  "default": true,
  tag: 'tag:yaml.org,2002:int',
  format: 'HEX',
  test: /^[-+]?0x[0-9a-fA-F_]+$/,
  resolve: function resolve(str, _onError, opt) {
    return intResolve(str, 2, 16, opt);
  },
  stringify: function stringify(node) {
    return intStringify(node, 16, '0x');
  }
};
exports.intHex = intHex;