"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getTags = getTags;
exports.coreKnownTags = void 0;

var _map = require("./common/map.js");

var _null = require("./common/null.js");

var _seq = require("./common/seq.js");

var _string = require("./common/string.js");

var _bool = require("./core/bool.js");

var _float2 = require("./core/float.js");

var _int2 = require("./core/int.js");

var _schema = require("./core/schema.js");

var _schema2 = require("./json/schema.js");

var _binary = require("./yaml-1.1/binary.js");

var _omap = require("./yaml-1.1/omap.js");

var _pairs = require("./yaml-1.1/pairs.js");

var _schema3 = require("./yaml-1.1/schema.js");

var _set = require("./yaml-1.1/set.js");

var _timestamp = require("./yaml-1.1/timestamp.js");

var schemas = new Map([['core', _schema.schema], ['failsafe', [_map.map, _seq.seq, _string.string]], ['json', _schema2.schema], ['yaml11', _schema3.schema], ['yaml-1.1', _schema3.schema]]);
var tagsByName = {
  binary: _binary.binary,
  bool: _bool.boolTag,
  "float": _float2["float"],
  floatExp: _float2.floatExp,
  floatNaN: _float2.floatNaN,
  floatTime: _timestamp.floatTime,
  "int": _int2["int"],
  intHex: _int2.intHex,
  intOct: _int2.intOct,
  intTime: _timestamp.intTime,
  map: _map.map,
  "null": _null.nullTag,
  omap: _omap.omap,
  pairs: _pairs.pairs,
  seq: _seq.seq,
  set: _set.set,
  timestamp: _timestamp.timestamp
};
var coreKnownTags = {
  'tag:yaml.org,2002:binary': _binary.binary,
  'tag:yaml.org,2002:omap': _omap.omap,
  'tag:yaml.org,2002:pairs': _pairs.pairs,
  'tag:yaml.org,2002:set': _set.set,
  'tag:yaml.org,2002:timestamp': _timestamp.timestamp
};
exports.coreKnownTags = coreKnownTags;

function getTags(customTags, schemaName) {
  var tags = schemas.get(schemaName);

  if (!tags) {
    if (Array.isArray(customTags)) tags = [];else {
      var keys = Array.from(schemas.keys()).filter(function (key) {
        return key !== 'yaml11';
      }).map(function (key) {
        return JSON.stringify(key);
      }).join(', ');
      throw new Error("Unknown schema \"".concat(schemaName, "\"; use one of ").concat(keys, " or define customTags array"));
    }
  }

  if (Array.isArray(customTags)) {
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = customTags[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        var tag = _step.value;
        tags = tags.concat(tag);
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator["return"] != null) {
          _iterator["return"]();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }
  } else if (typeof customTags === 'function') {
    tags = customTags(tags.slice());
  }

  return tags.map(function (tag) {
    if (typeof tag !== 'string') return tag;
    var tagObj = tagsByName[tag];
    if (tagObj) return tagObj;
    var keys = Object.keys(tagsByName).map(function (key) {
      return JSON.stringify(key);
    }).join(', ');
    throw new Error("Unknown custom tag \"".concat(tag, "\"; use one of ").concat(keys));
  });
}