"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

Object.defineProperty(exports, "__esModule", {
  value: true
});

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}

var _types = require('../parser/tokenizer/types');

var _Transformer = require('./Transformer');

var _Transformer2 = _interopRequireDefault(_Transformer);
/**
 * Transformer supporting the optional chaining and nullish coalescing operators.
 *
 * Tech plan here:
 * https://github.com/alangpierce/sucrase/wiki/Sucrase-Optional-Chaining-and-Nullish-Coalescing-Technical-Plan
 *
 * The prefix and suffix code snippets are handled by TokenProcessor, and this transformer handles
 * the operators themselves.
 */


var OptionalChainingNullishTransformer =
/*#__PURE__*/
function (_Transformer2$default) {
  _inherits(OptionalChainingNullishTransformer, _Transformer2$default);

  function OptionalChainingNullishTransformer(tokens, nameManager) {
    var _this;

    _classCallCheck(this, OptionalChainingNullishTransformer);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(OptionalChainingNullishTransformer).call(this));
    _this.tokens = tokens;
    _this.nameManager = nameManager;
    ;
    return _this;
  }

  _createClass(OptionalChainingNullishTransformer, [{
    key: "process",
    value: function process() {
      if (this.tokens.matches1(_types.TokenType.nullishCoalescing)) {
        var _token = this.tokens.currentToken();

        if (this.tokens.tokens[_token.nullishStartIndex].isAsyncOperation) {
          this.tokens.replaceTokenTrimmingLeftWhitespace(", async () => (");
        } else {
          this.tokens.replaceTokenTrimmingLeftWhitespace(", () => (");
        }

        return true;
      }

      if (this.tokens.matches1(_types.TokenType._delete)) {
        var nextToken = this.tokens.tokenAtRelativeIndex(1);

        if (nextToken.isOptionalChainStart) {
          this.tokens.removeInitialToken();
          return true;
        }
      }

      var token = this.tokens.currentToken();
      var chainStart = token.subscriptStartIndex;

      if (chainStart != null && this.tokens.tokens[chainStart].isOptionalChainStart && // Super subscripts can't be optional (since super is never null/undefined), and the syntax
      // relies on the subscript being intact, so leave this token alone.
      this.tokens.tokenAtRelativeIndex(-1).type !== _types.TokenType._super) {
        var param = this.nameManager.claimFreeName("_");
        var arrowStartSnippet;

        if (chainStart > 0 && this.tokens.matches1AtIndex(chainStart - 1, _types.TokenType._delete) && this.isLastSubscriptInChain()) {
          // Delete operations are special: we already removed the delete keyword, and to still
          // perform a delete, we need to insert a delete in the very last part of the chain, which
          // in correct code will always be a property access.
          arrowStartSnippet = "".concat(param, " => delete ").concat(param);
        } else {
          arrowStartSnippet = "".concat(param, " => ").concat(param);
        }

        if (this.tokens.tokens[chainStart].isAsyncOperation) {
          arrowStartSnippet = "async ".concat(arrowStartSnippet);
        }

        if (this.tokens.matches2(_types.TokenType.questionDot, _types.TokenType.parenL) || this.tokens.matches2(_types.TokenType.questionDot, _types.TokenType.lessThan)) {
          if (this.justSkippedSuper()) {
            this.tokens.appendCode(".bind(this)");
          }

          this.tokens.replaceTokenTrimmingLeftWhitespace(", 'optionalCall', ".concat(arrowStartSnippet));
        } else if (this.tokens.matches2(_types.TokenType.questionDot, _types.TokenType.bracketL)) {
          this.tokens.replaceTokenTrimmingLeftWhitespace(", 'optionalAccess', ".concat(arrowStartSnippet));
        } else if (this.tokens.matches1(_types.TokenType.questionDot)) {
          this.tokens.replaceTokenTrimmingLeftWhitespace(", 'optionalAccess', ".concat(arrowStartSnippet, "."));
        } else if (this.tokens.matches1(_types.TokenType.dot)) {
          this.tokens.replaceTokenTrimmingLeftWhitespace(", 'access', ".concat(arrowStartSnippet, "."));
        } else if (this.tokens.matches1(_types.TokenType.bracketL)) {
          this.tokens.replaceTokenTrimmingLeftWhitespace(", 'access', ".concat(arrowStartSnippet, "["));
        } else if (this.tokens.matches1(_types.TokenType.parenL)) {
          if (this.justSkippedSuper()) {
            this.tokens.appendCode(".bind(this)");
          }

          this.tokens.replaceTokenTrimmingLeftWhitespace(", 'call', ".concat(arrowStartSnippet, "("));
        } else {
          throw new Error("Unexpected subscript operator in optional chain.");
        }

        return true;
      }

      return false;
    }
    /**
     * Determine if the current token is the last of its chain, so that we know whether it's eligible
     * to have a delete op inserted.
     *
     * We can do this by walking forward until we determine one way or another. Each
     * isOptionalChainStart token must be paired with exactly one isOptionalChainEnd token after it in
     * a nesting way, so we can track depth and walk to the end of the chain (the point where the
     * depth goes negative) and see if any other subscript token is after us in the chain.
     */

  }, {
    key: "isLastSubscriptInChain",
    value: function isLastSubscriptInChain() {
      var depth = 0;

      for (var i = this.tokens.currentIndex() + 1;; i++) {
        if (i >= this.tokens.tokens.length) {
          throw new Error("Reached the end of the code while finding the end of the access chain.");
        }

        if (this.tokens.tokens[i].isOptionalChainStart) {
          depth++;
        } else if (this.tokens.tokens[i].isOptionalChainEnd) {
          depth--;
        }

        if (depth < 0) {
          return true;
        } // This subscript token is a later one in the same chain.


        if (depth === 0 && this.tokens.tokens[i].subscriptStartIndex != null) {
          return false;
        }
      }
    }
    /**
     * Determine if we are the open-paren in an expression like super.a()?.b.
     *
     * We can do this by walking backward to find the previous subscript. If that subscript was
     * preceded by a super, then we must be the subscript after it, so if this is a call expression,
     * we'll need to attach the right context.
     */

  }, {
    key: "justSkippedSuper",
    value: function justSkippedSuper() {
      var depth = 0;
      var index = this.tokens.currentIndex() - 1;

      while (true) {
        if (index < 0) {
          throw new Error("Reached the start of the code while finding the start of the access chain.");
        }

        if (this.tokens.tokens[index].isOptionalChainStart) {
          depth--;
        } else if (this.tokens.tokens[index].isOptionalChainEnd) {
          depth++;
        }

        if (depth < 0) {
          return false;
        } // This subscript token is a later one in the same chain.


        if (depth === 0 && this.tokens.tokens[index].subscriptStartIndex != null) {
          return this.tokens.tokens[index - 1].type === _types.TokenType._super;
        }

        index--;
      }
    }
  }]);

  return OptionalChainingNullishTransformer;
}(_Transformer2["default"]);

exports["default"] = OptionalChainingNullishTransformer;