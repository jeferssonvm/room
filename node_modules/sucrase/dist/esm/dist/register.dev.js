"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.addHook = addHook;
exports.registerJS = registerJS;
exports.registerJSX = registerJSX;
exports.registerTS = registerTS;
exports.registerTSX = registerTSX;
exports.registerTSLegacyModuleInterop = registerTSLegacyModuleInterop;
exports.registerTSXLegacyModuleInterop = registerTSXLegacyModuleInterop;
exports.registerAll = registerAll;

var pirates = _interopRequireWildcard(require("pirates"));

var _index = require("./index");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function addHook(extension, sucraseOptions, hookOptions) {
  var mergedSucraseOptions = sucraseOptions;
  var sucraseOptionsEnvJSON = process.env.SUCRASE_OPTIONS;

  if (sucraseOptionsEnvJSON) {
    mergedSucraseOptions = _objectSpread({}, mergedSucraseOptions, {}, JSON.parse(sucraseOptionsEnvJSON));
  }

  return pirates.addHook(function (code, filePath) {
    var _transform = (0, _index.transform)(code, _objectSpread({}, mergedSucraseOptions, {
      sourceMapOptions: {
        compiledFilename: filePath
      },
      filePath: filePath
    })),
        transformedCode = _transform.code,
        sourceMap = _transform.sourceMap;

    var mapBase64 = Buffer.from(JSON.stringify(sourceMap)).toString("base64");
    var suffix = "//# sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(mapBase64);
    return "".concat(transformedCode, "\n").concat(suffix);
  }, _objectSpread({}, hookOptions, {
    exts: [extension]
  }));
}

function registerJS(hookOptions) {
  return addHook(".js", {
    transforms: ["imports", "flow", "jsx"]
  }, hookOptions);
}

function registerJSX(hookOptions) {
  return addHook(".jsx", {
    transforms: ["imports", "flow", "jsx"]
  }, hookOptions);
}

function registerTS(hookOptions) {
  return addHook(".ts", {
    transforms: ["imports", "typescript"]
  }, hookOptions);
}

function registerTSX(hookOptions) {
  return addHook(".tsx", {
    transforms: ["imports", "typescript", "jsx"]
  }, hookOptions);
}

function registerTSLegacyModuleInterop(hookOptions) {
  return addHook(".ts", {
    transforms: ["imports", "typescript"],
    enableLegacyTypeScriptModuleInterop: true
  }, hookOptions);
}

function registerTSXLegacyModuleInterop(hookOptions) {
  return addHook(".tsx", {
    transforms: ["imports", "typescript", "jsx"],
    enableLegacyTypeScriptModuleInterop: true
  }, hookOptions);
}

function registerAll(hookOptions) {
  var reverts = [registerJS(hookOptions), registerJSX(hookOptions), registerTS(hookOptions), registerTSX(hookOptions)];
  return function () {
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = reverts[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        var fn = _step.value;
        fn();
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator["return"] != null) {
          _iterator["return"]();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }
  };
}