"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _getIdentifierNames = _interopRequireDefault(require("./util/getIdentifierNames"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var NameManager =
/*#__PURE__*/
function () {
  _createClass(NameManager, [{
    key: "__init",
    value: function __init() {
      this.usedNames = new Set();
    }
  }]);

  function NameManager(code, tokens) {
    _classCallCheck(this, NameManager);

    ;

    NameManager.prototype.__init.call(this);

    this.usedNames = new Set((0, _getIdentifierNames["default"])(code, tokens));
  }

  _createClass(NameManager, [{
    key: "claimFreeName",
    value: function claimFreeName(name) {
      var newName = this.findFreeName(name);
      this.usedNames.add(newName);
      return newName;
    }
  }, {
    key: "findFreeName",
    value: function findFreeName(name) {
      if (!this.usedNames.has(name)) {
        return name;
      }

      var suffixNum = 2;

      while (this.usedNames.has(name + String(suffixNum))) {
        suffixNum++;
      }

      return name + String(suffixNum);
    }
  }]);

  return NameManager;
}();

exports["default"] = NameManager;