"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = run;

var _commander = _interopRequireDefault(require("commander"));

var _glob = _interopRequireDefault(require("glob"));

var _fs = require("mz/fs");

var _path = require("path");

var _util = require("util");

var _index = require("./index");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var glob = (0, _util.promisify)(_glob["default"]);

function run() {
  _commander["default"].description("Sucrase: super-fast Babel alternative.").usage("[options] <srcDir>").option("-d, --out-dir <out>", "Compile an input directory of modules into an output directory.").option("-p, --project <dir>", "Compile a TypeScript project, will read from tsconfig.json in <dir>").option("--out-extension <extension>", "File extension to use for all output files.", "js").option("--exclude-dirs <paths>", "Names of directories that should not be traversed.").option("-q, --quiet", "Don't print the names of converted files.").option("-t, --transforms <transforms>", "Comma-separated list of transforms to run.").option("--disable-es-transforms", "Opt out of all ES syntax transforms.").option("--jsx-runtime <string>", "Transformation mode for the JSX transform.").option("--production", "Disable debugging information from JSX in output.").option("--jsx-import-source <string>", "Automatic JSX transform import path prefix, defaults to `React.Fragment`.").option("--jsx-pragma <string>", "Classic JSX transform element creation function, defaults to `React.createElement`.").option("--jsx-fragment-pragma <string>", "Classic JSX transform fragment component, defaults to `React.Fragment`.").option("--keep-unused-imports", "Disable automatic removal of type-only imports/exports.").option("--preserve-dynamic-import", "Don't transpile dynamic import() to require.").option("--inject-create-require-for-import-require", "Use `createRequire` when transpiling TS `import = require` to ESM.").option("--enable-legacy-typescript-module-interop", "Use default TypeScript ESM/CJS interop strategy.").option("--enable-legacy-babel5-module-interop", "Use Babel 5 ESM/CJS interop strategy.").parse(process.argv);

  if (_commander["default"].project) {
    if (_commander["default"].outDir || _commander["default"].transforms || _commander["default"].args[0] || _commander["default"].enableLegacyTypescriptModuleInterop) {
      console.error("If TypeScript project is specified, out directory, transforms, source " + "directory, and --enable-legacy-typescript-module-interop may not be specified.");
      process.exit(1);
    }
  } else {
    if (!_commander["default"].outDir) {
      console.error("Out directory is required");
      process.exit(1);
    }

    if (!_commander["default"].transforms) {
      console.error("Transforms option is required.");
      process.exit(1);
    }

    if (!_commander["default"].args[0]) {
      console.error("Source directory is required.");
      process.exit(1);
    }
  }

  var options = {
    outDirPath: _commander["default"].outDir,
    srcDirPath: _commander["default"].args[0],
    project: _commander["default"].project,
    outExtension: _commander["default"].outExtension,
    excludeDirs: _commander["default"].excludeDirs ? _commander["default"].excludeDirs.split(",") : [],
    quiet: _commander["default"].quiet,
    sucraseOptions: {
      transforms: _commander["default"].transforms ? _commander["default"].transforms.split(",") : [],
      disableESTransforms: _commander["default"].disableEsTransforms,
      jsxRuntime: _commander["default"].jsxRuntime,
      production: _commander["default"].production,
      jsxImportSource: _commander["default"].jsxImportSource,
      jsxPragma: _commander["default"].jsxPragma || "React.createElement",
      jsxFragmentPragma: _commander["default"].jsxFragmentPragma || "React.Fragment",
      keepUnusedImports: _commander["default"].keepUnusedImports,
      preserveDynamicImport: _commander["default"].preserveDynamicImport,
      injectCreateRequireForImportRequire: _commander["default"].injectCreateRequireForImportRequire,
      enableLegacyTypeScriptModuleInterop: _commander["default"].enableLegacyTypescriptModuleInterop,
      enableLegacyBabel5ModuleInterop: _commander["default"].enableLegacyBabel5ModuleInterop
    }
  };
  buildDirectory(options)["catch"](function (e) {
    process.exitCode = 1;
    console.error(e);
  });
}

function findFiles(options) {
  var outDirPath, srcDirPath, extensions, outArr, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _loop, _iterator, _step, _ret;

  return regeneratorRuntime.async(function findFiles$(_context2) {
    while (1) {
      switch (_context2.prev = _context2.next) {
        case 0:
          outDirPath = options.outDirPath;
          srcDirPath = options.srcDirPath;
          extensions = options.sucraseOptions.transforms.includes("typescript") ? [".ts", ".tsx"] : [".js", ".jsx"];
          _context2.next = 5;
          return regeneratorRuntime.awrap((0, _fs.exists)(outDirPath));

        case 5:
          if (_context2.sent) {
            _context2.next = 8;
            break;
          }

          _context2.next = 8;
          return regeneratorRuntime.awrap((0, _fs.mkdir)(outDirPath));

        case 8:
          outArr = [];
          _iteratorNormalCompletion = true;
          _didIteratorError = false;
          _iteratorError = undefined;
          _context2.prev = 12;

          _loop = function _loop() {
            var child, srcChildPath, outChildPath, innerOptions, innerFiles, outPath;
            return regeneratorRuntime.async(function _loop$(_context) {
              while (1) {
                switch (_context.prev = _context.next) {
                  case 0:
                    child = _step.value;

                    if (!(["node_modules", ".git"].includes(child) || options.excludeDirs.includes(child))) {
                      _context.next = 3;
                      break;
                    }

                    return _context.abrupt("return", "continue");

                  case 3:
                    srcChildPath = (0, _path.join)(srcDirPath, child);
                    outChildPath = (0, _path.join)(outDirPath, child);
                    _context.next = 7;
                    return regeneratorRuntime.awrap((0, _fs.stat)(srcChildPath));

                  case 7:
                    if (!_context.sent.isDirectory()) {
                      _context.next = 17;
                      break;
                    }

                    innerOptions = _objectSpread({}, options);
                    innerOptions.srcDirPath = srcChildPath;
                    innerOptions.outDirPath = outChildPath;
                    _context.next = 13;
                    return regeneratorRuntime.awrap(findFiles(innerOptions));

                  case 13:
                    innerFiles = _context.sent;
                    outArr.push.apply(outArr, _toConsumableArray(innerFiles));
                    _context.next = 18;
                    break;

                  case 17:
                    if (extensions.some(function (ext) {
                      return srcChildPath.endsWith(ext);
                    })) {
                      outPath = outChildPath.replace(/\.\w+$/, ".".concat(options.outExtension));
                      outArr.push({
                        srcPath: srcChildPath,
                        outPath: outPath
                      });
                    }

                  case 18:
                  case "end":
                    return _context.stop();
                }
              }
            });
          };

          _context2.next = 16;
          return regeneratorRuntime.awrap((0, _fs.readdir)(srcDirPath));

        case 16:
          _context2.t0 = Symbol.iterator;
          _iterator = _context2.sent[_context2.t0]();

        case 18:
          if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {
            _context2.next = 27;
            break;
          }

          _context2.next = 21;
          return regeneratorRuntime.awrap(_loop());

        case 21:
          _ret = _context2.sent;

          if (!(_ret === "continue")) {
            _context2.next = 24;
            break;
          }

          return _context2.abrupt("continue", 24);

        case 24:
          _iteratorNormalCompletion = true;
          _context2.next = 18;
          break;

        case 27:
          _context2.next = 33;
          break;

        case 29:
          _context2.prev = 29;
          _context2.t1 = _context2["catch"](12);
          _didIteratorError = true;
          _iteratorError = _context2.t1;

        case 33:
          _context2.prev = 33;
          _context2.prev = 34;

          if (!_iteratorNormalCompletion && _iterator["return"] != null) {
            _iterator["return"]();
          }

        case 36:
          _context2.prev = 36;

          if (!_didIteratorError) {
            _context2.next = 39;
            break;
          }

          throw _iteratorError;

        case 39:
          return _context2.finish(36);

        case 40:
          return _context2.finish(33);

        case 41:
          return _context2.abrupt("return", outArr);

        case 42:
        case "end":
          return _context2.stop();
      }
    }
  }, null, null, [[12, 29, 33, 41], [34,, 36, 40]]);
}

function runGlob(options) {
  var tsConfigPath, str, json, foundFiles, files, include, absProject, outDirs, _iteratorNormalCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, file, srcFile, outFile, outPath, outDir, _iteratorNormalCompletion3, _didIteratorError3, _iteratorError3, _iterator3, _step3, pattern, globFiles, _iteratorNormalCompletion4, _didIteratorError4, _iteratorError4, _iterator4, _step4, _file, relativeFile, _outFile, _outPath, _outDir, _i, _outDirs, _outDirPath;

  return regeneratorRuntime.async(function runGlob$(_context3) {
    while (1) {
      switch (_context3.prev = _context3.next) {
        case 0:
          tsConfigPath = (0, _path.join)(options.project, "tsconfig.json");
          _context3.prev = 1;
          _context3.next = 4;
          return regeneratorRuntime.awrap((0, _fs.readFile)(tsConfigPath, "utf8"));

        case 4:
          str = _context3.sent;
          _context3.next = 13;
          break;

        case 7:
          _context3.prev = 7;
          _context3.t0 = _context3["catch"](1);
          console.error("Could not find project tsconfig.json");
          console.error("  --project=".concat(options.project));
          console.error(_context3.t0);
          process.exit(1);

        case 13:
          json = JSON.parse(str);
          foundFiles = [];
          files = json.files;
          include = json.include;
          absProject = (0, _path.join)(process.cwd(), options.project);
          outDirs = [];
          _context3.next = 21;
          return regeneratorRuntime.awrap((0, _fs.exists)(options.outDirPath));

        case 21:
          if (_context3.sent) {
            _context3.next = 24;
            break;
          }

          _context3.next = 24;
          return regeneratorRuntime.awrap((0, _fs.mkdir)(options.outDirPath));

        case 24:
          if (!files) {
            _context3.next = 59;
            break;
          }

          _iteratorNormalCompletion2 = true;
          _didIteratorError2 = false;
          _iteratorError2 = undefined;
          _context3.prev = 28;
          _iterator2 = files[Symbol.iterator]();

        case 30:
          if (_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done) {
            _context3.next = 45;
            break;
          }

          file = _step2.value;

          if (!file.endsWith(".d.ts")) {
            _context3.next = 34;
            break;
          }

          return _context3.abrupt("continue", 42);

        case 34:
          if (!(!file.endsWith(".ts") && !file.endsWith(".js"))) {
            _context3.next = 36;
            break;
          }

          return _context3.abrupt("continue", 42);

        case 36:
          srcFile = (0, _path.join)(absProject, file);
          outFile = (0, _path.join)(options.outDirPath, file);
          outPath = outFile.replace(/\.\w+$/, ".".concat(options.outExtension));
          outDir = (0, _path.dirname)(outPath);

          if (!outDirs.includes(outDir)) {
            outDirs.push(outDir);
          }

          foundFiles.push({
            srcPath: srcFile,
            outPath: outPath
          });

        case 42:
          _iteratorNormalCompletion2 = true;
          _context3.next = 30;
          break;

        case 45:
          _context3.next = 51;
          break;

        case 47:
          _context3.prev = 47;
          _context3.t1 = _context3["catch"](28);
          _didIteratorError2 = true;
          _iteratorError2 = _context3.t1;

        case 51:
          _context3.prev = 51;
          _context3.prev = 52;

          if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
            _iterator2["return"]();
          }

        case 54:
          _context3.prev = 54;

          if (!_didIteratorError2) {
            _context3.next = 57;
            break;
          }

          throw _iteratorError2;

        case 57:
          return _context3.finish(54);

        case 58:
          return _context3.finish(51);

        case 59:
          if (!include) {
            _context3.next = 121;
            break;
          }

          _iteratorNormalCompletion3 = true;
          _didIteratorError3 = false;
          _iteratorError3 = undefined;
          _context3.prev = 63;
          _iterator3 = include[Symbol.iterator]();

        case 65:
          if (_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done) {
            _context3.next = 107;
            break;
          }

          pattern = _step3.value;
          _context3.next = 69;
          return regeneratorRuntime.awrap(glob((0, _path.join)(absProject, pattern)));

        case 69:
          globFiles = _context3.sent;
          _iteratorNormalCompletion4 = true;
          _didIteratorError4 = false;
          _iteratorError4 = undefined;
          _context3.prev = 73;
          _iterator4 = globFiles[Symbol.iterator]();

        case 75:
          if (_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done) {
            _context3.next = 90;
            break;
          }

          _file = _step4.value;

          if (!(!_file.endsWith(".ts") && !_file.endsWith(".js"))) {
            _context3.next = 79;
            break;
          }

          return _context3.abrupt("continue", 87);

        case 79:
          if (!_file.endsWith(".d.ts")) {
            _context3.next = 81;
            break;
          }

          return _context3.abrupt("continue", 87);

        case 81:
          relativeFile = (0, _path.relative)(absProject, _file);
          _outFile = (0, _path.join)(options.outDirPath, relativeFile);
          _outPath = _outFile.replace(/\.\w+$/, ".".concat(options.outExtension));
          _outDir = (0, _path.dirname)(_outPath);

          if (!outDirs.includes(_outDir)) {
            outDirs.push(_outDir);
          }

          foundFiles.push({
            srcPath: _file,
            outPath: _outPath
          });

        case 87:
          _iteratorNormalCompletion4 = true;
          _context3.next = 75;
          break;

        case 90:
          _context3.next = 96;
          break;

        case 92:
          _context3.prev = 92;
          _context3.t2 = _context3["catch"](73);
          _didIteratorError4 = true;
          _iteratorError4 = _context3.t2;

        case 96:
          _context3.prev = 96;
          _context3.prev = 97;

          if (!_iteratorNormalCompletion4 && _iterator4["return"] != null) {
            _iterator4["return"]();
          }

        case 99:
          _context3.prev = 99;

          if (!_didIteratorError4) {
            _context3.next = 102;
            break;
          }

          throw _iteratorError4;

        case 102:
          return _context3.finish(99);

        case 103:
          return _context3.finish(96);

        case 104:
          _iteratorNormalCompletion3 = true;
          _context3.next = 65;
          break;

        case 107:
          _context3.next = 113;
          break;

        case 109:
          _context3.prev = 109;
          _context3.t3 = _context3["catch"](63);
          _didIteratorError3 = true;
          _iteratorError3 = _context3.t3;

        case 113:
          _context3.prev = 113;
          _context3.prev = 114;

          if (!_iteratorNormalCompletion3 && _iterator3["return"] != null) {
            _iterator3["return"]();
          }

        case 116:
          _context3.prev = 116;

          if (!_didIteratorError3) {
            _context3.next = 119;
            break;
          }

          throw _iteratorError3;

        case 119:
          return _context3.finish(116);

        case 120:
          return _context3.finish(113);

        case 121:
          _i = 0, _outDirs = outDirs;

        case 122:
          if (!(_i < _outDirs.length)) {
            _context3.next = 132;
            break;
          }

          _outDirPath = _outDirs[_i];
          _context3.next = 126;
          return regeneratorRuntime.awrap((0, _fs.exists)(_outDirPath));

        case 126:
          if (_context3.sent) {
            _context3.next = 129;
            break;
          }

          _context3.next = 129;
          return regeneratorRuntime.awrap((0, _fs.mkdir)(_outDirPath));

        case 129:
          _i++;
          _context3.next = 122;
          break;

        case 132:
          return _context3.abrupt("return", foundFiles);

        case 133:
        case "end":
          return _context3.stop();
      }
    }
  }, null, null, [[1, 7], [28, 47, 51, 59], [52,, 54, 58], [63, 109, 113, 121], [73, 92, 96, 104], [97,, 99, 103], [114,, 116, 120]]);
}

function updateOptionsFromProject(options) {
  var tsConfigPath, str, json, sucraseOpts, compilerOpts;
  return regeneratorRuntime.async(function updateOptionsFromProject$(_context4) {
    while (1) {
      switch (_context4.prev = _context4.next) {
        case 0:
          /**
           * Read the project information and assign the following.
           *  - outDirPath
           *  - transform: imports
           *  - transform: typescript
           *  - enableLegacyTypescriptModuleInterop: true/false.
           */
          tsConfigPath = (0, _path.join)(options.project, "tsconfig.json");
          _context4.prev = 1;
          _context4.next = 4;
          return regeneratorRuntime.awrap((0, _fs.readFile)(tsConfigPath, "utf8"));

        case 4:
          str = _context4.sent;
          _context4.next = 13;
          break;

        case 7:
          _context4.prev = 7;
          _context4.t0 = _context4["catch"](1);
          console.error("Could not find project tsconfig.json");
          console.error("  --project=".concat(options.project));
          console.error(_context4.t0);
          process.exit(1);

        case 13:
          json = JSON.parse(str);
          sucraseOpts = options.sucraseOptions;

          if (!sucraseOpts.transforms.includes("typescript")) {
            sucraseOpts.transforms.push("typescript");
          }

          compilerOpts = json.compilerOptions;

          if (compilerOpts.outDir) {
            options.outDirPath = (0, _path.join)(process.cwd(), options.project, compilerOpts.outDir);
          }

          if (compilerOpts.esModuleInterop !== true) {
            sucraseOpts.enableLegacyTypeScriptModuleInterop = true;
          }

          if (compilerOpts.module === "commonjs") {
            if (!sucraseOpts.transforms.includes("imports")) {
              sucraseOpts.transforms.push("imports");
            }
          }

        case 20:
        case "end":
          return _context4.stop();
      }
    }
  }, null, null, [[1, 7]]);
}

function buildDirectory(options) {
  var files, _iteratorNormalCompletion5, _didIteratorError5, _iteratorError5, _iterator5, _step5, file;

  return regeneratorRuntime.async(function buildDirectory$(_context5) {
    while (1) {
      switch (_context5.prev = _context5.next) {
        case 0:
          if (!(options.outDirPath && options.srcDirPath)) {
            _context5.next = 6;
            break;
          }

          _context5.next = 3;
          return regeneratorRuntime.awrap(findFiles(options));

        case 3:
          files = _context5.sent;
          _context5.next = 16;
          break;

        case 6:
          if (!options.project) {
            _context5.next = 14;
            break;
          }

          _context5.next = 9;
          return regeneratorRuntime.awrap(updateOptionsFromProject(options));

        case 9:
          _context5.next = 11;
          return regeneratorRuntime.awrap(runGlob(options));

        case 11:
          files = _context5.sent;
          _context5.next = 16;
          break;

        case 14:
          console.error("Project or Source directory required.");
          process.exit(1);

        case 16:
          _iteratorNormalCompletion5 = true;
          _didIteratorError5 = false;
          _iteratorError5 = undefined;
          _context5.prev = 19;
          _iterator5 = files[Symbol.iterator]();

        case 21:
          if (_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done) {
            _context5.next = 28;
            break;
          }

          file = _step5.value;
          _context5.next = 25;
          return regeneratorRuntime.awrap(buildFile(file.srcPath, file.outPath, options));

        case 25:
          _iteratorNormalCompletion5 = true;
          _context5.next = 21;
          break;

        case 28:
          _context5.next = 34;
          break;

        case 30:
          _context5.prev = 30;
          _context5.t0 = _context5["catch"](19);
          _didIteratorError5 = true;
          _iteratorError5 = _context5.t0;

        case 34:
          _context5.prev = 34;
          _context5.prev = 35;

          if (!_iteratorNormalCompletion5 && _iterator5["return"] != null) {
            _iterator5["return"]();
          }

        case 37:
          _context5.prev = 37;

          if (!_didIteratorError5) {
            _context5.next = 40;
            break;
          }

          throw _iteratorError5;

        case 40:
          return _context5.finish(37);

        case 41:
          return _context5.finish(34);

        case 42:
        case "end":
          return _context5.stop();
      }
    }
  }, null, null, [[19, 30, 34, 42], [35,, 37, 41]]);
}

function buildFile(srcPath, outPath, options) {
  var code, transformedCode;
  return regeneratorRuntime.async(function buildFile$(_context6) {
    while (1) {
      switch (_context6.prev = _context6.next) {
        case 0:
          if (!options.quiet) {
            console.log("".concat(srcPath, " -> ").concat(outPath));
          }

          _context6.next = 3;
          return regeneratorRuntime.awrap((0, _fs.readFile)(srcPath));

        case 3:
          code = _context6.sent.toString();
          transformedCode = (0, _index.transform)(code, _objectSpread({}, options.sucraseOptions, {
            filePath: srcPath
          })).code;
          _context6.next = 7;
          return regeneratorRuntime.awrap((0, _fs.writeFile)(outPath, transformedCode));

        case 7:
        case "end":
          return _context6.stop();
      }
    }
  });
}