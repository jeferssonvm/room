"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = getJSXPragmaInfo;

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function getJSXPragmaInfo(options) {
  var _splitPragma = splitPragma(options.jsxPragma || "React.createElement"),
      _splitPragma2 = _slicedToArray(_splitPragma, 2),
      base = _splitPragma2[0],
      suffix = _splitPragma2[1];

  var _splitPragma3 = splitPragma(options.jsxFragmentPragma || "React.Fragment"),
      _splitPragma4 = _slicedToArray(_splitPragma3, 2),
      fragmentBase = _splitPragma4[0],
      fragmentSuffix = _splitPragma4[1];

  return {
    base: base,
    suffix: suffix,
    fragmentBase: fragmentBase,
    fragmentSuffix: fragmentSuffix
  };
}

function splitPragma(pragma) {
  var dotIndex = pragma.indexOf(".");

  if (dotIndex === -1) {
    dotIndex = pragma.length;
  }

  return [pragma.slice(0, dotIndex), pragma.slice(dotIndex)];
}