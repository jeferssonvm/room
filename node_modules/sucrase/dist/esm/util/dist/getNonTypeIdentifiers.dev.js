"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getNonTypeIdentifiers = getNonTypeIdentifiers;

var _tokenizer = require("../parser/tokenizer");

var _types = require("../parser/tokenizer/types");

var _JSXTransformer = require("../transformers/JSXTransformer");

var _getJSXPragmaInfo = _interopRequireDefault(require("./getJSXPragmaInfo"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function getNonTypeIdentifiers(tokens, options) {
  var jsxPragmaInfo = (0, _getJSXPragmaInfo["default"])(options);
  var nonTypeIdentifiers = new Set();

  for (var i = 0; i < tokens.tokens.length; i++) {
    var token = tokens.tokens[i];

    if (token.type === _types.TokenType.name && !token.isType && (token.identifierRole === _tokenizer.IdentifierRole.Access || token.identifierRole === _tokenizer.IdentifierRole.ObjectShorthand || token.identifierRole === _tokenizer.IdentifierRole.ExportAccess) && !token.shadowsGlobal) {
      nonTypeIdentifiers.add(tokens.identifierNameForToken(token));
    }

    if (token.type === _types.TokenType.jsxTagStart) {
      nonTypeIdentifiers.add(jsxPragmaInfo.base);
    }

    if (token.type === _types.TokenType.jsxTagStart && i + 1 < tokens.tokens.length && tokens.tokens[i + 1].type === _types.TokenType.jsxTagEnd) {
      nonTypeIdentifiers.add(jsxPragmaInfo.base);
      nonTypeIdentifiers.add(jsxPragmaInfo.fragmentBase);
    }

    if (token.type === _types.TokenType.jsxName && token.identifierRole === _tokenizer.IdentifierRole.Access) {
      var identifierName = tokens.identifierNameForToken(token); // Lower-case single-component tag names like "div" don't count.

      if (!(0, _JSXTransformer.startsWithLowerCase)(identifierName) || tokens.tokens[i + 1].type === _types.TokenType.dot) {
        nonTypeIdentifiers.add(tokens.identifierNameForToken(token));
      }
    }
  }

  return nonTypeIdentifiers;
}