"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getNextContextId = getNextContextId;
exports.augmentError = augmentError;
exports.locationForIndex = locationForIndex;
exports.initParser = initParser;
exports.Loc = exports.nextContextId = exports.input = exports.state = exports.isFlowEnabled = exports.isTypeScriptEnabled = exports.isJSXEnabled = void 0;

var _state = _interopRequireDefault(require("../tokenizer/state"));

var _charcodes = require("../util/charcodes");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var isJSXEnabled;
exports.isJSXEnabled = isJSXEnabled;
var isTypeScriptEnabled;
exports.isTypeScriptEnabled = isTypeScriptEnabled;
var isFlowEnabled;
exports.isFlowEnabled = isFlowEnabled;
var state;
exports.state = state;
var input;
exports.input = input;
var nextContextId;
exports.nextContextId = nextContextId;

function getNextContextId() {
  var _nextContextId;

  return _nextContextId = +nextContextId, exports.nextContextId = nextContextId = _nextContextId + 1, _nextContextId;
} // eslint-disable-next-line @typescript-eslint/no-explicit-any


function augmentError(error) {
  if ("pos" in error) {
    var loc = locationForIndex(error.pos);
    error.message += " (".concat(loc.line, ":").concat(loc.column, ")");
    error.loc = loc;
  }

  return error;
}

var Loc = function Loc(line, column) {
  _classCallCheck(this, Loc);

  this.line = line;
  this.column = column;
};

exports.Loc = Loc;

function locationForIndex(pos) {
  var line = 1;
  var column = 1;

  for (var i = 0; i < pos; i++) {
    if (input.charCodeAt(i) === _charcodes.charCodes.lineFeed) {
      line++;
      column = 1;
    } else {
      column++;
    }
  }

  return new Loc(line, column);
}

function initParser(inputCode, isJSXEnabledArg, isTypeScriptEnabledArg, isFlowEnabledArg) {
  exports.input = input = inputCode;
  exports.state = state = new _state["default"]();
  exports.nextContextId = nextContextId = 1;
  exports.isJSXEnabled = isJSXEnabled = isJSXEnabledArg;
  exports.isTypeScriptEnabled = isTypeScriptEnabled = isTypeScriptEnabledArg;
  exports.isFlowEnabled = isFlowEnabled = isFlowEnabledArg;
}