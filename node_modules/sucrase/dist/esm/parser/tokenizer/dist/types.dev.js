"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.formatTokenType = formatTokenType;
exports.TokenType = void 0;
// Generated file, do not edit! Run "yarn generate" to re-generate this file.

/* istanbul ignore file */

/**
 * Enum of all token types, with bit fields to signify meaningful properties.
 */
var TokenType;
exports.TokenType = TokenType;

(function (TokenType) {
  // Precedence 0 means not an operator; otherwise it is a positive number up to 12.
  var PRECEDENCE_MASK = 0xf;
  TokenType[TokenType["PRECEDENCE_MASK"] = PRECEDENCE_MASK] = "PRECEDENCE_MASK";
  var IS_KEYWORD = 1 << 4;
  TokenType[TokenType["IS_KEYWORD"] = IS_KEYWORD] = "IS_KEYWORD";
  var IS_ASSIGN = 1 << 5;
  TokenType[TokenType["IS_ASSIGN"] = IS_ASSIGN] = "IS_ASSIGN";
  var IS_RIGHT_ASSOCIATIVE = 1 << 6;
  TokenType[TokenType["IS_RIGHT_ASSOCIATIVE"] = IS_RIGHT_ASSOCIATIVE] = "IS_RIGHT_ASSOCIATIVE";
  var IS_PREFIX = 1 << 7;
  TokenType[TokenType["IS_PREFIX"] = IS_PREFIX] = "IS_PREFIX";
  var IS_POSTFIX = 1 << 8;
  TokenType[TokenType["IS_POSTFIX"] = IS_POSTFIX] = "IS_POSTFIX";
  var IS_EXPRESSION_START = 1 << 9;
  TokenType[TokenType["IS_EXPRESSION_START"] = IS_EXPRESSION_START] = "IS_EXPRESSION_START";
  var num = 512;
  TokenType[TokenType["num"] = num] = "num"; // num startsExpr

  var bigint = 1536;
  TokenType[TokenType["bigint"] = bigint] = "bigint"; // bigint startsExpr

  var decimal = 2560;
  TokenType[TokenType["decimal"] = decimal] = "decimal"; // decimal startsExpr

  var regexp = 3584;
  TokenType[TokenType["regexp"] = regexp] = "regexp"; // regexp startsExpr

  var string = 4608;
  TokenType[TokenType["string"] = string] = "string"; // string startsExpr

  var name = 5632;
  TokenType[TokenType["name"] = name] = "name"; // name startsExpr

  var eof = 6144;
  TokenType[TokenType["eof"] = eof] = "eof"; // eof

  var bracketL = 7680;
  TokenType[TokenType["bracketL"] = bracketL] = "bracketL"; // [ startsExpr

  var bracketR = 8192;
  TokenType[TokenType["bracketR"] = bracketR] = "bracketR"; // ]

  var braceL = 9728;
  TokenType[TokenType["braceL"] = braceL] = "braceL"; // { startsExpr

  var braceBarL = 10752;
  TokenType[TokenType["braceBarL"] = braceBarL] = "braceBarL"; // {| startsExpr

  var braceR = 11264;
  TokenType[TokenType["braceR"] = braceR] = "braceR"; // }

  var braceBarR = 12288;
  TokenType[TokenType["braceBarR"] = braceBarR] = "braceBarR"; // |}

  var parenL = 13824;
  TokenType[TokenType["parenL"] = parenL] = "parenL"; // ( startsExpr

  var parenR = 14336;
  TokenType[TokenType["parenR"] = parenR] = "parenR"; // )

  var comma = 15360;
  TokenType[TokenType["comma"] = comma] = "comma"; // ,

  var semi = 16384;
  TokenType[TokenType["semi"] = semi] = "semi"; // ;

  var colon = 17408;
  TokenType[TokenType["colon"] = colon] = "colon"; // :

  var doubleColon = 18432;
  TokenType[TokenType["doubleColon"] = doubleColon] = "doubleColon"; // ::

  var dot = 19456;
  TokenType[TokenType["dot"] = dot] = "dot"; // .

  var question = 20480;
  TokenType[TokenType["question"] = question] = "question"; // ?

  var questionDot = 21504;
  TokenType[TokenType["questionDot"] = questionDot] = "questionDot"; // ?.

  var arrow = 22528;
  TokenType[TokenType["arrow"] = arrow] = "arrow"; // =>

  var template = 23552;
  TokenType[TokenType["template"] = template] = "template"; // template

  var ellipsis = 24576;
  TokenType[TokenType["ellipsis"] = ellipsis] = "ellipsis"; // ...

  var backQuote = 25600;
  TokenType[TokenType["backQuote"] = backQuote] = "backQuote"; // `

  var dollarBraceL = 27136;
  TokenType[TokenType["dollarBraceL"] = dollarBraceL] = "dollarBraceL"; // ${ startsExpr

  var at = 27648;
  TokenType[TokenType["at"] = at] = "at"; // @

  var hash = 29184;
  TokenType[TokenType["hash"] = hash] = "hash"; // # startsExpr

  var eq = 29728;
  TokenType[TokenType["eq"] = eq] = "eq"; // = isAssign

  var assign = 30752;
  TokenType[TokenType["assign"] = assign] = "assign"; // _= isAssign

  var preIncDec = 32640;
  TokenType[TokenType["preIncDec"] = preIncDec] = "preIncDec"; // ++/-- prefix postfix startsExpr

  var postIncDec = 33664;
  TokenType[TokenType["postIncDec"] = postIncDec] = "postIncDec"; // ++/-- prefix postfix startsExpr

  var bang = 34432;
  TokenType[TokenType["bang"] = bang] = "bang"; // ! prefix startsExpr

  var tilde = 35456;
  TokenType[TokenType["tilde"] = tilde] = "tilde"; // ~ prefix startsExpr

  var pipeline = 35841;
  TokenType[TokenType["pipeline"] = pipeline] = "pipeline"; // |> prec:1

  var nullishCoalescing = 36866;
  TokenType[TokenType["nullishCoalescing"] = nullishCoalescing] = "nullishCoalescing"; // ?? prec:2

  var logicalOR = 37890;
  TokenType[TokenType["logicalOR"] = logicalOR] = "logicalOR"; // || prec:2

  var logicalAND = 38915;
  TokenType[TokenType["logicalAND"] = logicalAND] = "logicalAND"; // && prec:3

  var bitwiseOR = 39940;
  TokenType[TokenType["bitwiseOR"] = bitwiseOR] = "bitwiseOR"; // | prec:4

  var bitwiseXOR = 40965;
  TokenType[TokenType["bitwiseXOR"] = bitwiseXOR] = "bitwiseXOR"; // ^ prec:5

  var bitwiseAND = 41990;
  TokenType[TokenType["bitwiseAND"] = bitwiseAND] = "bitwiseAND"; // & prec:6

  var equality = 43015;
  TokenType[TokenType["equality"] = equality] = "equality"; // ==/!= prec:7

  var lessThan = 44040;
  TokenType[TokenType["lessThan"] = lessThan] = "lessThan"; // < prec:8

  var greaterThan = 45064;
  TokenType[TokenType["greaterThan"] = greaterThan] = "greaterThan"; // > prec:8

  var relationalOrEqual = 46088;
  TokenType[TokenType["relationalOrEqual"] = relationalOrEqual] = "relationalOrEqual"; // <=/>= prec:8

  var bitShiftL = 47113;
  TokenType[TokenType["bitShiftL"] = bitShiftL] = "bitShiftL"; // << prec:9

  var bitShiftR = 48137;
  TokenType[TokenType["bitShiftR"] = bitShiftR] = "bitShiftR"; // >>/>>> prec:9

  var plus = 49802;
  TokenType[TokenType["plus"] = plus] = "plus"; // + prec:10 prefix startsExpr

  var minus = 50826;
  TokenType[TokenType["minus"] = minus] = "minus"; // - prec:10 prefix startsExpr

  var modulo = 51723;
  TokenType[TokenType["modulo"] = modulo] = "modulo"; // % prec:11 startsExpr

  var star = 52235;
  TokenType[TokenType["star"] = star] = "star"; // * prec:11

  var slash = 53259;
  TokenType[TokenType["slash"] = slash] = "slash"; // / prec:11

  var exponent = 54348;
  TokenType[TokenType["exponent"] = exponent] = "exponent"; // ** prec:12 rightAssociative

  var jsxName = 55296;
  TokenType[TokenType["jsxName"] = jsxName] = "jsxName"; // jsxName

  var jsxText = 56320;
  TokenType[TokenType["jsxText"] = jsxText] = "jsxText"; // jsxText

  var jsxEmptyText = 57344;
  TokenType[TokenType["jsxEmptyText"] = jsxEmptyText] = "jsxEmptyText"; // jsxEmptyText

  var jsxTagStart = 58880;
  TokenType[TokenType["jsxTagStart"] = jsxTagStart] = "jsxTagStart"; // jsxTagStart startsExpr

  var jsxTagEnd = 59392;
  TokenType[TokenType["jsxTagEnd"] = jsxTagEnd] = "jsxTagEnd"; // jsxTagEnd

  var typeParameterStart = 60928;
  TokenType[TokenType["typeParameterStart"] = typeParameterStart] = "typeParameterStart"; // typeParameterStart startsExpr

  var nonNullAssertion = 61440;
  TokenType[TokenType["nonNullAssertion"] = nonNullAssertion] = "nonNullAssertion"; // nonNullAssertion

  var _break = 62480;
  TokenType[TokenType["_break"] = _break] = "_break"; // break keyword

  var _case = 63504;
  TokenType[TokenType["_case"] = _case] = "_case"; // case keyword

  var _catch = 64528;
  TokenType[TokenType["_catch"] = _catch] = "_catch"; // catch keyword

  var _continue = 65552;
  TokenType[TokenType["_continue"] = _continue] = "_continue"; // continue keyword

  var _debugger = 66576;
  TokenType[TokenType["_debugger"] = _debugger] = "_debugger"; // debugger keyword

  var _default = 67600;
  TokenType[TokenType["_default"] = _default] = "_default"; // default keyword

  var _do = 68624;
  TokenType[TokenType["_do"] = _do] = "_do"; // do keyword

  var _else = 69648;
  TokenType[TokenType["_else"] = _else] = "_else"; // else keyword

  var _finally = 70672;
  TokenType[TokenType["_finally"] = _finally] = "_finally"; // finally keyword

  var _for = 71696;
  TokenType[TokenType["_for"] = _for] = "_for"; // for keyword

  var _function = 73232;
  TokenType[TokenType["_function"] = _function] = "_function"; // function keyword startsExpr

  var _if = 73744;
  TokenType[TokenType["_if"] = _if] = "_if"; // if keyword

  var _return = 74768;
  TokenType[TokenType["_return"] = _return] = "_return"; // return keyword

  var _switch = 75792;
  TokenType[TokenType["_switch"] = _switch] = "_switch"; // switch keyword

  var _throw = 77456;
  TokenType[TokenType["_throw"] = _throw] = "_throw"; // throw keyword prefix startsExpr

  var _try = 77840;
  TokenType[TokenType["_try"] = _try] = "_try"; // try keyword

  var _var = 78864;
  TokenType[TokenType["_var"] = _var] = "_var"; // var keyword

  var _let = 79888;
  TokenType[TokenType["_let"] = _let] = "_let"; // let keyword

  var _const = 80912;
  TokenType[TokenType["_const"] = _const] = "_const"; // const keyword

  var _while = 81936;
  TokenType[TokenType["_while"] = _while] = "_while"; // while keyword

  var _with = 82960;
  TokenType[TokenType["_with"] = _with] = "_with"; // with keyword

  var _new = 84496;
  TokenType[TokenType["_new"] = _new] = "_new"; // new keyword startsExpr

  var _this = 85520;
  TokenType[TokenType["_this"] = _this] = "_this"; // this keyword startsExpr

  var _super = 86544;
  TokenType[TokenType["_super"] = _super] = "_super"; // super keyword startsExpr

  var _class = 87568;
  TokenType[TokenType["_class"] = _class] = "_class"; // class keyword startsExpr

  var _extends = 88080;
  TokenType[TokenType["_extends"] = _extends] = "_extends"; // extends keyword

  var _export = 89104;
  TokenType[TokenType["_export"] = _export] = "_export"; // export keyword

  var _import = 90640;
  TokenType[TokenType["_import"] = _import] = "_import"; // import keyword startsExpr

  var _yield = 91664;
  TokenType[TokenType["_yield"] = _yield] = "_yield"; // yield keyword startsExpr

  var _null = 92688;
  TokenType[TokenType["_null"] = _null] = "_null"; // null keyword startsExpr

  var _true = 93712;
  TokenType[TokenType["_true"] = _true] = "_true"; // true keyword startsExpr

  var _false = 94736;
  TokenType[TokenType["_false"] = _false] = "_false"; // false keyword startsExpr

  var _in = 95256;
  TokenType[TokenType["_in"] = _in] = "_in"; // in prec:8 keyword

  var _instanceof = 96280;
  TokenType[TokenType["_instanceof"] = _instanceof] = "_instanceof"; // instanceof prec:8 keyword

  var _typeof = 97936;
  TokenType[TokenType["_typeof"] = _typeof] = "_typeof"; // typeof keyword prefix startsExpr

  var _void = 98960;
  TokenType[TokenType["_void"] = _void] = "_void"; // void keyword prefix startsExpr

  var _delete = 99984;
  TokenType[TokenType["_delete"] = _delete] = "_delete"; // delete keyword prefix startsExpr

  var _async = 100880;
  TokenType[TokenType["_async"] = _async] = "_async"; // async keyword startsExpr

  var _get = 101904;
  TokenType[TokenType["_get"] = _get] = "_get"; // get keyword startsExpr

  var _set = 102928;
  TokenType[TokenType["_set"] = _set] = "_set"; // set keyword startsExpr

  var _declare = 103952;
  TokenType[TokenType["_declare"] = _declare] = "_declare"; // declare keyword startsExpr

  var _readonly = 104976;
  TokenType[TokenType["_readonly"] = _readonly] = "_readonly"; // readonly keyword startsExpr

  var _abstract = 106000;
  TokenType[TokenType["_abstract"] = _abstract] = "_abstract"; // abstract keyword startsExpr

  var _static = 107024;
  TokenType[TokenType["_static"] = _static] = "_static"; // static keyword startsExpr

  var _public = 107536;
  TokenType[TokenType["_public"] = _public] = "_public"; // public keyword

  var _private = 108560;
  TokenType[TokenType["_private"] = _private] = "_private"; // private keyword

  var _protected = 109584;
  TokenType[TokenType["_protected"] = _protected] = "_protected"; // protected keyword

  var _override = 110608;
  TokenType[TokenType["_override"] = _override] = "_override"; // override keyword

  var _as = 112144;
  TokenType[TokenType["_as"] = _as] = "_as"; // as keyword startsExpr

  var _enum = 113168;
  TokenType[TokenType["_enum"] = _enum] = "_enum"; // enum keyword startsExpr

  var _type = 114192;
  TokenType[TokenType["_type"] = _type] = "_type"; // type keyword startsExpr

  var _implements = 115216;
  TokenType[TokenType["_implements"] = _implements] = "_implements"; // implements keyword startsExpr
})(TokenType || (exports.TokenType = TokenType = {}));

function formatTokenType(tokenType) {
  switch (tokenType) {
    case TokenType.num:
      return "num";

    case TokenType.bigint:
      return "bigint";

    case TokenType.decimal:
      return "decimal";

    case TokenType.regexp:
      return "regexp";

    case TokenType.string:
      return "string";

    case TokenType.name:
      return "name";

    case TokenType.eof:
      return "eof";

    case TokenType.bracketL:
      return "[";

    case TokenType.bracketR:
      return "]";

    case TokenType.braceL:
      return "{";

    case TokenType.braceBarL:
      return "{|";

    case TokenType.braceR:
      return "}";

    case TokenType.braceBarR:
      return "|}";

    case TokenType.parenL:
      return "(";

    case TokenType.parenR:
      return ")";

    case TokenType.comma:
      return ",";

    case TokenType.semi:
      return ";";

    case TokenType.colon:
      return ":";

    case TokenType.doubleColon:
      return "::";

    case TokenType.dot:
      return ".";

    case TokenType.question:
      return "?";

    case TokenType.questionDot:
      return "?.";

    case TokenType.arrow:
      return "=>";

    case TokenType.template:
      return "template";

    case TokenType.ellipsis:
      return "...";

    case TokenType.backQuote:
      return "`";

    case TokenType.dollarBraceL:
      return "${";

    case TokenType.at:
      return "@";

    case TokenType.hash:
      return "#";

    case TokenType.eq:
      return "=";

    case TokenType.assign:
      return "_=";

    case TokenType.preIncDec:
      return "++/--";

    case TokenType.postIncDec:
      return "++/--";

    case TokenType.bang:
      return "!";

    case TokenType.tilde:
      return "~";

    case TokenType.pipeline:
      return "|>";

    case TokenType.nullishCoalescing:
      return "??";

    case TokenType.logicalOR:
      return "||";

    case TokenType.logicalAND:
      return "&&";

    case TokenType.bitwiseOR:
      return "|";

    case TokenType.bitwiseXOR:
      return "^";

    case TokenType.bitwiseAND:
      return "&";

    case TokenType.equality:
      return "==/!=";

    case TokenType.lessThan:
      return "<";

    case TokenType.greaterThan:
      return ">";

    case TokenType.relationalOrEqual:
      return "<=/>=";

    case TokenType.bitShiftL:
      return "<<";

    case TokenType.bitShiftR:
      return ">>/>>>";

    case TokenType.plus:
      return "+";

    case TokenType.minus:
      return "-";

    case TokenType.modulo:
      return "%";

    case TokenType.star:
      return "*";

    case TokenType.slash:
      return "/";

    case TokenType.exponent:
      return "**";

    case TokenType.jsxName:
      return "jsxName";

    case TokenType.jsxText:
      return "jsxText";

    case TokenType.jsxEmptyText:
      return "jsxEmptyText";

    case TokenType.jsxTagStart:
      return "jsxTagStart";

    case TokenType.jsxTagEnd:
      return "jsxTagEnd";

    case TokenType.typeParameterStart:
      return "typeParameterStart";

    case TokenType.nonNullAssertion:
      return "nonNullAssertion";

    case TokenType._break:
      return "break";

    case TokenType._case:
      return "case";

    case TokenType._catch:
      return "catch";

    case TokenType._continue:
      return "continue";

    case TokenType._debugger:
      return "debugger";

    case TokenType._default:
      return "default";

    case TokenType._do:
      return "do";

    case TokenType._else:
      return "else";

    case TokenType._finally:
      return "finally";

    case TokenType._for:
      return "for";

    case TokenType._function:
      return "function";

    case TokenType._if:
      return "if";

    case TokenType._return:
      return "return";

    case TokenType._switch:
      return "switch";

    case TokenType._throw:
      return "throw";

    case TokenType._try:
      return "try";

    case TokenType._var:
      return "var";

    case TokenType._let:
      return "let";

    case TokenType._const:
      return "const";

    case TokenType._while:
      return "while";

    case TokenType._with:
      return "with";

    case TokenType._new:
      return "new";

    case TokenType._this:
      return "this";

    case TokenType._super:
      return "super";

    case TokenType._class:
      return "class";

    case TokenType._extends:
      return "extends";

    case TokenType._export:
      return "export";

    case TokenType._import:
      return "import";

    case TokenType._yield:
      return "yield";

    case TokenType._null:
      return "null";

    case TokenType._true:
      return "true";

    case TokenType._false:
      return "false";

    case TokenType._in:
      return "in";

    case TokenType._instanceof:
      return "instanceof";

    case TokenType._typeof:
      return "typeof";

    case TokenType._void:
      return "void";

    case TokenType._delete:
      return "delete";

    case TokenType._async:
      return "async";

    case TokenType._get:
      return "get";

    case TokenType._set:
      return "set";

    case TokenType._declare:
      return "declare";

    case TokenType._readonly:
      return "readonly";

    case TokenType._abstract:
      return "abstract";

    case TokenType._static:
      return "static";

    case TokenType._public:
      return "public";

    case TokenType._private:
      return "private";

    case TokenType._protected:
      return "protected";

    case TokenType._override:
      return "override";

    case TokenType._as:
      return "as";

    case TokenType._enum:
      return "enum";

    case TokenType._type:
      return "type";

    case TokenType._implements:
      return "implements";

    default:
      return "";
  }
}