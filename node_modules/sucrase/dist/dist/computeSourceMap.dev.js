"use strict";

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _genmapping = require('@jridgewell/gen-mapping');

var _charcodes = require('./parser/util/charcodes');
/**
 * Generate a source map indicating that each line maps directly to the original line,
 * with the tokens in their new positions.
 */


function computeSourceMap(_ref, filePath, options, source, tokens) {
  var generatedCode = _ref.code,
      rawMappings = _ref.mappings;
  var sourceColumns = computeSourceColumns(source, tokens);
  var map = new (0, _genmapping.GenMapping)({
    file: options.compiledFilename
  });
  var tokenIndex = 0; // currentMapping is the output source index for the current input token being
  // considered.

  var currentMapping = rawMappings[0];

  while (currentMapping === undefined && tokenIndex < rawMappings.length - 1) {
    tokenIndex++;
    currentMapping = rawMappings[tokenIndex];
  }

  var line = 0;
  var lineStart = 0;

  if (currentMapping !== lineStart) {
    _genmapping.maybeAddSegment.call(void 0, map, line, 0, filePath, line, 0);
  }

  for (var i = 0; i < generatedCode.length; i++) {
    if (i === currentMapping) {
      var genColumn = currentMapping - lineStart;
      var sourceColumn = sourceColumns[tokenIndex];

      _genmapping.maybeAddSegment.call(void 0, map, line, genColumn, filePath, line, sourceColumn);

      while ((currentMapping === i || currentMapping === undefined) && tokenIndex < rawMappings.length - 1) {
        tokenIndex++;
        currentMapping = rawMappings[tokenIndex];
      }
    }

    if (generatedCode.charCodeAt(i) === _charcodes.charCodes.lineFeed) {
      line++;
      lineStart = i + 1;

      if (currentMapping !== lineStart) {
        _genmapping.maybeAddSegment.call(void 0, map, line, 0, filePath, line, 0);
      }
    }
  }

  var _genmapping$toEncoded = _genmapping.toEncodedMap.call(void 0, map),
      sourceRoot = _genmapping$toEncoded.sourceRoot,
      sourcesContent = _genmapping$toEncoded.sourcesContent,
      sourceMap = _objectWithoutProperties(_genmapping$toEncoded, ["sourceRoot", "sourcesContent"]);

  return sourceMap;
}

exports["default"] = computeSourceMap;
/**
 * Create an array mapping each token index to the 0-based column of the start
 * position of the token.
 */

function computeSourceColumns(code, tokens) {
  var sourceColumns = new Array(tokens.length);
  var tokenIndex = 0;
  var currentMapping = tokens[tokenIndex].start;
  var lineStart = 0;

  for (var i = 0; i < code.length; i++) {
    if (i === currentMapping) {
      sourceColumns[tokenIndex] = currentMapping - lineStart;
      tokenIndex++;
      currentMapping = tokens[tokenIndex].start;
    }

    if (code.charCodeAt(i) === _charcodes.charCodes.lineFeed) {
      lineStart = i + 1;
    }
  }

  return sourceColumns;
}