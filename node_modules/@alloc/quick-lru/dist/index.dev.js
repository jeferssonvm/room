'use strict';

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var QuickLRU =
/*#__PURE__*/
function () {
  function QuickLRU() {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, QuickLRU);

    if (!(options.maxSize && options.maxSize > 0)) {
      throw new TypeError('`maxSize` must be a number greater than 0');
    }

    if (typeof options.maxAge === 'number' && options.maxAge === 0) {
      throw new TypeError('`maxAge` must be a number greater than 0');
    }

    this.maxSize = options.maxSize;
    this.maxAge = options.maxAge || Infinity;
    this.onEviction = options.onEviction;
    this.cache = new Map();
    this.oldCache = new Map();
    this._size = 0;
  }

  _createClass(QuickLRU, [{
    key: "_emitEvictions",
    value: function _emitEvictions(cache) {
      if (typeof this.onEviction !== 'function') {
        return;
      }

      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = cache[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var _step$value = _slicedToArray(_step.value, 2),
              key = _step$value[0],
              item = _step$value[1];

          this.onEviction(key, item.value);
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator["return"] != null) {
            _iterator["return"]();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }
    }
  }, {
    key: "_deleteIfExpired",
    value: function _deleteIfExpired(key, item) {
      if (typeof item.expiry === 'number' && item.expiry <= Date.now()) {
        if (typeof this.onEviction === 'function') {
          this.onEviction(key, item.value);
        }

        return this["delete"](key);
      }

      return false;
    }
  }, {
    key: "_getOrDeleteIfExpired",
    value: function _getOrDeleteIfExpired(key, item) {
      var deleted = this._deleteIfExpired(key, item);

      if (deleted === false) {
        return item.value;
      }
    }
  }, {
    key: "_getItemValue",
    value: function _getItemValue(key, item) {
      return item.expiry ? this._getOrDeleteIfExpired(key, item) : item.value;
    }
  }, {
    key: "_peek",
    value: function _peek(key, cache) {
      var item = cache.get(key);
      return this._getItemValue(key, item);
    }
  }, {
    key: "_set",
    value: function _set(key, value) {
      this.cache.set(key, value);
      this._size++;

      if (this._size >= this.maxSize) {
        this._size = 0;

        this._emitEvictions(this.oldCache);

        this.oldCache = this.cache;
        this.cache = new Map();
      }
    }
  }, {
    key: "_moveToRecent",
    value: function _moveToRecent(key, item) {
      this.oldCache["delete"](key);

      this._set(key, item);
    }
  }, {
    key: "_entriesAscending",
    value:
    /*#__PURE__*/
    regeneratorRuntime.mark(function _entriesAscending() {
      var _iteratorNormalCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, item, _item, key, value, deleted, _iteratorNormalCompletion3, _didIteratorError3, _iteratorError3, _iterator3, _step3, _item2, _item3, _key, _value, _deleted;

      return regeneratorRuntime.wrap(function _entriesAscending$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _iteratorNormalCompletion2 = true;
              _didIteratorError2 = false;
              _iteratorError2 = undefined;
              _context.prev = 3;
              _iterator2 = this.oldCache[Symbol.iterator]();

            case 5:
              if (_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done) {
                _context.next = 16;
                break;
              }

              item = _step2.value;
              _item = _slicedToArray(item, 2), key = _item[0], value = _item[1];

              if (this.cache.has(key)) {
                _context.next = 13;
                break;
              }

              deleted = this._deleteIfExpired(key, value);

              if (!(deleted === false)) {
                _context.next = 13;
                break;
              }

              _context.next = 13;
              return item;

            case 13:
              _iteratorNormalCompletion2 = true;
              _context.next = 5;
              break;

            case 16:
              _context.next = 22;
              break;

            case 18:
              _context.prev = 18;
              _context.t0 = _context["catch"](3);
              _didIteratorError2 = true;
              _iteratorError2 = _context.t0;

            case 22:
              _context.prev = 22;
              _context.prev = 23;

              if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
                _iterator2["return"]();
              }

            case 25:
              _context.prev = 25;

              if (!_didIteratorError2) {
                _context.next = 28;
                break;
              }

              throw _iteratorError2;

            case 28:
              return _context.finish(25);

            case 29:
              return _context.finish(22);

            case 30:
              _iteratorNormalCompletion3 = true;
              _didIteratorError3 = false;
              _iteratorError3 = undefined;
              _context.prev = 33;
              _iterator3 = this.cache[Symbol.iterator]();

            case 35:
              if (_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done) {
                _context.next = 45;
                break;
              }

              _item2 = _step3.value;
              _item3 = _slicedToArray(_item2, 2), _key = _item3[0], _value = _item3[1];
              _deleted = this._deleteIfExpired(_key, _value);

              if (!(_deleted === false)) {
                _context.next = 42;
                break;
              }

              _context.next = 42;
              return _item2;

            case 42:
              _iteratorNormalCompletion3 = true;
              _context.next = 35;
              break;

            case 45:
              _context.next = 51;
              break;

            case 47:
              _context.prev = 47;
              _context.t1 = _context["catch"](33);
              _didIteratorError3 = true;
              _iteratorError3 = _context.t1;

            case 51:
              _context.prev = 51;
              _context.prev = 52;

              if (!_iteratorNormalCompletion3 && _iterator3["return"] != null) {
                _iterator3["return"]();
              }

            case 54:
              _context.prev = 54;

              if (!_didIteratorError3) {
                _context.next = 57;
                break;
              }

              throw _iteratorError3;

            case 57:
              return _context.finish(54);

            case 58:
              return _context.finish(51);

            case 59:
            case "end":
              return _context.stop();
          }
        }
      }, _entriesAscending, this, [[3, 18, 22, 30], [23,, 25, 29], [33, 47, 51, 59], [52,, 54, 58]]);
    })
  }, {
    key: "get",
    value: function get(key) {
      if (this.cache.has(key)) {
        var item = this.cache.get(key);
        return this._getItemValue(key, item);
      }

      if (this.oldCache.has(key)) {
        var _item4 = this.oldCache.get(key);

        if (this._deleteIfExpired(key, _item4) === false) {
          this._moveToRecent(key, _item4);

          return _item4.value;
        }
      }
    }
  }, {
    key: "set",
    value: function set(key, value) {
      var _ref = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},
          _ref$maxAge = _ref.maxAge,
          maxAge = _ref$maxAge === void 0 ? this.maxAge === Infinity ? undefined : Date.now() + this.maxAge : _ref$maxAge;

      if (this.cache.has(key)) {
        this.cache.set(key, {
          value: value,
          maxAge: maxAge
        });
      } else {
        this._set(key, {
          value: value,
          expiry: maxAge
        });
      }
    }
  }, {
    key: "has",
    value: function has(key) {
      if (this.cache.has(key)) {
        return !this._deleteIfExpired(key, this.cache.get(key));
      }

      if (this.oldCache.has(key)) {
        return !this._deleteIfExpired(key, this.oldCache.get(key));
      }

      return false;
    }
  }, {
    key: "peek",
    value: function peek(key) {
      if (this.cache.has(key)) {
        return this._peek(key, this.cache);
      }

      if (this.oldCache.has(key)) {
        return this._peek(key, this.oldCache);
      }
    }
  }, {
    key: "delete",
    value: function _delete(key) {
      var deleted = this.cache["delete"](key);

      if (deleted) {
        this._size--;
      }

      return this.oldCache["delete"](key) || deleted;
    }
  }, {
    key: "clear",
    value: function clear() {
      this.cache.clear();
      this.oldCache.clear();
      this._size = 0;
    }
  }, {
    key: "resize",
    value: function resize(newSize) {
      if (!(newSize && newSize > 0)) {
        throw new TypeError('`maxSize` must be a number greater than 0');
      }

      var items = _toConsumableArray(this._entriesAscending());

      var removeCount = items.length - newSize;

      if (removeCount < 0) {
        this.cache = new Map(items);
        this.oldCache = new Map();
        this._size = items.length;
      } else {
        if (removeCount > 0) {
          this._emitEvictions(items.slice(0, removeCount));
        }

        this.oldCache = new Map(items.slice(removeCount));
        this.cache = new Map();
        this._size = 0;
      }

      this.maxSize = newSize;
    }
  }, {
    key: "keys",
    value:
    /*#__PURE__*/
    regeneratorRuntime.mark(function keys() {
      var _iteratorNormalCompletion4, _didIteratorError4, _iteratorError4, _iterator4, _step4, _step4$value, key;

      return regeneratorRuntime.wrap(function keys$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              _iteratorNormalCompletion4 = true;
              _didIteratorError4 = false;
              _iteratorError4 = undefined;
              _context2.prev = 3;
              _iterator4 = this[Symbol.iterator]();

            case 5:
              if (_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done) {
                _context2.next = 12;
                break;
              }

              _step4$value = _slicedToArray(_step4.value, 1), key = _step4$value[0];
              _context2.next = 9;
              return key;

            case 9:
              _iteratorNormalCompletion4 = true;
              _context2.next = 5;
              break;

            case 12:
              _context2.next = 18;
              break;

            case 14:
              _context2.prev = 14;
              _context2.t0 = _context2["catch"](3);
              _didIteratorError4 = true;
              _iteratorError4 = _context2.t0;

            case 18:
              _context2.prev = 18;
              _context2.prev = 19;

              if (!_iteratorNormalCompletion4 && _iterator4["return"] != null) {
                _iterator4["return"]();
              }

            case 21:
              _context2.prev = 21;

              if (!_didIteratorError4) {
                _context2.next = 24;
                break;
              }

              throw _iteratorError4;

            case 24:
              return _context2.finish(21);

            case 25:
              return _context2.finish(18);

            case 26:
            case "end":
              return _context2.stop();
          }
        }
      }, keys, this, [[3, 14, 18, 26], [19,, 21, 25]]);
    })
  }, {
    key: "values",
    value:
    /*#__PURE__*/
    regeneratorRuntime.mark(function values() {
      var _iteratorNormalCompletion5, _didIteratorError5, _iteratorError5, _iterator5, _step5, _step5$value, value;

      return regeneratorRuntime.wrap(function values$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              _iteratorNormalCompletion5 = true;
              _didIteratorError5 = false;
              _iteratorError5 = undefined;
              _context3.prev = 3;
              _iterator5 = this[Symbol.iterator]();

            case 5:
              if (_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done) {
                _context3.next = 12;
                break;
              }

              _step5$value = _slicedToArray(_step5.value, 2), value = _step5$value[1];
              _context3.next = 9;
              return value;

            case 9:
              _iteratorNormalCompletion5 = true;
              _context3.next = 5;
              break;

            case 12:
              _context3.next = 18;
              break;

            case 14:
              _context3.prev = 14;
              _context3.t0 = _context3["catch"](3);
              _didIteratorError5 = true;
              _iteratorError5 = _context3.t0;

            case 18:
              _context3.prev = 18;
              _context3.prev = 19;

              if (!_iteratorNormalCompletion5 && _iterator5["return"] != null) {
                _iterator5["return"]();
              }

            case 21:
              _context3.prev = 21;

              if (!_didIteratorError5) {
                _context3.next = 24;
                break;
              }

              throw _iteratorError5;

            case 24:
              return _context3.finish(21);

            case 25:
              return _context3.finish(18);

            case 26:
            case "end":
              return _context3.stop();
          }
        }
      }, values, this, [[3, 14, 18, 26], [19,, 21, 25]]);
    })
  }, {
    key: Symbol.iterator,
    value:
    /*#__PURE__*/
    regeneratorRuntime.mark(function value() {
      var _iteratorNormalCompletion6, _didIteratorError6, _iteratorError6, _iterator6, _step6, item, _item5, key, value, deleted, _iteratorNormalCompletion7, _didIteratorError7, _iteratorError7, _iterator7, _step7, _item6, _item7, _key2, _value2, _deleted2;

      return regeneratorRuntime.wrap(function value$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              _iteratorNormalCompletion6 = true;
              _didIteratorError6 = false;
              _iteratorError6 = undefined;
              _context4.prev = 3;
              _iterator6 = this.cache[Symbol.iterator]();

            case 5:
              if (_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done) {
                _context4.next = 15;
                break;
              }

              item = _step6.value;
              _item5 = _slicedToArray(item, 2), key = _item5[0], value = _item5[1];
              deleted = this._deleteIfExpired(key, value);

              if (!(deleted === false)) {
                _context4.next = 12;
                break;
              }

              _context4.next = 12;
              return [key, value.value];

            case 12:
              _iteratorNormalCompletion6 = true;
              _context4.next = 5;
              break;

            case 15:
              _context4.next = 21;
              break;

            case 17:
              _context4.prev = 17;
              _context4.t0 = _context4["catch"](3);
              _didIteratorError6 = true;
              _iteratorError6 = _context4.t0;

            case 21:
              _context4.prev = 21;
              _context4.prev = 22;

              if (!_iteratorNormalCompletion6 && _iterator6["return"] != null) {
                _iterator6["return"]();
              }

            case 24:
              _context4.prev = 24;

              if (!_didIteratorError6) {
                _context4.next = 27;
                break;
              }

              throw _iteratorError6;

            case 27:
              return _context4.finish(24);

            case 28:
              return _context4.finish(21);

            case 29:
              _iteratorNormalCompletion7 = true;
              _didIteratorError7 = false;
              _iteratorError7 = undefined;
              _context4.prev = 32;
              _iterator7 = this.oldCache[Symbol.iterator]();

            case 34:
              if (_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done) {
                _context4.next = 45;
                break;
              }

              _item6 = _step7.value;
              _item7 = _slicedToArray(_item6, 2), _key2 = _item7[0], _value2 = _item7[1];

              if (this.cache.has(_key2)) {
                _context4.next = 42;
                break;
              }

              _deleted2 = this._deleteIfExpired(_key2, _value2);

              if (!(_deleted2 === false)) {
                _context4.next = 42;
                break;
              }

              _context4.next = 42;
              return [_key2, _value2.value];

            case 42:
              _iteratorNormalCompletion7 = true;
              _context4.next = 34;
              break;

            case 45:
              _context4.next = 51;
              break;

            case 47:
              _context4.prev = 47;
              _context4.t1 = _context4["catch"](32);
              _didIteratorError7 = true;
              _iteratorError7 = _context4.t1;

            case 51:
              _context4.prev = 51;
              _context4.prev = 52;

              if (!_iteratorNormalCompletion7 && _iterator7["return"] != null) {
                _iterator7["return"]();
              }

            case 54:
              _context4.prev = 54;

              if (!_didIteratorError7) {
                _context4.next = 57;
                break;
              }

              throw _iteratorError7;

            case 57:
              return _context4.finish(54);

            case 58:
              return _context4.finish(51);

            case 59:
            case "end":
              return _context4.stop();
          }
        }
      }, value, this, [[3, 17, 21, 29], [22,, 24, 28], [32, 47, 51, 59], [52,, 54, 58]]);
    })
  }, {
    key: "entriesDescending",
    value:
    /*#__PURE__*/
    regeneratorRuntime.mark(function entriesDescending() {
      var items, i, item, _item8, key, value, deleted, _i2, _item9, _item10, _key3, _value3, _deleted3;

      return regeneratorRuntime.wrap(function entriesDescending$(_context5) {
        while (1) {
          switch (_context5.prev = _context5.next) {
            case 0:
              items = _toConsumableArray(this.cache);
              i = items.length - 1;

            case 2:
              if (!(i >= 0)) {
                _context5.next = 12;
                break;
              }

              item = items[i];
              _item8 = _slicedToArray(item, 2), key = _item8[0], value = _item8[1];
              deleted = this._deleteIfExpired(key, value);

              if (!(deleted === false)) {
                _context5.next = 9;
                break;
              }

              _context5.next = 9;
              return [key, value.value];

            case 9:
              --i;
              _context5.next = 2;
              break;

            case 12:
              items = _toConsumableArray(this.oldCache);
              _i2 = items.length - 1;

            case 14:
              if (!(_i2 >= 0)) {
                _context5.next = 25;
                break;
              }

              _item9 = items[_i2];
              _item10 = _slicedToArray(_item9, 2), _key3 = _item10[0], _value3 = _item10[1];

              if (this.cache.has(_key3)) {
                _context5.next = 22;
                break;
              }

              _deleted3 = this._deleteIfExpired(_key3, _value3);

              if (!(_deleted3 === false)) {
                _context5.next = 22;
                break;
              }

              _context5.next = 22;
              return [_key3, _value3.value];

            case 22:
              --_i2;
              _context5.next = 14;
              break;

            case 25:
            case "end":
              return _context5.stop();
          }
        }
      }, entriesDescending, this);
    })
  }, {
    key: "entriesAscending",
    value:
    /*#__PURE__*/
    regeneratorRuntime.mark(function entriesAscending() {
      var _iteratorNormalCompletion8, _didIteratorError8, _iteratorError8, _iterator8, _step8, _step8$value, key, value;

      return regeneratorRuntime.wrap(function entriesAscending$(_context6) {
        while (1) {
          switch (_context6.prev = _context6.next) {
            case 0:
              _iteratorNormalCompletion8 = true;
              _didIteratorError8 = false;
              _iteratorError8 = undefined;
              _context6.prev = 3;
              _iterator8 = this._entriesAscending()[Symbol.iterator]();

            case 5:
              if (_iteratorNormalCompletion8 = (_step8 = _iterator8.next()).done) {
                _context6.next = 12;
                break;
              }

              _step8$value = _slicedToArray(_step8.value, 2), key = _step8$value[0], value = _step8$value[1];
              _context6.next = 9;
              return [key, value.value];

            case 9:
              _iteratorNormalCompletion8 = true;
              _context6.next = 5;
              break;

            case 12:
              _context6.next = 18;
              break;

            case 14:
              _context6.prev = 14;
              _context6.t0 = _context6["catch"](3);
              _didIteratorError8 = true;
              _iteratorError8 = _context6.t0;

            case 18:
              _context6.prev = 18;
              _context6.prev = 19;

              if (!_iteratorNormalCompletion8 && _iterator8["return"] != null) {
                _iterator8["return"]();
              }

            case 21:
              _context6.prev = 21;

              if (!_didIteratorError8) {
                _context6.next = 24;
                break;
              }

              throw _iteratorError8;

            case 24:
              return _context6.finish(21);

            case 25:
              return _context6.finish(18);

            case 26:
            case "end":
              return _context6.stop();
          }
        }
      }, entriesAscending, this, [[3, 14, 18, 26], [19,, 21, 25]]);
    })
  }, {
    key: "size",
    get: function get() {
      if (!this._size) {
        return this.oldCache.size;
      }

      var oldCacheSize = 0;
      var _iteratorNormalCompletion9 = true;
      var _didIteratorError9 = false;
      var _iteratorError9 = undefined;

      try {
        for (var _iterator9 = this.oldCache.keys()[Symbol.iterator](), _step9; !(_iteratorNormalCompletion9 = (_step9 = _iterator9.next()).done); _iteratorNormalCompletion9 = true) {
          var key = _step9.value;

          if (!this.cache.has(key)) {
            oldCacheSize++;
          }
        }
      } catch (err) {
        _didIteratorError9 = true;
        _iteratorError9 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion9 && _iterator9["return"] != null) {
            _iterator9["return"]();
          }
        } finally {
          if (_didIteratorError9) {
            throw _iteratorError9;
          }
        }
      }

      return Math.min(this._size + oldCacheSize, this.maxSize);
    }
  }]);

  return QuickLRU;
}();

module.exports = QuickLRU;