"use strict";

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _wrapNativeSuper(Class) { var _cache = typeof Map === "function" ? new Map() : undefined; _wrapNativeSuper = function _wrapNativeSuper(Class) { if (Class === null || !_isNativeFunction(Class)) return Class; if (typeof Class !== "function") { throw new TypeError("Super expression must either be null or a function"); } if (typeof _cache !== "undefined") { if (_cache.has(Class)) return _cache.get(Class); _cache.set(Class, Wrapper); } function Wrapper() { return _construct(Class, arguments, _getPrototypeOf(this).constructor); } Wrapper.prototype = Object.create(Class.prototype, { constructor: { value: Wrapper, enumerable: false, writable: true, configurable: true } }); return _setPrototypeOf(Wrapper, Class); }; return _wrapNativeSuper(Class); }

function isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _construct(Parent, args, Class) { if (isNativeReflectConstruct()) { _construct = Reflect.construct; } else { _construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) _setPrototypeOf(instance, Class.prototype); return instance; }; } return _construct.apply(null, arguments); }

function _isNativeFunction(fn) { return Function.toString.call(fn).indexOf("[native code]") !== -1; }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var flagSymbol = Symbol('arg flag');

var ArgError =
/*#__PURE__*/
function (_Error) {
  _inherits(ArgError, _Error);

  function ArgError(msg, code) {
    var _this;

    _classCallCheck(this, ArgError);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(ArgError).call(this, msg));
    _this.name = 'ArgError';
    _this.code = code;
    Object.setPrototypeOf(_assertThisInitialized(_this), ArgError.prototype);
    return _this;
  }

  return ArgError;
}(_wrapNativeSuper(Error));

function arg(opts) {
  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
      _ref$argv = _ref.argv,
      argv = _ref$argv === void 0 ? process.argv.slice(2) : _ref$argv,
      _ref$permissive = _ref.permissive,
      permissive = _ref$permissive === void 0 ? false : _ref$permissive,
      _ref$stopAtPositional = _ref.stopAtPositional,
      stopAtPositional = _ref$stopAtPositional === void 0 ? false : _ref$stopAtPositional;

  if (!opts) {
    throw new ArgError('argument specification object is required', 'ARG_CONFIG_NO_SPEC');
  }

  var result = {
    _: []
  };
  var aliases = {};
  var handlers = {};

  for (var _i = 0, _Object$keys = Object.keys(opts); _i < _Object$keys.length; _i++) {
    var key = _Object$keys[_i];

    if (!key) {
      throw new ArgError('argument key cannot be an empty string', 'ARG_CONFIG_EMPTY_KEY');
    }

    if (key[0] !== '-') {
      throw new ArgError("argument key must start with '-' but found: '".concat(key, "'"), 'ARG_CONFIG_NONOPT_KEY');
    }

    if (key.length === 1) {
      throw new ArgError("argument key must have a name; singular '-' keys are not allowed: ".concat(key), 'ARG_CONFIG_NONAME_KEY');
    }

    if (typeof opts[key] === 'string') {
      aliases[key] = opts[key];
      continue;
    }

    var _type = opts[key];
    var _isFlag = false;

    if (Array.isArray(_type) && _type.length === 1 && typeof _type[0] === 'function') {
      (function () {
        var _type2 = _type,
            _type3 = _slicedToArray(_type2, 1),
            fn = _type3[0];

        _type = function _type(value, name) {
          var prev = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
          prev.push(fn(value, name, prev[prev.length - 1]));
          return prev;
        };

        _isFlag = fn === Boolean || fn[flagSymbol] === true;
      })();
    } else if (typeof _type === 'function') {
      _isFlag = _type === Boolean || _type[flagSymbol] === true;
    } else {
      throw new ArgError("type missing or not a function or valid array type: ".concat(key), 'ARG_CONFIG_VAD_TYPE');
    }

    if (key[1] !== '-' && key.length > 2) {
      throw new ArgError("short argument keys (with a single hyphen) must have only one character: ".concat(key), 'ARG_CONFIG_SHORTOPT_TOOLONG');
    }

    handlers[key] = [_type, _isFlag];
  }

  for (var i = 0, len = argv.length; i < len; i++) {
    var wholeArg = argv[i];

    if (stopAtPositional && result._.length > 0) {
      result._ = result._.concat(argv.slice(i));
      break;
    }

    if (wholeArg === '--') {
      result._ = result._.concat(argv.slice(i + 1));
      break;
    }

    if (wholeArg.length > 1 && wholeArg[0] === '-') {
      /* eslint-disable operator-linebreak */
      var separatedArguments = wholeArg[1] === '-' || wholeArg.length === 2 ? [wholeArg] : wholeArg.slice(1).split('').map(function (a) {
        return "-".concat(a);
      });
      /* eslint-enable operator-linebreak */

      for (var j = 0; j < separatedArguments.length; j++) {
        var _arg = separatedArguments[j];

        var _ref2 = _arg[1] === '-' ? _arg.split(/=(.*)/, 2) : [_arg, undefined],
            _ref3 = _slicedToArray(_ref2, 2),
            originalArgName = _ref3[0],
            argStr = _ref3[1];

        var argName = originalArgName;

        while (argName in aliases) {
          argName = aliases[argName];
        }

        if (!(argName in handlers)) {
          if (permissive) {
            result._.push(_arg);

            continue;
          } else {
            throw new ArgError("unknown or unexpected option: ".concat(originalArgName), 'ARG_UNKNOWN_OPTION');
          }
        }

        var _handlers$argName = _slicedToArray(handlers[argName], 2),
            type = _handlers$argName[0],
            isFlag = _handlers$argName[1];

        if (!isFlag && j + 1 < separatedArguments.length) {
          throw new ArgError("option requires argument (but was followed by another short argument): ".concat(originalArgName), 'ARG_MISSING_REQUIRED_SHORTARG');
        }

        if (isFlag) {
          result[argName] = type(true, argName, result[argName]);
        } else if (argStr === undefined) {
          if (argv.length < i + 2 || argv[i + 1].length > 1 && argv[i + 1][0] === '-' && !(argv[i + 1].match(/^-?\d*(\.(?=\d))?\d*$/) && (type === Number || // eslint-disable-next-line no-undef
          typeof BigInt !== 'undefined' && type === BigInt))) {
            var extended = originalArgName === argName ? '' : " (alias for ".concat(argName, ")");
            throw new ArgError("option requires argument: ".concat(originalArgName).concat(extended), 'ARG_MISSING_REQUIRED_LONGARG');
          }

          result[argName] = type(argv[i + 1], argName, result[argName]);
          ++i;
        } else {
          result[argName] = type(argStr, argName, result[argName]);
        }
      }
    } else {
      result._.push(wholeArg);
    }
  }

  return result;
}

arg.flag = function (fn) {
  fn[flagSymbol] = true;
  return fn;
}; // Utility types


arg.COUNT = arg.flag(function (v, name, existingCount) {
  return (existingCount || 0) + 1;
}); // Expose error class

arg.ArgError = ArgError;
module.exports = arg;