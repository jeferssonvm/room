"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
exports.__esModule = true;
exports.help = void 0;
var package_json_1 = require("../../../../package.json");
function help(_a) {
    var message = _a.message, usage = _a.usage, commands = _a.commands, options = _a.options;
    var indent = 2;
    // Render header
    console.log();
    console.log(package_json_1["default"].name + " v" + package_json_1["default"].version);
    // Render message
    if (message) {
        console.log();
        for (var _i = 0, _b = message.split('\n'); _i < _b.length; _i++) {
            var msg = _b[_i];
            console.log(msg);
        }
    }
    // Render usage
    if (usage && usage.length > 0) {
        console.log();
        console.log('Usage:');
        for (var _c = 0, usage_1 = usage; _c < usage_1.length; _c++) {
            var example = usage_1[_c];
            console.log(' '.repeat(indent), example);
        }
    }
    // Render commands
    if (commands && commands.length > 0) {
        console.log();
        console.log('Commands:');
        for (var _d = 0, commands_1 = commands; _d < commands_1.length; _d++) {
            var command = commands_1[_d];
            console.log(' '.repeat(indent), command);
        }
    }
    // Render options
    if (options) {
        var groupedOptions = {};
        for (var _e = 0, _f = Object.entries(options); _e < _f.length; _e++) {
            var _g = _f[_e], key = _g[0], value = _g[1];
            if (typeof value === 'object') {
                groupedOptions[key] = __assign(__assign({}, value), { flags: [key] });
            }
            else {
                groupedOptions[value].flags.push(key);
            }
        }
        console.log();
        console.log('Options:');
        for (var _h = 0, _j = Object.values(groupedOptions); _h < _j.length; _h++) {
            var _k = _j[_h], flags = _k.flags, description = _k.description, deprecated = _k.deprecated;
            if (deprecated)
                continue;
            if (flags.length === 1) {
                console.log(' '.repeat(indent + 4 /* 4 = "-i, ".length */), flags.slice().reverse().join(', ').padEnd(20, ' '), description);
            }
            else {
                console.log(' '.repeat(indent), flags.slice().reverse().join(', ').padEnd(24, ' '), description);
            }
        }
    }
    console.log();
}
exports.help = help;
