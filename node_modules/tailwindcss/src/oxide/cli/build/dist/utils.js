"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
exports.__esModule = true;
exports.outputFile = exports.drainStdin = exports.readFileWithRetries = exports.formatNodes = exports.indentRecursive = void 0;
var fs_1 = require("fs");
var path_1 = require("path");
function indentRecursive(node, indent) {
    if (indent === void 0) { indent = 0; }
    node.each &&
        node.each(function (child, i) {
            if (!child.raws.before || !child.raws.before.trim() || child.raws.before.includes('\n')) {
                child.raws.before = "\n" + (node.type !== 'rule' && i > 0 ? '\n' : '') + '  '.repeat(indent);
            }
            child.raws.after = "\n" + '  '.repeat(indent);
            indentRecursive(child, indent + 1);
        });
}
exports.indentRecursive = indentRecursive;
function formatNodes(root) {
    indentRecursive(root);
    if (root.first) {
        root.first.raws.before = '';
    }
}
exports.formatNodes = formatNodes;
/**
 * When rapidly saving files atomically a couple of situations can happen:
 * - The file is missing since the external program has deleted it by the time we've gotten around to reading it from the earlier save.
 * - The file is being written to by the external program by the time we're going to read it and is thus treated as busy because a lock is held.
 *
 * To work around this we retry reading the file a handful of times with a delay between each attempt
 *
 * @param {string} path
 * @param {number} tries
 * @returns {Promise<string | undefined>}
 * @throws {Error} If the file is still missing or busy after the specified number of tries
 */
function readFileWithRetries(path, tries) {
    if (tries === void 0) { tries = 5; }
    return __awaiter(this, void 0, void 0, function () {
        var n, err_1;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    n = 0;
                    _a.label = 1;
                case 1:
                    if (!(n <= tries)) return [3 /*break*/, 8];
                    _a.label = 2;
                case 2:
                    _a.trys.push([2, 4, , 7]);
                    return [4 /*yield*/, fs_1["default"].promises.readFile(path, 'utf8')];
                case 3: return [2 /*return*/, _a.sent()];
                case 4:
                    err_1 = _a.sent();
                    if (!(n !== tries)) return [3 /*break*/, 6];
                    if (!(err_1.code === 'ENOENT' || err_1.code === 'EBUSY')) return [3 /*break*/, 6];
                    return [4 /*yield*/, new Promise(function (resolve) { return setTimeout(resolve, 10); })];
                case 5:
                    _a.sent();
                    return [3 /*break*/, 7];
                case 6: throw err_1;
                case 7:
                    n++;
                    return [3 /*break*/, 1];
                case 8: return [2 /*return*/];
            }
        });
    });
}
exports.readFileWithRetries = readFileWithRetries;
function drainStdin() {
    return new Promise(function (resolve, reject) {
        var result = '';
        process.stdin.on('data', function (chunk) {
            result += chunk;
        });
        process.stdin.on('end', function () { return resolve(result); });
        process.stdin.on('error', function (err) { return reject(err); });
    });
}
exports.drainStdin = drainStdin;
function outputFile(file, newContents) {
    return __awaiter(this, void 0, void 0, function () {
        var currentContents, _a;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    _b.trys.push([0, 2, , 3]);
                    return [4 /*yield*/, fs_1["default"].promises.readFile(file, 'utf8')];
                case 1:
                    currentContents = _b.sent();
                    if (currentContents === newContents) {
                        return [2 /*return*/]; // Skip writing the file
                    }
                    return [3 /*break*/, 3];
                case 2:
                    _a = _b.sent();
                    return [3 /*break*/, 3];
                case 3: 
                // Write the file
                return [4 /*yield*/, fs_1["default"].promises.mkdir(path_1["default"].dirname(file), { recursive: true })];
                case 4:
                    // Write the file
                    _b.sent();
                    return [4 /*yield*/, fs_1["default"].promises.writeFile(file, newContents, 'utf8')];
                case 5:
                    _b.sent();
                    return [2 /*return*/];
            }
        });
    });
}
exports.outputFile = outputFile;
