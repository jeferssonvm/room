"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
exports.__esModule = true;
exports.createWatcher = void 0;
var chokidar_1 = require("chokidar");
var fs_1 = require("fs");
var micromatch_1 = require("micromatch");
var normalize_path_1 = require("normalize-path");
var path_1 = require("path");
var utils_1 = require("./utils");
/**
 * The core idea of this watcher is:
 * 1. Whenever a file is added, changed, or renamed we queue a rebuild
 * 2. Perform as few rebuilds as possible by batching them together
 * 3. Coalesce events that happen in quick succession to avoid unnecessary rebuilds
 * 4. Ensure another rebuild happens _if_ changed while a rebuild is in progress
 */
/**
 *
 * @param {*} args
 * @param {{ state, rebuild(changedFiles: any[]): Promise<any> }} param1
 * @returns {{
 *   fswatcher: import('chokidar').FSWatcher,
 *   refreshWatchedFiles(): void,
 * }}
 */
function createWatcher(args, _a) {
    var state = _a.state, rebuild = _a.rebuild;
    var shouldPoll = args['--poll'];
    var shouldCoalesceWriteEvents = shouldPoll || process.platform === 'win32';
    // Polling interval in milliseconds
    // Used only when polling or coalescing add/change events on Windows
    var pollInterval = 10;
    var watcher = chokidar_1["default"].watch([], {
        // Force checking for atomic writes in all situations
        // This causes chokidar to wait up to 100ms for a file to re-added after it's been unlinked
        // This only works when watching directories though
        atomic: true,
        usePolling: shouldPoll,
        interval: shouldPoll ? pollInterval : undefined,
        ignoreInitial: true,
        awaitWriteFinish: shouldCoalesceWriteEvents
            ? {
                stabilityThreshold: 50,
                pollInterval: pollInterval
            }
            : false
    });
    // A queue of rebuilds, file reads, etcâ€¦ to run
    var chain = Promise.resolve();
    /**
     * A list of files that have been changed since the last rebuild
     *
     * @type {{file: string, content: () => Promise<string>, extension: string}[]}
     */
    var changedContent = [];
    /**
     * A list of files for which a rebuild has already been queued.
     * This is used to prevent duplicate rebuilds when multiple events are fired for the same file.
     * The rebuilt file is cleared from this list when it's associated rebuild has _started_
     * This is because if the file is changed during a rebuild it won't trigger a new rebuild which it should
     **/
    var pendingRebuilds = new Set();
    var _timer;
    var _reject;
    /**
     * Rebuilds the changed files and resolves when the rebuild is
     * complete regardless of whether it was successful or not
     */
    function rebuildAndContinue() {
        return __awaiter(this, void 0, void 0, function () {
            var changes;
            return __generator(this, function (_a) {
                changes = changedContent.splice(0);
                // There are no changes to rebuild so we can just do nothing
                if (changes.length === 0) {
                    return [2 /*return*/, Promise.resolve()];
                }
                // Clear all pending rebuilds for the about-to-be-built files
                changes.forEach(function (change) { return pendingRebuilds["delete"](change.file); });
                // Resolve the promise even when the rebuild fails
                return [2 /*return*/, rebuild(changes).then(function () { }, function () { })];
            });
        });
    }
    /**
     *
     * @param {*} file
     * @param {(() => Promise<string>) | null} content
     * @param {boolean} skipPendingCheck
     * @returns {Promise<void>}
     */
    function recordChangedFile(file, content, skipPendingCheck) {
        if (content === void 0) { content = null; }
        if (skipPendingCheck === void 0) { skipPendingCheck = false; }
        file = path_1["default"].resolve(file);
        // Applications like Vim/Neovim fire both rename and change events in succession for atomic writes
        // In that case rebuild has already been queued by rename, so can be skipped in change
        if (pendingRebuilds.has(file) && !skipPendingCheck) {
            return Promise.resolve();
        }
        // Mark that a rebuild of this file is going to happen
        // It MUST happen synchronously before the rebuild is queued for this to be effective
        pendingRebuilds.add(file);
        changedContent.push({
            file: file,
            content: content !== null && content !== void 0 ? content : (function () { return fs_1["default"].promises.readFile(file, 'utf8'); }),
            extension: path_1["default"].extname(file).slice(1)
        });
        if (_timer) {
            clearTimeout(_timer);
            _reject();
        }
        // If a rebuild is already in progress we don't want to start another one until the 10ms timer has expired
        chain = chain.then(function () {
            return new Promise(function (resolve, reject) {
                _timer = setTimeout(resolve, 10);
                _reject = reject;
            });
        });
        // Resolves once this file has been rebuilt (or the rebuild for this file has failed)
        // This queues as many rebuilds as there are changed files
        // But those rebuilds happen after some delay
        // And will immediately resolve if there are no changes
        chain = chain.then(rebuildAndContinue, rebuildAndContinue);
        return chain;
    }
    watcher.on('change', function (file) { return recordChangedFile(file); });
    watcher.on('add', function (file) { return recordChangedFile(file); });
    // Restore watching any files that are "removed"
    // This can happen when a file is pseudo-atomically replaced (a copy is created, overwritten, the old one is unlinked, and the new one is renamed)
    // TODO: An an optimization we should allow removal when the config changes
    watcher.on('unlink', function (file) {
        file = normalize_path_1["default"](file);
        // Only re-add the file if it's not covered by a dynamic pattern
        if (!micromatch_1["default"].some([file], state.contentPatterns.dynamic)) {
            watcher.add(file);
        }
    });
    // Some applications such as Visual Studio (but not VS Code)
    // will only fire a rename event for atomic writes and not a change event
    // This is very likely a chokidar bug but it's one we need to work around
    // We treat this as a change event and rebuild the CSS
    watcher.on('raw', function (evt, filePath, meta) {
        if (evt !== 'rename') {
            return;
        }
        var watchedPath = meta.watchedPath;
        // Watched path might be the file itself
        // Or the directory it is in
        filePath = watchedPath.endsWith(filePath) ? watchedPath : path_1["default"].join(watchedPath, filePath);
        // Skip this event since the files it is for does not match any of the registered content globs
        if (!micromatch_1["default"].some([filePath], state.contentPatterns.all)) {
            return;
        }
        // Skip since we've already queued a rebuild for this file that hasn't happened yet
        if (pendingRebuilds.has(filePath)) {
            return;
        }
        // We'll go ahead and add the file to the pending rebuilds list here
        // It'll be removed when the rebuild starts unless the read fails
        // which will be taken care of as well
        pendingRebuilds.add(filePath);
        function enqueue() {
            return __awaiter(this, void 0, void 0, function () {
                var content_1, _a;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            _b.trys.push([0, 3, , 4]);
                            return [4 /*yield*/, utils_1.readFileWithRetries(path_1["default"].resolve(filePath))];
                        case 1:
                            content_1 = _b.sent();
                            if (content_1 === undefined) {
                                return [2 /*return*/];
                            }
                            // This will push the rebuild onto the chain
                            // We MUST skip the rebuild check here otherwise the rebuild will never happen on Linux
                            // This is because the order of events and timing is different on Linux
                            // @ts-ignore: TypeScript isn't picking up that content is a string here
                            return [4 /*yield*/, recordChangedFile(filePath, function () { return content_1; }, true)];
                        case 2:
                            // This will push the rebuild onto the chain
                            // We MUST skip the rebuild check here otherwise the rebuild will never happen on Linux
                            // This is because the order of events and timing is different on Linux
                            // @ts-ignore: TypeScript isn't picking up that content is a string here
                            _b.sent();
                            return [3 /*break*/, 4];
                        case 3:
                            _a = _b.sent();
                            return [3 /*break*/, 4];
                        case 4: return [2 /*return*/];
                    }
                });
            });
        }
        enqueue().then(function () {
            // If the file read fails we still need to make sure the file isn't stuck in the pending rebuilds list
            pendingRebuilds["delete"](filePath);
        });
    });
    return {
        fswatcher: watcher,
        refreshWatchedFiles: function () {
            watcher.add(Array.from(state.contextDependencies));
            watcher.add(Array.from(state.configBag.dependencies));
            watcher.add(state.contentPatterns.all);
        }
    };
}
exports.createWatcher = createWatcher;
