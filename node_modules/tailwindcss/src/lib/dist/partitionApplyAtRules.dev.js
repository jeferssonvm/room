"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = expandApplyAtRules;

function partitionRules(root) {
  if (!root.walkAtRules) return;
  var applyParents = new Set();
  root.walkAtRules('apply', function (rule) {
    applyParents.add(rule.parent);
  });

  if (applyParents.size === 0) {
    return;
  }

  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = applyParents[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var rule = _step.value;
      var nodeGroups = [];
      var lastGroup = [];
      var _iteratorNormalCompletion2 = true;
      var _didIteratorError2 = false;
      var _iteratorError2 = undefined;

      try {
        for (var _iterator2 = rule.nodes[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
          var node = _step2.value;

          if (node.type === 'atrule' && node.name === 'apply') {
            if (lastGroup.length > 0) {
              nodeGroups.push(lastGroup);
              lastGroup = [];
            }

            nodeGroups.push([node]);
          } else {
            lastGroup.push(node);
          }
        }
      } catch (err) {
        _didIteratorError2 = true;
        _iteratorError2 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
            _iterator2["return"]();
          }
        } finally {
          if (_didIteratorError2) {
            throw _iteratorError2;
          }
        }
      }

      if (lastGroup.length > 0) {
        nodeGroups.push(lastGroup);
      }

      if (nodeGroups.length === 1) {
        continue;
      }

      var _iteratorNormalCompletion3 = true;
      var _didIteratorError3 = false;
      var _iteratorError3 = undefined;

      try {
        for (var _iterator3 = [].concat(nodeGroups).reverse()[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
          var group = _step3.value;
          var clone = rule.clone({
            nodes: []
          });
          clone.append(group);
          rule.after(clone);
        }
      } catch (err) {
        _didIteratorError3 = true;
        _iteratorError3 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion3 && _iterator3["return"] != null) {
            _iterator3["return"]();
          }
        } finally {
          if (_didIteratorError3) {
            throw _iteratorError3;
          }
        }
      }

      rule.remove();
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator["return"] != null) {
        _iterator["return"]();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }
}

function expandApplyAtRules() {
  return function (root) {
    partitionRules(root);
  };
}