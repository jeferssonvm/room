"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.resolveDebug = resolveDebug;
exports.NONE = exports.NOT_ON_DEMAND = exports.sourceHashMap = exports.contextSourcesMap = exports.configContextMap = exports.contextMap = exports.env = void 0;

var _package = _interopRequireDefault(require("../../package.json"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

var env = typeof process !== 'undefined' ? {
  NODE_ENV: process.env.NODE_ENV,
  DEBUG: resolveDebug(process.env.DEBUG),
  ENGINE: _package["default"].tailwindcss.engine
} : {
  NODE_ENV: 'production',
  DEBUG: false,
  ENGINE: _package["default"].tailwindcss.engine
};
exports.env = env;
var contextMap = new Map();
exports.contextMap = contextMap;
var configContextMap = new Map();
exports.configContextMap = configContextMap;
var contextSourcesMap = new Map();
exports.contextSourcesMap = contextSourcesMap;
var sourceHashMap = new Map();
exports.sourceHashMap = sourceHashMap;
var NOT_ON_DEMAND = new String('*');
exports.NOT_ON_DEMAND = NOT_ON_DEMAND;
var NONE = Symbol('__NONE__');
exports.NONE = NONE;

function resolveDebug(debug) {
  if (debug === undefined) {
    return false;
  } // Environment variables are strings, so convert to boolean


  if (debug === 'true' || debug === '1') {
    return true;
  }

  if (debug === 'false' || debug === '0') {
    return false;
  } // Keep the debug convention into account:
  // DEBUG=* -> This enables all debug modes
  // DEBUG=projectA,projectB,projectC -> This enables debug for projectA, projectB and projectC
  // DEBUG=projectA:* -> This enables all debug modes for projectA (if you have sub-types)
  // DEBUG=projectA,-projectB -> This enables debug for projectA and explicitly disables it for projectB


  if (debug === '*') {
    return true;
  }

  var debuggers = debug.split(',').map(function (d) {
    return d.split(':')[0];
  }); // Ignoring tailwindcss

  if (debuggers.includes('-tailwindcss')) {
    return false;
  } // Including tailwindcss


  if (debuggers.includes('tailwindcss')) {
    return true;
  }

  return false;
}