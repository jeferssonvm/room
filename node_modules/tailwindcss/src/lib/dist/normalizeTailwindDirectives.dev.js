"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = normalizeTailwindDirectives;

var _log = _interopRequireDefault(require("../util/log"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function normalizeTailwindDirectives(root) {
  var tailwindDirectives = new Set();
  var layerDirectives = new Set();
  var applyDirectives = new Set();
  root.walkAtRules(function (atRule) {
    if (atRule.name === 'apply') {
      applyDirectives.add(atRule);
    }

    if (atRule.name === 'import') {
      if (atRule.params === '"tailwindcss/base"' || atRule.params === "'tailwindcss/base'") {
        atRule.name = 'tailwind';
        atRule.params = 'base';
      } else if (atRule.params === '"tailwindcss/components"' || atRule.params === "'tailwindcss/components'") {
        atRule.name = 'tailwind';
        atRule.params = 'components';
      } else if (atRule.params === '"tailwindcss/utilities"' || atRule.params === "'tailwindcss/utilities'") {
        atRule.name = 'tailwind';
        atRule.params = 'utilities';
      } else if (atRule.params === '"tailwindcss/screens"' || atRule.params === "'tailwindcss/screens'" || atRule.params === '"tailwindcss/variants"' || atRule.params === "'tailwindcss/variants'") {
        atRule.name = 'tailwind';
        atRule.params = 'variants';
      }
    }

    if (atRule.name === 'tailwind') {
      if (atRule.params === 'screens') {
        atRule.params = 'variants';
      }

      tailwindDirectives.add(atRule.params);
    }

    if (['layer', 'responsive', 'variants'].includes(atRule.name)) {
      if (['responsive', 'variants'].includes(atRule.name)) {
        _log["default"].warn("".concat(atRule.name, "-at-rule-deprecated"), ["The `@".concat(atRule.name, "` directive has been deprecated in Tailwind CSS v3.0."), "Use `@layer utilities` or `@layer components` instead.", 'https://tailwindcss.com/docs/upgrade-guide#replace-variants-with-layer']);
      }

      layerDirectives.add(atRule);
    }
  });

  if (!tailwindDirectives.has('base') || !tailwindDirectives.has('components') || !tailwindDirectives.has('utilities')) {
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = layerDirectives[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        var rule = _step.value;

        if (rule.name === 'layer' && ['base', 'components', 'utilities'].includes(rule.params)) {
          if (!tailwindDirectives.has(rule.params)) {
            throw rule.error("`@layer ".concat(rule.params, "` is used but no matching `@tailwind ").concat(rule.params, "` directive is present."));
          }
        } else if (rule.name === 'responsive') {
          if (!tailwindDirectives.has('utilities')) {
            throw rule.error('`@responsive` is used but `@tailwind utilities` is missing.');
          }
        } else if (rule.name === 'variants') {
          if (!tailwindDirectives.has('utilities')) {
            throw rule.error('`@variants` is used but `@tailwind utilities` is missing.');
          }
        }
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator["return"] != null) {
          _iterator["return"]();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }
  }

  return {
    tailwindDirectives: tailwindDirectives,
    applyDirectives: applyDirectives
  };
}