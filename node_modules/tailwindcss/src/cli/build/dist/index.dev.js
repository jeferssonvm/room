"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.build = build;

var _fs = _interopRequireDefault(require("fs"));

var _path = _interopRequireDefault(require("path"));

var _resolveConfigPath = require("../../util/resolveConfigPath.js");

var _plugin = require("./plugin.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

// @ts-check
function build(args) {
  var input, shouldWatch, configPath, processor;
  return regeneratorRuntime.async(function build$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          input = args['--input'];
          shouldWatch = args['--watch']; // TODO: Deprecate this in future versions

          if (!input && args['_'][1]) {
            console.error('[deprecation] Running tailwindcss without -i, please provide an input file.');
            input = args['--input'] = args['_'][1];
          }

          if (input && input !== '-' && !_fs["default"].existsSync(input = _path["default"].resolve(input))) {
            console.error("Specified input file ".concat(args['--input'], " does not exist."));
            process.exit(9);
          }

          if (args['--config'] && !_fs["default"].existsSync(args['--config'] = _path["default"].resolve(args['--config']))) {
            console.error("Specified config file ".concat(args['--config'], " does not exist."));
            process.exit(9);
          } // TODO: Reference the @config path here if exists


          configPath = args['--config'] ? args['--config'] : (0, _resolveConfigPath.resolveDefaultConfigPath)();
          _context.next = 8;
          return regeneratorRuntime.awrap((0, _plugin.createProcessor)(args, configPath));

        case 8:
          processor = _context.sent;

          if (!shouldWatch) {
            _context.next = 16;
            break;
          }

          // Abort the watcher if stdin is closed to avoid zombie processes
          // You can disable this behavior with --watch=always
          if (args['--watch'] !== 'always') {
            process.stdin.on('end', function () {
              return process.exit(0);
            });
          }

          process.stdin.resume();
          _context.next = 14;
          return regeneratorRuntime.awrap(processor.watch());

        case 14:
          _context.next = 18;
          break;

        case 16:
          _context.next = 18;
          return regeneratorRuntime.awrap(processor.build()["catch"](function (e) {
            console.error(e);
            process.exit(1);
          }));

        case 18:
        case "end":
          return _context.stop();
      }
    }
  });
}