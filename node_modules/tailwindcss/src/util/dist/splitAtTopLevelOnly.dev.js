"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.splitAtTopLevelOnly = splitAtTopLevelOnly;

/**
 * This splits a string on a top-level character.
 *
 * Regex doesn't support recursion (at least not the JS-flavored version).
 * So we have to use a tiny state machine to keep track of paren placement.
 *
 * Expected behavior using commas:
 * var(--a, 0 0 1px rgb(0, 0, 0)), 0 0 1px rgb(0, 0, 0)
 *       ─┬─             ┬  ┬    ┬
 *        x              x  x    ╰──────── Split because top-level
 *        ╰──────────────┴──┴───────────── Ignored b/c inside >= 1 levels of parens
 *
 * @param {string} input
 * @param {string} separator
 */
function splitAtTopLevelOnly(input, separator) {
  var stack = [];
  var parts = [];
  var lastPos = 0;
  var isEscaped = false;

  for (var idx = 0; idx < input.length; idx++) {
    var _char = input[idx];

    if (stack.length === 0 && _char === separator[0] && !isEscaped) {
      if (separator.length === 1 || input.slice(idx, idx + separator.length) === separator) {
        parts.push(input.slice(lastPos, idx));
        lastPos = idx + separator.length;
      }
    }

    if (isEscaped) {
      isEscaped = false;
    } else if (_char === '\\') {
      isEscaped = true;
    }

    if (_char === '(' || _char === '[' || _char === '{') {
      stack.push(_char);
    } else if (_char === ')' && stack[stack.length - 1] === '(' || _char === ']' && stack[stack.length - 1] === '[' || _char === '}' && stack[stack.length - 1] === '{') {
      stack.pop();
    }
  }

  parts.push(input.slice(lastPos));
  return parts;
}