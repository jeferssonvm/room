"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = resolveConfigPath;
exports.resolveDefaultConfigPath = resolveDefaultConfigPath;

var _fs = _interopRequireDefault(require("fs"));

var _path = _interopRequireDefault(require("path"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var defaultConfigFiles = ['./tailwind.config.js', './tailwind.config.cjs', './tailwind.config.mjs', './tailwind.config.ts'];

function isObject(value) {
  return _typeof(value) === 'object' && value !== null;
}

function isEmpty(obj) {
  return Object.keys(obj).length === 0;
}

function isString(value) {
  return typeof value === 'string' || value instanceof String;
}

function resolveConfigPath(pathOrConfig) {
  // require('tailwindcss')({ theme: ..., variants: ... })
  if (isObject(pathOrConfig) && pathOrConfig.config === undefined && !isEmpty(pathOrConfig)) {
    return null;
  } // require('tailwindcss')({ config: 'custom-config.js' })


  if (isObject(pathOrConfig) && pathOrConfig.config !== undefined && isString(pathOrConfig.config)) {
    return _path["default"].resolve(pathOrConfig.config);
  } // require('tailwindcss')({ config: { theme: ..., variants: ... } })


  if (isObject(pathOrConfig) && pathOrConfig.config !== undefined && isObject(pathOrConfig.config)) {
    return null;
  } // require('tailwindcss')('custom-config.js')


  if (isString(pathOrConfig)) {
    return _path["default"].resolve(pathOrConfig);
  } // require('tailwindcss')


  return resolveDefaultConfigPath();
}

function resolveDefaultConfigPath() {
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = defaultConfigFiles[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var configFile = _step.value;

      try {
        var configPath = _path["default"].resolve(configFile);

        _fs["default"].accessSync(configPath);

        return configPath;
      } catch (err) {}
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator["return"] != null) {
        _iterator["return"]();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  return null;
}