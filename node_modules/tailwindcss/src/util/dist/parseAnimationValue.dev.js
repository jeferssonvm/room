"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = parseAnimationValue;
var DIRECTIONS = new Set(['normal', 'reverse', 'alternate', 'alternate-reverse']);
var PLAY_STATES = new Set(['running', 'paused']);
var FILL_MODES = new Set(['none', 'forwards', 'backwards', 'both']);
var ITERATION_COUNTS = new Set(['infinite']);
var TIMINGS = new Set(['linear', 'ease', 'ease-in', 'ease-out', 'ease-in-out', 'step-start', 'step-end']);
var TIMING_FNS = ['cubic-bezier', 'steps'];
var COMMA = /\,(?![^(]*\))/g; // Comma separator that is not located between brackets. E.g.: `cubiz-bezier(a, b, c)` these don't count.

var SPACE = /\ +(?![^(]*\))/g; // Similar to the one above, but with spaces instead.

var TIME = /^(-?[\d.]+m?s)$/;
var DIGIT = /^(\d+)$/;

function parseAnimationValue(input) {
  var animations = input.split(COMMA);
  return animations.map(function (animation) {
    var value = animation.trim();
    var result = {
      value: value
    };
    var parts = value.split(SPACE);
    var seen = new Set();
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      var _loop = function _loop() {
        var part = _step.value;

        if (!seen.has('DIRECTIONS') && DIRECTIONS.has(part)) {
          result.direction = part;
          seen.add('DIRECTIONS');
        } else if (!seen.has('PLAY_STATES') && PLAY_STATES.has(part)) {
          result.playState = part;
          seen.add('PLAY_STATES');
        } else if (!seen.has('FILL_MODES') && FILL_MODES.has(part)) {
          result.fillMode = part;
          seen.add('FILL_MODES');
        } else if (!seen.has('ITERATION_COUNTS') && (ITERATION_COUNTS.has(part) || DIGIT.test(part))) {
          result.iterationCount = part;
          seen.add('ITERATION_COUNTS');
        } else if (!seen.has('TIMING_FUNCTION') && TIMINGS.has(part)) {
          result.timingFunction = part;
          seen.add('TIMING_FUNCTION');
        } else if (!seen.has('TIMING_FUNCTION') && TIMING_FNS.some(function (f) {
          return part.startsWith("".concat(f, "("));
        })) {
          result.timingFunction = part;
          seen.add('TIMING_FUNCTION');
        } else if (!seen.has('DURATION') && TIME.test(part)) {
          result.duration = part;
          seen.add('DURATION');
        } else if (!seen.has('DELAY') && TIME.test(part)) {
          result.delay = part;
          seen.add('DELAY');
        } else if (!seen.has('NAME')) {
          result.name = part;
          seen.add('NAME');
        } else {
          if (!result.unknown) result.unknown = [];
          result.unknown.push(part);
        }
      };

      for (var _iterator = parts[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        _loop();
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator["return"] != null) {
          _iterator["return"]();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }

    return result;
  });
}