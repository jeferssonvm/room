"use strict";

var _prettier = _interopRequireDefault(require("prettier"));

var _corePlugins = require("../src/corePlugins");

var _colors = _interopRequireDefault(require("../src/public/colors"));

var _defaultTheme = _interopRequireDefault(require("../src/public/default-theme"));

var _fs = _interopRequireDefault(require("fs"));

var _path = _interopRequireDefault(require("path"));

var types = _interopRequireWildcard(require("./type-utils"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

_fs["default"].writeFileSync(_path["default"].join(process.cwd(), 'types', 'generated', 'corePluginList.d.ts'), "export type CorePluginList = ".concat(Object.keys(_corePlugins.corePlugins).map(function (p) {
  return "'".concat(p, "'");
}).join(' | ')));

var colorsWithoutDeprecatedColors = Object.fromEntries(Object.entries(Object.getOwnPropertyDescriptors(_colors["default"])).filter(function (_ref) {
  var _ref2 = _slicedToArray(_ref, 2),
      _ = _ref2[0],
      value = _ref2[1].value;

  return typeof value !== 'undefined';
}).map(function (_ref3) {
  var _ref4 = _slicedToArray(_ref3, 2),
      name = _ref4[0],
      definition = _ref4[1];

  return [name, definition.value];
}));
var deprecatedColors = Object.entries(Object.getOwnPropertyDescriptors(_colors["default"])).filter(function (_ref5) {
  var _ref6 = _slicedToArray(_ref5, 2),
      _ = _ref6[0],
      value = _ref6[1].value;

  return typeof value === 'undefined';
}).map(function (_ref7) {
  var _ref8 = _slicedToArray(_ref7, 2),
      name = _ref8[0],
      definition = _ref8[1];

  var warn = console.warn;
  var messages = [];

  console.warn = function () {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return messages.push(args.pop());
  };

  definition.get();
  console.warn = warn;
  var message = messages.join(' ').trim();
  var newColor = message.match(/renamed to `(.*)`/)[1];
  return "/** @deprecated ".concat(message, " */").concat(name, ": DefaultColors['").concat(newColor, "'],");
}).join('\n');

_fs["default"].writeFileSync(_path["default"].join(process.cwd(), 'types', 'generated', 'colors.d.ts'), _prettier["default"].format("export interface DefaultColors { ".concat(JSON.stringify(colorsWithoutDeprecatedColors).slice(1, -1), "\n").concat(deprecatedColors, "\n}"), {
  semi: false,
  singleQuote: true,
  printWidth: 100,
  parser: 'typescript'
}));

var defaultThemeTypes = Object.entries(_defaultTheme["default"]).map(function (_ref9) {
  var _ref10 = _slicedToArray(_ref9, 2),
      name = _ref10[0],
      value = _ref10[1];

  // Special cases for slightly more accurate types
  if (name === 'keyframes') {
    return [name, "Record<".concat(types.forKeys(value), ", Record<string, CSSDeclarationList>>")];
  }

  if (name === 'fontSize') {
    return [name, "Record<".concat(types.forKeys(value), ", [string, { lineHeight: string }]>")];
  } // General cases


  if (typeof value === 'string') {
    return [name, "string"];
  }

  if (typeof value === 'function') {
    return [name, null];
  }

  if (_typeof(value) === 'object') {
    if (Object.keys(value).length === 0) {
      return [name, null];
    }

    return [name, types.forValue(value)];
  }

  return [name, "unknown"];
}).filter(function (_ref11) {
  var _ref12 = _slicedToArray(_ref11, 2),
      type = _ref12[1];

  return type !== null;
}).map(function (_ref13) {
  var _ref14 = _slicedToArray(_ref13, 2),
      name = _ref14[0],
      type = _ref14[1];

  return "".concat(name, ": ").concat(type);
}).join('\n');

_fs["default"].writeFileSync(_path["default"].join(process.cwd(), 'types', 'generated', 'default-theme.d.ts'), _prettier["default"].format("\n    import { Config } from '../../types'\n    type CSSDeclarationList = Record<string, string>\n    export type DefaultTheme = Config['theme'] & { ".concat(defaultThemeTypes, " }\n  "), {
  semi: false,
  singleQuote: true,
  printWidth: 100,
  parser: 'typescript'
}));