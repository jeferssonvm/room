"use strict";

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var fs = require('fs');

var path = require('path');

var engines = {
  stable: {
    files: [path.resolve(__dirname, '..', 'package.stable.json'), path.resolve(__dirname, '..', 'package-lock.stable.json')]
  },
  oxide: {
    files: [path.resolve(__dirname, '..', 'package.oxide.json'), path.resolve(__dirname, '..', 'package-lock.oxide.json')]
  }
}; // Find out what the current engine is that we are using:

var _Object$entries$find = Object.entries(engines).find(function (_ref) {
  var _ref2 = _slicedToArray(_ref, 2),
      info = _ref2[1];

  return info.files.every(function (file) {
    return fs.existsSync(file);
  });
}),
    _Object$entries$find2 = _slicedToArray(_Object$entries$find, 2),
    otherEngine = _Object$entries$find2[0],
    info = _Object$entries$find2[1];

var currentEngine = otherEngine === 'oxide' ? 'stable' : 'oxide';
console.log("Current engine: `".concat(currentEngine, "`, swapping to `").concat(otherEngine, "`")); // Swap the engines

var _iteratorNormalCompletion = true;
var _didIteratorError = false;
var _iteratorError = undefined;

try {
  for (var _iterator = info.files[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
    var file = _step.value;
    fs.renameSync(file.replace(".".concat(otherEngine), ''), file.replace(".".concat(otherEngine), ".".concat(currentEngine)));
  }
} catch (err) {
  _didIteratorError = true;
  _iteratorError = err;
} finally {
  try {
    if (!_iteratorNormalCompletion && _iterator["return"] != null) {
      _iterator["return"]();
    }
  } finally {
    if (_didIteratorError) {
      throw _iteratorError;
    }
  }
}

var _iteratorNormalCompletion2 = true;
var _didIteratorError2 = false;
var _iteratorError2 = undefined;

try {
  for (var _iterator2 = engines[otherEngine].files[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
    var _file = _step2.value;
    fs.renameSync(_file, _file.replace(".".concat(otherEngine), ''));
  }
} catch (err) {
  _didIteratorError2 = true;
  _iteratorError2 = err;
} finally {
  try {
    if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
      _iterator2["return"]();
    }
  } finally {
    if (_didIteratorError2) {
      throw _iteratorError2;
    }
  }
}

console.log('Engines have been swapped. Make sure to run `npm install` to update your dependencies.');