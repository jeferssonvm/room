"use strict";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

Object.defineProperty(exports, "__esModule", {
  value: true
});

function _export(target, all) {
  for (var name in all) {
    Object.defineProperty(target, name, {
      enumerable: true,
      get: all[name]
    });
  }
}

_export(exports, {
  withAlphaValue: function withAlphaValue() {
    return _withAlphaValue;
  },
  "default": function _default() {
    return withAlphaVariable;
  }
});

var _color = require("./color");

function _withAlphaValue(color, alphaValue, defaultValue) {
  if (typeof color === "function") {
    return color({
      opacityValue: alphaValue
    });
  }

  var parsed = (0, _color.parseColor)(color, {
    loose: true
  });

  if (parsed === null) {
    return defaultValue;
  }

  return (0, _color.formatColor)(_objectSpread({}, parsed, {
    alpha: alphaValue
  }));
}

function withAlphaVariable(_ref) {
  var color = _ref.color,
      property = _ref.property,
      variable = _ref.variable;
  var properties = [].concat(property);

  if (typeof color === "function") {
    return _objectSpread(_defineProperty({}, variable, "1"), Object.fromEntries(properties.map(function (p) {
      return [p, color({
        opacityVariable: variable,
        opacityValue: "var(".concat(variable, ")")
      })];
    })));
  }

  var parsed = (0, _color.parseColor)(color);

  if (parsed === null) {
    return Object.fromEntries(properties.map(function (p) {
      return [p, color];
    }));
  }

  if (parsed.alpha !== undefined) {
    // Has an alpha value, return color as-is
    return Object.fromEntries(properties.map(function (p) {
      return [p, color];
    }));
  }

  return _objectSpread(_defineProperty({}, variable, "1"), Object.fromEntries(properties.map(function (p) {
    return [p, (0, _color.formatColor)(_objectSpread({}, parsed, {
      alpha: "var(".concat(variable, ")")
    }))];
  })));
}