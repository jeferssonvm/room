"use strict";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function get() {
    return cloneNodes;
  }
});

function cloneNodes(nodes) {
  var source = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;
  var raws = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : undefined;
  return nodes.map(function (node) {
    var _node_raws_tailwind;

    var cloned = node.clone(); // We always want override the source map
    // except when explicitly told not to

    var shouldOverwriteSource = ((_node_raws_tailwind = node.raws.tailwind) === null || _node_raws_tailwind === void 0 ? void 0 : _node_raws_tailwind.preserveSource) !== true || !cloned.source;

    if (source !== undefined && shouldOverwriteSource) {
      cloned.source = source;

      if ("walk" in cloned) {
        cloned.walk(function (child) {
          child.source = source;
        });
      }
    }

    if (raws !== undefined) {
      cloned.raws.tailwind = _objectSpread({}, cloned.raws.tailwind, {}, raws);
    }

    return cloned;
  });
}