"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function get() {
    return negateValue;
  }
});

function negateValue(value) {
  value = "".concat(value);

  if (value === "0") {
    return "0";
  } // Flip sign of numbers


  if (/^[+-]?(\d+|\d*\.\d+)(e[+-]?\d+)?(%|\w+)?$/.test(value)) {
    return value.replace(/^[+-]?/, function (sign) {
      return sign === "-" ? "" : "-";
    });
  } // What functions we support negating numeric values for
  // var() isn't inherently a numeric function but we support it anyway
  // The trigonometric functions are omitted because you'll need to use calc(â€¦) with them _anyway_
  // to produce generally useful results and that will be covered already


  var numericFunctions = ["var", "calc", "min", "max", "clamp"];

  for (var _i = 0, _numericFunctions = numericFunctions; _i < _numericFunctions.length; _i++) {
    var fn = _numericFunctions[_i];

    if (value.includes("".concat(fn, "("))) {
      return "calc(".concat(value, " * -1)");
    }
  }
}