"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "normalizeConfig", {
  enumerable: true,
  get: function get() {
    return normalizeConfig;
  }
});

var _featureFlags = require("../featureFlags");

var _log =
/*#__PURE__*/
_interop_require_wildcard(require("./log"));

function _getRequireWildcardCache(nodeInterop) {
  if (typeof WeakMap !== "function") return null;
  var cacheBabelInterop = new WeakMap();
  var cacheNodeInterop = new WeakMap();
  return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {
    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
  })(nodeInterop);
}

function _interop_require_wildcard(obj, nodeInterop) {
  if (!nodeInterop && obj && obj.__esModule) {
    return obj;
  }

  if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") {
    return {
      "default": obj
    };
  }

  var cache = _getRequireWildcardCache(nodeInterop);

  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }

  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

  for (var key in obj) {
    if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }

  newObj["default"] = obj;

  if (cache) {
    cache.set(obj, newObj);
  }

  return newObj;
}

function normalizeConfig(config) {
  // Quick structure validation

  /**
  * type FilePath = string
  * type RawFile = { raw: string, extension?: string }
  * type ExtractorFn = (content: string) => Array<string>
  * type TransformerFn = (content: string) => string
  *
  * type Content =
  *   | Array<FilePath | RawFile>
  *   | {
  *       files: Array<FilePath | RawFile>,
  *       extract?: ExtractorFn | { [extension: string]: ExtractorFn }
  *       transform?: TransformerFn | { [extension: string]: TransformerFn }
  *   }
  */
  var valid = function () {
    // `config.purge` should not exist anymore
    if (config.purge) {
      return false;
    } // `config.content` should exist


    if (!config.content) {
      return false;
    } // `config.content` should be an object or an array


    if (!Array.isArray(config.content) && !(_typeof(config.content) === "object" && config.content !== null)) {
      return false;
    } // When `config.content` is an array, it should consist of FilePaths or RawFiles


    if (Array.isArray(config.content)) {
      return config.content.every(function (path) {
        // `path` can be a string
        if (typeof path === "string") return true; // `path` can be an object { raw: string, extension?: string }
        // `raw` must be a string

        if (typeof (path === null || path === void 0 ? void 0 : path.raw) !== "string") return false; // `extension` (if provided) should also be a string

        if ((path === null || path === void 0 ? void 0 : path.extension) && typeof (path === null || path === void 0 ? void 0 : path.extension) !== "string") {
          return false;
        }

        return true;
      });
    } // When `config.content` is an object


    if (_typeof(config.content) === "object" && config.content !== null) {
      // Only `files`, `relative`, `extract`, and `transform` can exist in `config.content`
      if (Object.keys(config.content).some(function (key) {
        return !["files", "relative", "extract", "transform"].includes(key);
      })) {
        return false;
      } // `config.content.files` should exist of FilePaths or RawFiles


      if (Array.isArray(config.content.files)) {
        if (!config.content.files.every(function (path) {
          // `path` can be a string
          if (typeof path === "string") return true; // `path` can be an object { raw: string, extension?: string }
          // `raw` must be a string

          if (typeof (path === null || path === void 0 ? void 0 : path.raw) !== "string") return false; // `extension` (if provided) should also be a string

          if ((path === null || path === void 0 ? void 0 : path.extension) && typeof (path === null || path === void 0 ? void 0 : path.extension) !== "string") {
            return false;
          }

          return true;
        })) {
          return false;
        } // `config.content.extract` is optional, and can be a Function or a Record<String, Function>


        if (_typeof(config.content.extract) === "object") {
          for (var _i = 0, _Object$values = Object.values(config.content.extract); _i < _Object$values.length; _i++) {
            var value = _Object$values[_i];

            if (typeof value !== "function") {
              return false;
            }
          }
        } else if (!(config.content.extract === undefined || typeof config.content.extract === "function")) {
          return false;
        } // `config.content.transform` is optional, and can be a Function or a Record<String, Function>


        if (_typeof(config.content.transform) === "object") {
          for (var _i2 = 0, _Object$values2 = Object.values(config.content.transform); _i2 < _Object$values2.length; _i2++) {
            var _value = _Object$values2[_i2];

            if (typeof _value !== "function") {
              return false;
            }
          }
        } else if (!(config.content.transform === undefined || typeof config.content.transform === "function")) {
          return false;
        } // `config.content.relative` is optional and can be a boolean


        if (typeof config.content.relative !== "boolean" && typeof config.content.relative !== "undefined") {
          return false;
        }
      }

      return true;
    }

    return false;
  }();

  if (!valid) {
    _log["default"].warn("purge-deprecation", ["The `purge`/`content` options have changed in Tailwind CSS v3.0.", "Update your configuration file to eliminate this warning.", "https://tailwindcss.com/docs/upgrade-guide#configure-content-sources"]);
  } // Normalize the `safelist`


  config.safelist = function () {
    var _purge_options;

    var content = config.content,
        purge = config.purge,
        safelist = config.safelist;
    if (Array.isArray(safelist)) return safelist;
    if (Array.isArray(content === null || content === void 0 ? void 0 : content.safelist)) return content.safelist;
    if (Array.isArray(purge === null || purge === void 0 ? void 0 : purge.safelist)) return purge.safelist;
    if (Array.isArray(purge === null || purge === void 0 ? void 0 : (_purge_options = purge.options) === null || _purge_options === void 0 ? void 0 : _purge_options.safelist)) return purge.options.safelist;
    return [];
  }(); // Normalize the `blocklist`


  config.blocklist = function () {
    var blocklist = config.blocklist;

    if (Array.isArray(blocklist)) {
      if (blocklist.every(function (item) {
        return typeof item === "string";
      })) {
        return blocklist;
      }

      _log["default"].warn("blocklist-invalid", ["The `blocklist` option must be an array of strings.", "https://tailwindcss.com/docs/content-configuration#discarding-classes"]);
    }

    return [];
  }(); // Normalize prefix option


  if (typeof config.prefix === "function") {
    _log["default"].warn("prefix-function", ["As of Tailwind CSS v3.0, `prefix` cannot be a function.", "Update `prefix` in your configuration to be a string to eliminate this warning.", "https://tailwindcss.com/docs/upgrade-guide#prefix-cannot-be-a-function"]);

    config.prefix = "";
  } else {
    var _config_prefix;

    config.prefix = (_config_prefix = config.prefix) !== null && _config_prefix !== void 0 ? _config_prefix : "";
  } // Normalize the `content`


  config.content = {
    relative: function () {
      var content = config.content;

      if (content === null || content === void 0 ? void 0 : content.relative) {
        return content.relative;
      }

      return (0, _featureFlags.flagEnabled)(config, "relativeContentPathsByDefault");
    }(),
    files: function () {
      var content = config.content,
          purge = config.purge;
      if (Array.isArray(purge)) return purge;
      if (Array.isArray(purge === null || purge === void 0 ? void 0 : purge.content)) return purge.content;
      if (Array.isArray(content)) return content;
      if (Array.isArray(content === null || content === void 0 ? void 0 : content.content)) return content.content;
      if (Array.isArray(content === null || content === void 0 ? void 0 : content.files)) return content.files;
      return [];
    }(),
    extract: function () {
      var extract = function () {
        var _config_purge, _config_content, _config_purge1, _config_purge_extract, _config_content1, _config_content_extract, _config_purge2, _config_purge_options, _config_content2, _config_content_options;

        if ((_config_purge = config.purge) === null || _config_purge === void 0 ? void 0 : _config_purge.extract) return config.purge.extract;
        if ((_config_content = config.content) === null || _config_content === void 0 ? void 0 : _config_content.extract) return config.content.extract;
        if ((_config_purge1 = config.purge) === null || _config_purge1 === void 0 ? void 0 : (_config_purge_extract = _config_purge1.extract) === null || _config_purge_extract === void 0 ? void 0 : _config_purge_extract.DEFAULT) return config.purge.extract.DEFAULT;
        if ((_config_content1 = config.content) === null || _config_content1 === void 0 ? void 0 : (_config_content_extract = _config_content1.extract) === null || _config_content_extract === void 0 ? void 0 : _config_content_extract.DEFAULT) return config.content.extract.DEFAULT;
        if ((_config_purge2 = config.purge) === null || _config_purge2 === void 0 ? void 0 : (_config_purge_options = _config_purge2.options) === null || _config_purge_options === void 0 ? void 0 : _config_purge_options.extractors) return config.purge.options.extractors;
        if ((_config_content2 = config.content) === null || _config_content2 === void 0 ? void 0 : (_config_content_options = _config_content2.options) === null || _config_content_options === void 0 ? void 0 : _config_content_options.extractors) return config.content.options.extractors;
        return {};
      }();

      var extractors = {};

      var defaultExtractor = function () {
        var _config_purge, _config_purge_options, _config_content, _config_content_options;

        if ((_config_purge = config.purge) === null || _config_purge === void 0 ? void 0 : (_config_purge_options = _config_purge.options) === null || _config_purge_options === void 0 ? void 0 : _config_purge_options.defaultExtractor) {
          return config.purge.options.defaultExtractor;
        }

        if ((_config_content = config.content) === null || _config_content === void 0 ? void 0 : (_config_content_options = _config_content.options) === null || _config_content_options === void 0 ? void 0 : _config_content_options.defaultExtractor) {
          return config.content.options.defaultExtractor;
        }

        return undefined;
      }();

      if (defaultExtractor !== undefined) {
        extractors.DEFAULT = defaultExtractor;
      } // Functions


      if (typeof extract === "function") {
        extractors.DEFAULT = extract;
      } else if (Array.isArray(extract)) {
        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
          for (var _iterator = (extract !== null && extract !== void 0 ? extract : [])[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var _step$value = _step.value,
                extensions = _step$value.extensions,
                extractor = _step$value.extractor;
            var _iteratorNormalCompletion2 = true;
            var _didIteratorError2 = false;
            var _iteratorError2 = undefined;

            try {
              for (var _iterator2 = extensions[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                var extension = _step2.value;
                extractors[extension] = extractor;
              }
            } catch (err) {
              _didIteratorError2 = true;
              _iteratorError2 = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
                  _iterator2["return"]();
                }
              } finally {
                if (_didIteratorError2) {
                  throw _iteratorError2;
                }
              }
            }
          }
        } catch (err) {
          _didIteratorError = true;
          _iteratorError = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion && _iterator["return"] != null) {
              _iterator["return"]();
            }
          } finally {
            if (_didIteratorError) {
              throw _iteratorError;
            }
          }
        }
      } else if (_typeof(extract) === "object" && extract !== null) {
        Object.assign(extractors, extract);
      }

      return extractors;
    }(),
    transform: function () {
      var transform = function () {
        var _config_purge, _config_content, _config_purge1, _config_purge_transform, _config_content1, _config_content_transform;

        if ((_config_purge = config.purge) === null || _config_purge === void 0 ? void 0 : _config_purge.transform) return config.purge.transform;
        if ((_config_content = config.content) === null || _config_content === void 0 ? void 0 : _config_content.transform) return config.content.transform;
        if ((_config_purge1 = config.purge) === null || _config_purge1 === void 0 ? void 0 : (_config_purge_transform = _config_purge1.transform) === null || _config_purge_transform === void 0 ? void 0 : _config_purge_transform.DEFAULT) return config.purge.transform.DEFAULT;
        if ((_config_content1 = config.content) === null || _config_content1 === void 0 ? void 0 : (_config_content_transform = _config_content1.transform) === null || _config_content_transform === void 0 ? void 0 : _config_content_transform.DEFAULT) return config.content.transform.DEFAULT;
        return {};
      }();

      var transformers = {};

      if (typeof transform === "function") {
        transformers.DEFAULT = transform;
      }

      if (_typeof(transform) === "object" && transform !== null) {
        Object.assign(transformers, transform);
      }

      return transformers;
    }()
  }; // Validate globs to prevent bogus globs.
  // E.g.: `./src/*.{html}` is invalid, the `{html}` should just be `html`

  var _iteratorNormalCompletion3 = true;
  var _didIteratorError3 = false;
  var _iteratorError3 = undefined;

  try {
    for (var _iterator3 = config.content.files[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
      var file = _step3.value;

      if (typeof file === "string" && /{([^,]*?)}/g.test(file)) {
        _log["default"].warn("invalid-glob-braces", ["The glob pattern ".concat((0, _log.dim)(file), " in your Tailwind CSS configuration is invalid."), "Update it to ".concat((0, _log.dim)(file.replace(/{([^,]*?)}/g, "$1")), " to silence this warning.")]);

        break;
      }
    }
  } catch (err) {
    _didIteratorError3 = true;
    _iteratorError3 = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion3 && _iterator3["return"] != null) {
        _iterator3["return"]();
      }
    } finally {
      if (_didIteratorError3) {
        throw _iteratorError3;
      }
    }
  }

  return config;
}