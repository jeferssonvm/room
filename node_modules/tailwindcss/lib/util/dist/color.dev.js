"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

function _export(target, all) {
  for (var name in all) {
    Object.defineProperty(target, name, {
      enumerable: true,
      get: all[name]
    });
  }
}

_export(exports, {
  parseColor: function parseColor() {
    return _parseColor;
  },
  formatColor: function formatColor() {
    return _formatColor;
  }
});

var _colorNames =
/*#__PURE__*/
_interop_require_default(require("./colorNames"));

function _interop_require_default(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}

var HEX = /^#([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})?$/i;
var SHORT_HEX = /^#([a-f\d])([a-f\d])([a-f\d])([a-f\d])?$/i;
var VALUE = /(?:\d+|\d*\.\d+)%?/;
var SEP = /(?:\s*,\s*|\s+)/;
var ALPHA_SEP = /\s*[,/]\s*/;
var CUSTOM_PROPERTY = /var\(--(?:[^ )]*?)(?:,(?:[^ )]*?|var\(--[^ )]*?\)))?\)/;
var RGB = new RegExp("^(rgba?)\\(\\s*(".concat(VALUE.source, "|").concat(CUSTOM_PROPERTY.source, ")(?:").concat(SEP.source, "(").concat(VALUE.source, "|").concat(CUSTOM_PROPERTY.source, "))?(?:").concat(SEP.source, "(").concat(VALUE.source, "|").concat(CUSTOM_PROPERTY.source, "))?(?:").concat(ALPHA_SEP.source, "(").concat(VALUE.source, "|").concat(CUSTOM_PROPERTY.source, "))?\\s*\\)$"));
var HSL = new RegExp("^(hsla?)\\(\\s*((?:".concat(VALUE.source, ")(?:deg|rad|grad|turn)?|").concat(CUSTOM_PROPERTY.source, ")(?:").concat(SEP.source, "(").concat(VALUE.source, "|").concat(CUSTOM_PROPERTY.source, "))?(?:").concat(SEP.source, "(").concat(VALUE.source, "|").concat(CUSTOM_PROPERTY.source, "))?(?:").concat(ALPHA_SEP.source, "(").concat(VALUE.source, "|").concat(CUSTOM_PROPERTY.source, "))?\\s*\\)$"));

function _parseColor(value) {
  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
      _ref$loose = _ref.loose,
      loose = _ref$loose === void 0 ? false : _ref$loose;

  var _match_, _match__toString;

  if (typeof value !== "string") {
    return null;
  }

  value = value.trim();

  if (value === "transparent") {
    return {
      mode: "rgb",
      color: ["0", "0", "0"],
      alpha: "0"
    };
  }

  if (value in _colorNames["default"]) {
    return {
      mode: "rgb",
      color: _colorNames["default"][value].map(function (v) {
        return v.toString();
      })
    };
  }

  var hex = value.replace(SHORT_HEX, function (_, r, g, b, a) {
    return ["#", r, r, g, g, b, b, a ? a + a : ""].join("");
  }).match(HEX);

  if (hex !== null) {
    return {
      mode: "rgb",
      color: [parseInt(hex[1], 16), parseInt(hex[2], 16), parseInt(hex[3], 16)].map(function (v) {
        return v.toString();
      }),
      alpha: hex[4] ? (parseInt(hex[4], 16) / 255).toString() : undefined
    };
  }

  var _value_match;

  var match = (_value_match = value.match(RGB)) !== null && _value_match !== void 0 ? _value_match : value.match(HSL);

  if (match === null) {
    return null;
  }

  var color = [match[2], match[3], match[4]].filter(Boolean).map(function (v) {
    return v.toString();
  }); // rgba(var(--my-color), 0.1)
  // hsla(var(--my-color), 0.1)

  if (color.length === 2 && color[0].startsWith("var(")) {
    return {
      mode: match[1],
      color: [color[0]],
      alpha: color[1]
    };
  }

  if (!loose && color.length !== 3) {
    return null;
  }

  if (color.length < 3 && !color.some(function (part) {
    return /^var\(.*?\)$/.test(part);
  })) {
    return null;
  }

  return {
    mode: match[1],
    color: color,
    alpha: (_match_ = match[5]) === null || _match_ === void 0 ? void 0 : (_match__toString = _match_.toString) === null || _match__toString === void 0 ? void 0 : _match__toString.call(_match_)
  };
}

function _formatColor(_ref2) {
  var mode = _ref2.mode,
      color = _ref2.color,
      alpha = _ref2.alpha;
  var hasAlpha = alpha !== undefined;

  if (mode === "rgba" || mode === "hsla") {
    return "".concat(mode, "(").concat(color.join(", ")).concat(hasAlpha ? ", ".concat(alpha) : "", ")");
  }

  return "".concat(mode, "(").concat(color.join(" ")).concat(hasAlpha ? " / ".concat(alpha) : "", ")");
}