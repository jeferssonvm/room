"use strict";

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

Object.defineProperty(exports, "__esModule", {
  value: true
});

function _export(target, all) {
  for (var name in all) {
    Object.defineProperty(target, name, {
      enumerable: true,
      get: all[name]
    });
  }
}

_export(exports, {
  dim: function dim() {
    return _dim;
  },
  "default": function _default() {
    return _default2;
  }
});

var _picocolors =
/*#__PURE__*/
_interop_require_default(require("picocolors"));

function _interop_require_default(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}

var alreadyShown = new Set();

function log(type, messages, key) {
  if (typeof process !== "undefined" && process.env.JEST_WORKER_ID) return;
  if (key && alreadyShown.has(key)) return;
  if (key) alreadyShown.add(key);
  console.warn("");
  messages.forEach(function (message) {
    return console.warn(type, "-", message);
  });
}

function _dim(input) {
  return _picocolors["default"].dim(input);
}

var _default2 = {
  info: function info(key, messages) {
    log.apply(void 0, [_picocolors["default"].bold(_picocolors["default"].cyan("info"))].concat(_toConsumableArray(Array.isArray(key) ? [key] : [messages, key])));
  },
  warn: function warn(key, messages) {
    log.apply(void 0, [_picocolors["default"].bold(_picocolors["default"].yellow("warn"))].concat(_toConsumableArray(Array.isArray(key) ? [key] : [messages, key])));
  },
  risk: function risk(key, messages) {
    log.apply(void 0, [_picocolors["default"].bold(_picocolors["default"].magenta("risk"))].concat(_toConsumableArray(Array.isArray(key) ? [key] : [messages, key])));
  }
};