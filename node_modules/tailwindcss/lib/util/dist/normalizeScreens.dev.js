/**
 * @typedef {object} ScreenValue
 * @property {number|undefined} min
 * @property {number|undefined} max
 * @property {string|undefined} raw
 */

/**
* @typedef {object} Screen
* @property {string} name
* @property {boolean} not
* @property {ScreenValue[]} values
*/

/**
* A function that normalizes the various forms that the screens object can be
* provided in.
*
* Input(s):
*   - ['100px', '200px'] // Raw strings
*   - { sm: '100px', md: '200px' } // Object with string values
*   - { sm: { min: '100px' }, md: { max: '100px' } } // Object with object values
*   - { sm: [{ min: '100px' }, { max: '200px' }] } // Object with object array (multiple values)
*
* Output(s):
*   - [{ name: 'sm', values: [{ min: '100px', max: '200px' }] }] // List of objects, that contains multiple values
*
* @returns {Screen[]}
*/
"use strict";

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

Object.defineProperty(exports, "__esModule", {
  value: true
});

function _export(target, all) {
  for (var name in all) {
    Object.defineProperty(target, name, {
      enumerable: true,
      get: all[name]
    });
  }
}

_export(exports, {
  normalizeScreens: function normalizeScreens() {
    return _normalizeScreens;
  },
  isScreenSortable: function isScreenSortable() {
    return _isScreenSortable;
  },
  compareScreens: function compareScreens() {
    return _compareScreens;
  },
  toScreen: function toScreen() {
    return _toScreen;
  }
});

function _normalizeScreens(screens) {
  var root = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

  if (Array.isArray(screens)) {
    return screens.map(function (screen) {
      if (root && Array.isArray(screen)) {
        throw new Error("The tuple syntax is not supported for `screens`.");
      }

      if (typeof screen === "string") {
        return {
          name: screen.toString(),
          not: false,
          values: [{
            min: screen,
            max: undefined
          }]
        };
      }

      var _screen = _slicedToArray(screen, 2),
          name = _screen[0],
          options = _screen[1];

      name = name.toString();

      if (typeof options === "string") {
        return {
          name: name,
          not: false,
          values: [{
            min: options,
            max: undefined
          }]
        };
      }

      if (Array.isArray(options)) {
        return {
          name: name,
          not: false,
          values: options.map(function (option) {
            return resolveValue(option);
          })
        };
      }

      return {
        name: name,
        not: false,
        values: [resolveValue(options)]
      };
    });
  }

  return _normalizeScreens(Object.entries(screens !== null && screens !== void 0 ? screens : {}), false);
}

function _isScreenSortable(screen) {
  if (screen.values.length !== 1) {
    return {
      result: false,
      reason: "multiple-values"
    };
  } else if (screen.values[0].raw !== undefined) {
    return {
      result: false,
      reason: "raw-values"
    };
  } else if (screen.values[0].min !== undefined && screen.values[0].max !== undefined) {
    return {
      result: false,
      reason: "min-and-max"
    };
  }

  return {
    result: true,
    reason: null
  };
}

function _compareScreens(type, a, z) {
  var aScreen = _toScreen(a, type);

  var zScreen = _toScreen(z, type);

  var aSorting = _isScreenSortable(aScreen);

  var bSorting = _isScreenSortable(zScreen); // These cases should never happen and indicate a bug in Tailwind CSS itself


  if (aSorting.reason === "multiple-values" || bSorting.reason === "multiple-values") {
    throw new Error("Attempted to sort a screen with multiple values. This should never happen. Please open a bug report.");
  } else if (aSorting.reason === "raw-values" || bSorting.reason === "raw-values") {
    throw new Error("Attempted to sort a screen with raw values. This should never happen. Please open a bug report.");
  } else if (aSorting.reason === "min-and-max" || bSorting.reason === "min-and-max") {
    throw new Error("Attempted to sort a screen with both min and max values. This should never happen. Please open a bug report.");
  } // Let the sorting begin


  var _aScreen$values$ = aScreen.values[0],
      aMin = _aScreen$values$.min,
      aMax = _aScreen$values$.max;
  var _zScreen$values$ = zScreen.values[0],
      zMin = _zScreen$values$.min,
      zMax = _zScreen$values$.max; // Negating screens flip their behavior. Basically `not min-width` is `max-width`

  if (a.not) {
    var _ref = [aMax, aMin];
    aMin = _ref[0];
    aMax = _ref[1];
  }

  if (z.not) {
    var _ref2 = [zMax, zMin];
    zMin = _ref2[0];
    zMax = _ref2[1];
  }

  aMin = aMin === undefined ? aMin : parseFloat(aMin);
  aMax = aMax === undefined ? aMax : parseFloat(aMax);
  zMin = zMin === undefined ? zMin : parseFloat(zMin);
  zMax = zMax === undefined ? zMax : parseFloat(zMax);

  var _ref3 = type === "min" ? [aMin, zMin] : [zMax, aMax],
      _ref4 = _slicedToArray(_ref3, 2),
      aValue = _ref4[0],
      zValue = _ref4[1];

  return aValue - zValue;
}

function _toScreen(value, type) {
  if (_typeof(value) === "object") {
    return value;
  }

  return {
    name: "arbitrary-screen",
    values: [_defineProperty({}, type, value)]
  };
}

function resolveValue() {
  var _ref6 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      _minWidth = _ref6["min-width"],
      _ref6$min = _ref6.min,
      min = _ref6$min === void 0 ? _minWidth : _ref6$min,
      max = _ref6.max,
      raw = _ref6.raw;

  return {
    min: min,
    max: max,
    raw: raw
  };
}