"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

function _export(target, all) {
  for (var name in all) {
    Object.defineProperty(target, name, {
      enumerable: true,
      get: all[name]
    });
  }
}

_export(exports, {
  lazyLightningCss: function lazyLightningCss() {
    return _lazyLightningCss;
  },
  lightningcss: function lightningcss() {
    return _lightningcss;
  },
  loadPostcss: function loadPostcss() {
    return _loadPostcss;
  },
  loadPostcssImport: function loadPostcssImport() {
    return _loadPostcssImport;
  }
});

var _packagejson =
/*#__PURE__*/
_interop_require_default(require("../../../../package.json"));

var _browserslist =
/*#__PURE__*/
_interop_require_default(require("browserslist"));

var _index = require("../../../../peers/index");

function _interop_require_default(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}

function _lazyLightningCss() {
  // TODO: Make this lazy/bundled
  return require("lightningcss");
}

var lightningCss;

function loadLightningCss() {
  if (lightningCss) {
    return lightningCss;
  } // Try to load a local version first


  try {
    return lightningCss = require("lightningcss");
  } catch (_unused) {}

  return lightningCss = _lazyLightningCss();
}

function _lightningcss(shouldMinify, result) {
  var css, transformed;
  return regeneratorRuntime.async(function _lightningcss$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          css = loadLightningCss();
          _context.prev = 1;
          transformed = css.transform({
            filename: result.opts.from || "input.css",
            code: Buffer.from(result.css, "utf-8"),
            minify: shouldMinify,
            sourceMap: !!result.map,
            inputSourceMap: result.map ? result.map.toString() : undefined,
            targets: css.browserslistToTargets((0, _browserslist["default"])(_packagejson["default"].browserslist)),
            drafts: {
              nesting: true
            }
          });
          return _context.abrupt("return", Object.assign(result, {
            css: transformed.code.toString("utf8"),
            map: result.map ? Object.assign(result.map, {
              toString: function toString() {
                return transformed.map.toString();
              }
            }) : result.map
          }));

        case 6:
          _context.prev = 6;
          _context.t0 = _context["catch"](1);
          console.error("Unable to use Lightning CSS. Using raw version instead.");
          console.error(_context.t0);
          return _context.abrupt("return", result);

        case 11:
        case "end":
          return _context.stop();
      }
    }
  }, null, null, [[1, 6]]);
}

function _loadPostcss() {
  // Try to load a local `postcss` version first
  try {
    return require("postcss");
  } catch (_unused2) {}

  return (0, _index.lazyPostcss)();
}

function _loadPostcssImport() {
  // Try to load a local `postcss-import` version first
  try {
    return require("postcss-import");
  } catch (_unused3) {}

  return (0, _index.lazyPostcssImport)();
}