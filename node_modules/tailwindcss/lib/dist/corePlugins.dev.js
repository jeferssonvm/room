"use strict";

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});

function _export(target, all) {
  for (var name in all) {
    Object.defineProperty(target, name, {
      enumerable: true,
      get: all[name]
    });
  }
}

_export(exports, {
  variantPlugins: function variantPlugins() {
    return _variantPlugins;
  },
  corePlugins: function corePlugins() {
    return _corePlugins;
  }
});

var _fs =
/*#__PURE__*/
_interop_require_default(require("fs"));

var _path =
/*#__PURE__*/
_interop_require_wildcard(require("path"));

var _postcss =
/*#__PURE__*/
_interop_require_default(require("postcss"));

var _createUtilityPlugin =
/*#__PURE__*/
_interop_require_default(require("./util/createUtilityPlugin"));

var _buildMediaQuery =
/*#__PURE__*/
_interop_require_default(require("./util/buildMediaQuery"));

var _escapeClassName =
/*#__PURE__*/
_interop_require_default(require("./util/escapeClassName"));

var _parseAnimationValue =
/*#__PURE__*/
_interop_require_default(require("./util/parseAnimationValue"));

var _flattenColorPalette =
/*#__PURE__*/
_interop_require_default(require("./util/flattenColorPalette"));

var _withAlphaVariable =
/*#__PURE__*/
_interop_require_wildcard(require("./util/withAlphaVariable"));

var _toColorValue =
/*#__PURE__*/
_interop_require_default(require("./util/toColorValue"));

var _isPlainObject =
/*#__PURE__*/
_interop_require_default(require("./util/isPlainObject"));

var _transformThemeValue =
/*#__PURE__*/
_interop_require_default(require("./util/transformThemeValue"));

var _packagejson = require("../package.json");

var _log =
/*#__PURE__*/
_interop_require_default(require("./util/log"));

var _normalizeScreens = require("./util/normalizeScreens");

var _parseBoxShadowValue = require("./util/parseBoxShadowValue");

var _removeAlphaVariables = require("./util/removeAlphaVariables");

var _featureFlags = require("./featureFlags");

var _dataTypes = require("./util/dataTypes");

var _setupContextUtils = require("./lib/setupContextUtils");

function _interop_require_default(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}

function _getRequireWildcardCache(nodeInterop) {
  if (typeof WeakMap !== "function") return null;
  var cacheBabelInterop = new WeakMap();
  var cacheNodeInterop = new WeakMap();
  return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {
    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
  })(nodeInterop);
}

function _interop_require_wildcard(obj, nodeInterop) {
  if (!nodeInterop && obj && obj.__esModule) {
    return obj;
  }

  if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") {
    return {
      "default": obj
    };
  }

  var cache = _getRequireWildcardCache(nodeInterop);

  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }

  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

  for (var key in obj) {
    if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }

  newObj["default"] = obj;

  if (cache) {
    cache.set(obj, newObj);
  }

  return newObj;
}

var _variantPlugins = {
  pseudoElementVariants: function pseudoElementVariants(_ref) {
    var addVariant = _ref.addVariant;
    addVariant("first-letter", "&::first-letter");
    addVariant("first-line", "&::first-line");
    addVariant("marker", [function (_ref2) {
      var container = _ref2.container;
      (0, _removeAlphaVariables.removeAlphaVariables)(container, ["--tw-text-opacity"]);
      return "& *::marker";
    }, function (_ref3) {
      var container = _ref3.container;
      (0, _removeAlphaVariables.removeAlphaVariables)(container, ["--tw-text-opacity"]);
      return "&::marker";
    }]);
    addVariant("selection", ["& *::selection", "&::selection"]);
    addVariant("file", "&::file-selector-button");
    addVariant("placeholder", "&::placeholder");
    addVariant("backdrop", "&::backdrop");
    addVariant("before", function (_ref4) {
      var container = _ref4.container;
      container.walkRules(function (rule) {
        var foundContent = false;
        rule.walkDecls("content", function () {
          foundContent = true;
        });

        if (!foundContent) {
          rule.prepend(_postcss["default"].decl({
            prop: "content",
            value: "var(--tw-content)"
          }));
        }
      });
      return "&::before";
    });
    addVariant("after", function (_ref5) {
      var container = _ref5.container;
      container.walkRules(function (rule) {
        var foundContent = false;
        rule.walkDecls("content", function () {
          foundContent = true;
        });

        if (!foundContent) {
          rule.prepend(_postcss["default"].decl({
            prop: "content",
            value: "var(--tw-content)"
          }));
        }
      });
      return "&::after";
    });
  },
  pseudoClassVariants: function pseudoClassVariants(_ref6) {
    var addVariant = _ref6.addVariant,
        matchVariant = _ref6.matchVariant,
        config = _ref6.config,
        prefix = _ref6.prefix;
    var pseudoVariants = [// Positional
    ["first", "&:first-child"], ["last", "&:last-child"], ["only", "&:only-child"], ["odd", "&:nth-child(odd)"], ["even", "&:nth-child(even)"], "first-of-type", "last-of-type", "only-of-type", // State
    ["visited", function (_ref7) {
      var container = _ref7.container;
      (0, _removeAlphaVariables.removeAlphaVariables)(container, ["--tw-text-opacity", "--tw-border-opacity", "--tw-bg-opacity"]);
      return "&:visited";
    }], "target", ["open", "&[open]"], // Forms
    "default", "checked", "indeterminate", "placeholder-shown", "autofill", "optional", "required", "valid", "invalid", "in-range", "out-of-range", "read-only", // Content
    "empty", // Interactive
    "focus-within", ["hover", !(0, _featureFlags.flagEnabled)(config(), "hoverOnlyWhenSupported") ? "&:hover" : "@media (hover: hover) and (pointer: fine) { &:hover }"], "focus", "focus-visible", "active", "enabled", "disabled"].map(function (variant) {
      return Array.isArray(variant) ? variant : [variant, "&:".concat(variant)];
    });
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      var _loop = function _loop() {
        var _step$value = _slicedToArray(_step.value, 2),
            variantName = _step$value[0],
            state = _step$value[1];

        addVariant(variantName, function (ctx) {
          var result = typeof state === "function" ? state(ctx) : state;
          return result;
        });
      };

      for (var _iterator = pseudoVariants[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        _loop();
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator["return"] != null) {
          _iterator["return"]();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }

    var variants = {
      group: function group(_, _ref8) {
        var modifier = _ref8.modifier;
        return modifier ? [":merge(".concat(prefix(".group"), "\\/").concat((0, _escapeClassName["default"])(modifier), ")"), " &"] : [":merge(".concat(prefix(".group"), ")"), " &"];
      },
      peer: function peer(_, _ref9) {
        var modifier = _ref9.modifier;
        return modifier ? [":merge(".concat(prefix(".peer"), "\\/").concat((0, _escapeClassName["default"])(modifier), ")"), " ~ &"] : [":merge(".concat(prefix(".peer"), ")"), " ~ &"];
      }
    };

    var _loop2 = function _loop2() {
      var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),
          name = _Object$entries$_i[0],
          fn = _Object$entries$_i[1];

      matchVariant(name, function () {
        var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";
        var extra = arguments.length > 1 ? arguments[1] : undefined;
        var result = (0, _dataTypes.normalize)(typeof value === "function" ? value(extra) : value);
        if (!result.includes("&")) result = "&" + result;

        var _fn = fn("", extra),
            _fn2 = _slicedToArray(_fn, 2),
            a = _fn2[0],
            b = _fn2[1];

        var start = null;
        var end = null;
        var quotes = 0;

        for (var i = 0; i < result.length; ++i) {
          var c = result[i];

          if (c === "&") {
            start = i;
          } else if (c === "'" || c === '"') {
            quotes += 1;
          } else if (start !== null && c === " " && !quotes) {
            end = i;
          }
        }

        if (start !== null && end === null) {
          end = result.length;
        } // Basically this but can handle quotes:
        // result.replace(/&(\S+)?/g, (_, pseudo = '') => a + pseudo + b)


        return result.slice(0, start) + a + result.slice(start + 1, end) + b + result.slice(end);
      }, _defineProperty({
        values: Object.fromEntries(pseudoVariants)
      }, _setupContextUtils.INTERNAL_FEATURES, {
        respectPrefix: false
      }));
    };

    for (var _i = 0, _Object$entries = Object.entries(variants); _i < _Object$entries.length; _i++) {
      _loop2();
    }
  },
  directionVariants: function directionVariants(_ref10) {
    var addVariant = _ref10.addVariant;
    addVariant("ltr", ':is([dir="ltr"] &)');
    addVariant("rtl", ':is([dir="rtl"] &)');
  },
  reducedMotionVariants: function reducedMotionVariants(_ref11) {
    var addVariant = _ref11.addVariant;
    addVariant("motion-safe", "@media (prefers-reduced-motion: no-preference)");
    addVariant("motion-reduce", "@media (prefers-reduced-motion: reduce)");
  },
  darkVariants: function darkVariants(_ref12) {
    var config = _ref12.config,
        addVariant = _ref12.addVariant;

    var _concat = [].concat(config("darkMode", "media")),
        _concat2 = _slicedToArray(_concat, 2),
        mode = _concat2[0],
        _concat2$ = _concat2[1],
        className = _concat2$ === void 0 ? ".dark" : _concat2$;

    if (mode === false) {
      mode = "media";

      _log["default"].warn("darkmode-false", ["The `darkMode` option in your Tailwind CSS configuration is set to `false`, which now behaves the same as `media`.", "Change `darkMode` to `media` or remove it entirely.", "https://tailwindcss.com/docs/upgrade-guide#remove-dark-mode-configuration"]);
    }

    if (mode === "class") {
      addVariant("dark", ":is(".concat(className, " &)"));
    } else if (mode === "media") {
      addVariant("dark", "@media (prefers-color-scheme: dark)");
    }
  },
  printVariant: function printVariant(_ref13) {
    var addVariant = _ref13.addVariant;
    addVariant("print", "@media print");
  },
  screenVariants: function screenVariants(_ref14) {
    var theme = _ref14.theme,
        addVariant = _ref14.addVariant,
        matchVariant = _ref14.matchVariant;

    var _theme;

    var rawScreens = (_theme = theme("screens")) !== null && _theme !== void 0 ? _theme : {};
    var areSimpleScreens = Object.values(rawScreens).every(function (v) {
      return typeof v === "string";
    });
    var screens = (0, _normalizeScreens.normalizeScreens)(theme("screens"));
    /** @type {Set<string>} */

    var unitCache = new Set([]);
    /** @param {string} value */

    function units(value) {
      var _value_match;

      var _value_match_;

      return (_value_match_ = (_value_match = value.match(/(\D+)$/)) === null || _value_match === void 0 ? void 0 : _value_match[1]) !== null && _value_match_ !== void 0 ? _value_match_ : "(none)";
    }
    /** @param {string} value */


    function recordUnits(value) {
      if (value !== undefined) {
        unitCache.add(units(value));
      }
    }
    /** @param {string} value */


    function canUseUnits(value) {
      recordUnits(value); // If the cache was empty it'll become 1 because we've just added the current unit
      // If the cache was not empty and the units are the same the size doesn't change
      // Otherwise, if the units are different from what is already known the size will always be > 1

      return unitCache.size === 1;
    }

    var _iteratorNormalCompletion2 = true;
    var _didIteratorError2 = false;
    var _iteratorError2 = undefined;

    try {
      for (var _iterator2 = screens[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
        var screen = _step2.value;
        var _iteratorNormalCompletion4 = true;
        var _didIteratorError4 = false;
        var _iteratorError4 = undefined;

        try {
          for (var _iterator4 = screen.values[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
            var value = _step4.value;
            recordUnits(value.min);
            recordUnits(value.max);
          }
        } catch (err) {
          _didIteratorError4 = true;
          _iteratorError4 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion4 && _iterator4["return"] != null) {
              _iterator4["return"]();
            }
          } finally {
            if (_didIteratorError4) {
              throw _iteratorError4;
            }
          }
        }
      }
    } catch (err) {
      _didIteratorError2 = true;
      _iteratorError2 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
          _iterator2["return"]();
        }
      } finally {
        if (_didIteratorError2) {
          throw _iteratorError2;
        }
      }
    }

    var screensUseConsistentUnits = unitCache.size <= 1;
    /**
    * @typedef {import('./util/normalizeScreens').Screen} Screen
    */

    /**
    * @param {'min' | 'max'} type
    * @returns {Record<string, Screen>}
    */

    function buildScreenValues(type) {
      return Object.fromEntries(screens.filter(function (screen) {
        return (0, _normalizeScreens.isScreenSortable)(screen).result;
      }).map(function (screen) {
        var _screen$values$ = screen.values[0],
            min = _screen$values$.min,
            max = _screen$values$.max;

        if (type === "min" && min !== undefined) {
          return screen;
        } else if (type === "min" && max !== undefined) {
          return _objectSpread({}, screen, {
            not: !screen.not
          });
        } else if (type === "max" && max !== undefined) {
          return screen;
        } else if (type === "max" && min !== undefined) {
          return _objectSpread({}, screen, {
            not: !screen.not
          });
        }
      }).map(function (screen) {
        return [screen.name, screen];
      }));
    }
    /**
    * @param {'min' | 'max'} type
    * @returns {(a: { value: string | Screen }, z: { value: string | Screen }) => number}
    */


    function buildSort(type) {
      return function (a, z) {
        return (0, _normalizeScreens.compareScreens)(type, a.value, z.value);
      };
    }

    var maxSort = buildSort("max");
    var minSort = buildSort("min");
    /** @param {'min'|'max'} type */

    function buildScreenVariant(type) {
      return function (value) {
        if (!areSimpleScreens) {
          _log["default"].warn("complex-screen-config", ["The `min-*` and `max-*` variants are not supported with a `screens` configuration containing objects."]);

          return [];
        } else if (!screensUseConsistentUnits) {
          _log["default"].warn("mixed-screen-units", ["The `min-*` and `max-*` variants are not supported with a `screens` configuration containing mixed units."]);

          return [];
        } else if (typeof value === "string" && !canUseUnits(value)) {
          _log["default"].warn("minmax-have-mixed-units", ["The `min-*` and `max-*` variants are not supported with a `screens` configuration containing mixed units."]);

          return [];
        }

        return ["@media ".concat((0, _buildMediaQuery["default"])((0, _normalizeScreens.toScreen)(value, type)))];
      };
    }

    matchVariant("max", buildScreenVariant("max"), {
      sort: maxSort,
      values: areSimpleScreens ? buildScreenValues("max") : {}
    }); // screens and min-* are sorted together when they can be

    var id = "min-screens";
    var _iteratorNormalCompletion3 = true;
    var _didIteratorError3 = false;
    var _iteratorError3 = undefined;

    try {
      for (var _iterator3 = screens[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
        var _screen = _step3.value;
        addVariant(_screen.name, "@media ".concat((0, _buildMediaQuery["default"])(_screen)), {
          id: id,
          sort: areSimpleScreens && screensUseConsistentUnits ? minSort : undefined,
          value: _screen
        });
      }
    } catch (err) {
      _didIteratorError3 = true;
      _iteratorError3 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion3 && _iterator3["return"] != null) {
          _iterator3["return"]();
        }
      } finally {
        if (_didIteratorError3) {
          throw _iteratorError3;
        }
      }
    }

    matchVariant("min", buildScreenVariant("min"), {
      id: id,
      sort: minSort
    });
  },
  supportsVariants: function supportsVariants(_ref15) {
    var matchVariant = _ref15.matchVariant,
        theme = _ref15.theme;

    var _theme;

    matchVariant("supports", function () {
      var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";
      var check = (0, _dataTypes.normalize)(value);
      var isRaw = /^\w*\s*\(/.test(check); // Chrome has a bug where `(condtion1)or(condition2)` is not valid
      // But `(condition1) or (condition2)` is supported.

      check = isRaw ? check.replace(/\b(and|or|not)\b/g, " $1 ") : check;

      if (isRaw) {
        return "@supports ".concat(check);
      }

      if (!check.includes(":")) {
        check = "".concat(check, ": var(--tw)");
      }

      if (!(check.startsWith("(") && check.endsWith(")"))) {
        check = "(".concat(check, ")");
      }

      return "@supports ".concat(check);
    }, {
      values: (_theme = theme("supports")) !== null && _theme !== void 0 ? _theme : {}
    });
  },
  ariaVariants: function ariaVariants(_ref16) {
    var matchVariant = _ref16.matchVariant,
        theme = _ref16.theme;

    var _theme;

    matchVariant("aria", function (value) {
      return "&[aria-".concat((0, _dataTypes.normalize)(value), "]");
    }, {
      values: (_theme = theme("aria")) !== null && _theme !== void 0 ? _theme : {}
    });

    var _theme1;

    matchVariant("group-aria", function (value, _ref17) {
      var modifier = _ref17.modifier;
      return modifier ? ":merge(.group\\/".concat(modifier, ")[aria-").concat((0, _dataTypes.normalize)(value), "] &") : ":merge(.group)[aria-".concat((0, _dataTypes.normalize)(value), "] &");
    }, {
      values: (_theme1 = theme("aria")) !== null && _theme1 !== void 0 ? _theme1 : {}
    });

    var _theme2;

    matchVariant("peer-aria", function (value, _ref18) {
      var modifier = _ref18.modifier;
      return modifier ? ":merge(.peer\\/".concat(modifier, ")[aria-").concat((0, _dataTypes.normalize)(value), "] ~ &") : ":merge(.peer)[aria-".concat((0, _dataTypes.normalize)(value), "] ~ &");
    }, {
      values: (_theme2 = theme("aria")) !== null && _theme2 !== void 0 ? _theme2 : {}
    });
  },
  dataVariants: function dataVariants(_ref19) {
    var matchVariant = _ref19.matchVariant,
        theme = _ref19.theme;

    var _theme;

    matchVariant("data", function (value) {
      return "&[data-".concat((0, _dataTypes.normalize)(value), "]");
    }, {
      values: (_theme = theme("data")) !== null && _theme !== void 0 ? _theme : {}
    });

    var _theme1;

    matchVariant("group-data", function (value, _ref20) {
      var modifier = _ref20.modifier;
      return modifier ? ":merge(.group\\/".concat(modifier, ")[data-").concat((0, _dataTypes.normalize)(value), "] &") : ":merge(.group)[data-".concat((0, _dataTypes.normalize)(value), "] &");
    }, {
      values: (_theme1 = theme("data")) !== null && _theme1 !== void 0 ? _theme1 : {}
    });

    var _theme2;

    matchVariant("peer-data", function (value, _ref21) {
      var modifier = _ref21.modifier;
      return modifier ? ":merge(.peer\\/".concat(modifier, ")[data-").concat((0, _dataTypes.normalize)(value), "] ~ &") : ":merge(.peer)[data-".concat((0, _dataTypes.normalize)(value), "] ~ &");
    }, {
      values: (_theme2 = theme("data")) !== null && _theme2 !== void 0 ? _theme2 : {}
    });
  },
  orientationVariants: function orientationVariants(_ref22) {
    var addVariant = _ref22.addVariant;
    addVariant("portrait", "@media (orientation: portrait)");
    addVariant("landscape", "@media (orientation: landscape)");
  },
  prefersContrastVariants: function prefersContrastVariants(_ref23) {
    var addVariant = _ref23.addVariant;
    addVariant("contrast-more", "@media (prefers-contrast: more)");
    addVariant("contrast-less", "@media (prefers-contrast: less)");
  }
};
var cssTransformValue = ["translate(var(--tw-translate-x), var(--tw-translate-y))", "rotate(var(--tw-rotate))", "skewX(var(--tw-skew-x))", "skewY(var(--tw-skew-y))", "scaleX(var(--tw-scale-x))", "scaleY(var(--tw-scale-y))"].join(" ");
var cssFilterValue = ["var(--tw-blur)", "var(--tw-brightness)", "var(--tw-contrast)", "var(--tw-grayscale)", "var(--tw-hue-rotate)", "var(--tw-invert)", "var(--tw-saturate)", "var(--tw-sepia)", "var(--tw-drop-shadow)"].join(" ");
var cssBackdropFilterValue = ["var(--tw-backdrop-blur)", "var(--tw-backdrop-brightness)", "var(--tw-backdrop-contrast)", "var(--tw-backdrop-grayscale)", "var(--tw-backdrop-hue-rotate)", "var(--tw-backdrop-invert)", "var(--tw-backdrop-opacity)", "var(--tw-backdrop-saturate)", "var(--tw-backdrop-sepia)"].join(" ");
var _corePlugins = {
  preflight: function preflight(_ref24) {
    var addBase = _ref24.addBase;

    var preflightStyles = _postcss["default"].parse(_fs["default"].readFileSync(_path.join(__dirname, "./css/preflight.css"), "utf8"));

    addBase([_postcss["default"].comment({
      text: "! tailwindcss v".concat(_packagejson.version, " | MIT License | https://tailwindcss.com")
    })].concat(_toConsumableArray(preflightStyles.nodes)));
  },
  container: function () {
    function extractMinWidths() {
      var breakpoints = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
      return breakpoints.flatMap(function (breakpoint) {
        return breakpoint.values.map(function (breakpoint) {
          return breakpoint.min;
        });
      }).filter(function (v) {
        return v !== undefined;
      });
    }

    function mapMinWidthsToPadding(minWidths, screens, paddings) {
      if (typeof paddings === "undefined") {
        return [];
      }

      if (!(_typeof(paddings) === "object" && paddings !== null)) {
        return [{
          screen: "DEFAULT",
          minWidth: 0,
          padding: paddings
        }];
      }

      var mapping = [];

      if (paddings.DEFAULT) {
        mapping.push({
          screen: "DEFAULT",
          minWidth: 0,
          padding: paddings.DEFAULT
        });
      }

      var _iteratorNormalCompletion5 = true;
      var _didIteratorError5 = false;
      var _iteratorError5 = undefined;

      try {
        for (var _iterator5 = minWidths[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
          var minWidth = _step5.value;
          var _iteratorNormalCompletion6 = true;
          var _didIteratorError6 = false;
          var _iteratorError6 = undefined;

          try {
            for (var _iterator6 = screens[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {
              var screen = _step6.value;
              var _iteratorNormalCompletion7 = true;
              var _didIteratorError7 = false;
              var _iteratorError7 = undefined;

              try {
                for (var _iterator7 = screen.values[Symbol.iterator](), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {
                  var min = _step7.value.min;

                  if (min === minWidth) {
                    mapping.push({
                      minWidth: minWidth,
                      padding: paddings[screen.name]
                    });
                  }
                }
              } catch (err) {
                _didIteratorError7 = true;
                _iteratorError7 = err;
              } finally {
                try {
                  if (!_iteratorNormalCompletion7 && _iterator7["return"] != null) {
                    _iterator7["return"]();
                  }
                } finally {
                  if (_didIteratorError7) {
                    throw _iteratorError7;
                  }
                }
              }
            }
          } catch (err) {
            _didIteratorError6 = true;
            _iteratorError6 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion6 && _iterator6["return"] != null) {
                _iterator6["return"]();
              }
            } finally {
              if (_didIteratorError6) {
                throw _iteratorError6;
              }
            }
          }
        }
      } catch (err) {
        _didIteratorError5 = true;
        _iteratorError5 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion5 && _iterator5["return"] != null) {
            _iterator5["return"]();
          }
        } finally {
          if (_didIteratorError5) {
            throw _iteratorError5;
          }
        }
      }

      return mapping;
    }

    return function (_ref25) {
      var addComponents = _ref25.addComponents,
          theme = _ref25.theme;
      var screens = (0, _normalizeScreens.normalizeScreens)(theme("container.screens", theme("screens")));
      var minWidths = extractMinWidths(screens);
      var paddings = mapMinWidthsToPadding(minWidths, screens, theme("container.padding"));

      var generatePaddingFor = function generatePaddingFor(minWidth) {
        var paddingConfig = paddings.find(function (padding) {
          return padding.minWidth === minWidth;
        });

        if (!paddingConfig) {
          return {};
        }

        return {
          paddingRight: paddingConfig.padding,
          paddingLeft: paddingConfig.padding
        };
      };

      var atRules = Array.from(new Set(minWidths.slice().sort(function (a, z) {
        return parseInt(a) - parseInt(z);
      }))).map(function (minWidth) {
        return _defineProperty({}, "@media (min-width: ".concat(minWidth, ")"), {
          ".container": _objectSpread({
            "max-width": minWidth
          }, generatePaddingFor(minWidth))
        });
      });
      addComponents([{
        ".container": Object.assign({
          width: "100%"
        }, theme("container.center", false) ? {
          marginRight: "auto",
          marginLeft: "auto"
        } : {}, generatePaddingFor(0))
      }].concat(_toConsumableArray(atRules)));
    };
  }(),
  accessibility: function accessibility(_ref27) {
    var addUtilities = _ref27.addUtilities;
    addUtilities({
      ".sr-only": {
        position: "absolute",
        width: "1px",
        height: "1px",
        padding: "0",
        margin: "-1px",
        overflow: "hidden",
        clip: "rect(0, 0, 0, 0)",
        whiteSpace: "nowrap",
        borderWidth: "0"
      },
      ".not-sr-only": {
        position: "static",
        width: "auto",
        height: "auto",
        padding: "0",
        margin: "0",
        overflow: "visible",
        clip: "auto",
        whiteSpace: "normal"
      }
    });
  },
  pointerEvents: function pointerEvents(_ref28) {
    var addUtilities = _ref28.addUtilities;
    addUtilities({
      ".pointer-events-none": {
        "pointer-events": "none"
      },
      ".pointer-events-auto": {
        "pointer-events": "auto"
      }
    });
  },
  visibility: function visibility(_ref29) {
    var addUtilities = _ref29.addUtilities;
    addUtilities({
      ".visible": {
        visibility: "visible"
      },
      ".invisible": {
        visibility: "hidden"
      },
      ".collapse": {
        visibility: "collapse"
      }
    });
  },
  position: function position(_ref30) {
    var addUtilities = _ref30.addUtilities;
    addUtilities({
      ".static": {
        position: "static"
      },
      ".fixed": {
        position: "fixed"
      },
      ".absolute": {
        position: "absolute"
      },
      ".relative": {
        position: "relative"
      },
      ".sticky": {
        position: "sticky"
      }
    });
  },
  inset: (0, _createUtilityPlugin["default"])("inset", [["inset", ["inset"]], [["inset-x", ["left", "right"]], ["inset-y", ["top", "bottom"]]], [["start", ["inset-inline-start"]], ["end", ["inset-inline-end"]], ["top", ["top"]], ["right", ["right"]], ["bottom", ["bottom"]], ["left", ["left"]]]], {
    supportsNegativeValues: true
  }),
  isolation: function isolation(_ref31) {
    var addUtilities = _ref31.addUtilities;
    addUtilities({
      ".isolate": {
        isolation: "isolate"
      },
      ".isolation-auto": {
        isolation: "auto"
      }
    });
  },
  zIndex: (0, _createUtilityPlugin["default"])("zIndex", [["z", ["zIndex"]]], {
    supportsNegativeValues: true
  }),
  order: (0, _createUtilityPlugin["default"])("order", undefined, {
    supportsNegativeValues: true
  }),
  gridColumn: (0, _createUtilityPlugin["default"])("gridColumn", [["col", ["gridColumn"]]]),
  gridColumnStart: (0, _createUtilityPlugin["default"])("gridColumnStart", [["col-start", ["gridColumnStart"]]]),
  gridColumnEnd: (0, _createUtilityPlugin["default"])("gridColumnEnd", [["col-end", ["gridColumnEnd"]]]),
  gridRow: (0, _createUtilityPlugin["default"])("gridRow", [["row", ["gridRow"]]]),
  gridRowStart: (0, _createUtilityPlugin["default"])("gridRowStart", [["row-start", ["gridRowStart"]]]),
  gridRowEnd: (0, _createUtilityPlugin["default"])("gridRowEnd", [["row-end", ["gridRowEnd"]]]),
  "float": function float(_ref32) {
    var addUtilities = _ref32.addUtilities;
    addUtilities({
      ".float-right": {
        "float": "right"
      },
      ".float-left": {
        "float": "left"
      },
      ".float-none": {
        "float": "none"
      }
    });
  },
  clear: function clear(_ref33) {
    var addUtilities = _ref33.addUtilities;
    addUtilities({
      ".clear-left": {
        clear: "left"
      },
      ".clear-right": {
        clear: "right"
      },
      ".clear-both": {
        clear: "both"
      },
      ".clear-none": {
        clear: "none"
      }
    });
  },
  margin: (0, _createUtilityPlugin["default"])("margin", [["m", ["margin"]], [["mx", ["margin-left", "margin-right"]], ["my", ["margin-top", "margin-bottom"]]], [["ms", ["margin-inline-start"]], ["me", ["margin-inline-end"]], ["mt", ["margin-top"]], ["mr", ["margin-right"]], ["mb", ["margin-bottom"]], ["ml", ["margin-left"]]]], {
    supportsNegativeValues: true
  }),
  boxSizing: function boxSizing(_ref34) {
    var addUtilities = _ref34.addUtilities;
    addUtilities({
      ".box-border": {
        "box-sizing": "border-box"
      },
      ".box-content": {
        "box-sizing": "content-box"
      }
    });
  },
  lineClamp: function lineClamp(_ref35) {
    var matchUtilities = _ref35.matchUtilities,
        addUtilities = _ref35.addUtilities,
        theme = _ref35.theme;
    matchUtilities({
      "line-clamp": function lineClamp(value) {
        return {
          overflow: "hidden",
          display: "-webkit-box",
          "-webkit-box-orient": "vertical",
          "-webkit-line-clamp": "".concat(value)
        };
      }
    }, {
      values: theme("lineClamp")
    });
    addUtilities({
      ".line-clamp-none": {
        overflow: "visible",
        display: "block",
        "-webkit-box-orient": "horizontal",
        "-webkit-line-clamp": "none"
      }
    });
  },
  display: function display(_ref36) {
    var addUtilities = _ref36.addUtilities;
    addUtilities({
      ".block": {
        display: "block"
      },
      ".inline-block": {
        display: "inline-block"
      },
      ".inline": {
        display: "inline"
      },
      ".flex": {
        display: "flex"
      },
      ".inline-flex": {
        display: "inline-flex"
      },
      ".table": {
        display: "table"
      },
      ".inline-table": {
        display: "inline-table"
      },
      ".table-caption": {
        display: "table-caption"
      },
      ".table-cell": {
        display: "table-cell"
      },
      ".table-column": {
        display: "table-column"
      },
      ".table-column-group": {
        display: "table-column-group"
      },
      ".table-footer-group": {
        display: "table-footer-group"
      },
      ".table-header-group": {
        display: "table-header-group"
      },
      ".table-row-group": {
        display: "table-row-group"
      },
      ".table-row": {
        display: "table-row"
      },
      ".flow-root": {
        display: "flow-root"
      },
      ".grid": {
        display: "grid"
      },
      ".inline-grid": {
        display: "inline-grid"
      },
      ".contents": {
        display: "contents"
      },
      ".list-item": {
        display: "list-item"
      },
      ".hidden": {
        display: "none"
      }
    });
  },
  aspectRatio: (0, _createUtilityPlugin["default"])("aspectRatio", [["aspect", ["aspect-ratio"]]]),
  height: (0, _createUtilityPlugin["default"])("height", [["h", ["height"]]]),
  maxHeight: (0, _createUtilityPlugin["default"])("maxHeight", [["max-h", ["maxHeight"]]]),
  minHeight: (0, _createUtilityPlugin["default"])("minHeight", [["min-h", ["minHeight"]]]),
  width: (0, _createUtilityPlugin["default"])("width", [["w", ["width"]]]),
  minWidth: (0, _createUtilityPlugin["default"])("minWidth", [["min-w", ["minWidth"]]]),
  maxWidth: (0, _createUtilityPlugin["default"])("maxWidth", [["max-w", ["maxWidth"]]]),
  flex: (0, _createUtilityPlugin["default"])("flex"),
  flexShrink: (0, _createUtilityPlugin["default"])("flexShrink", [["flex-shrink", ["flex-shrink"]], ["shrink", ["flex-shrink"]]]),
  flexGrow: (0, _createUtilityPlugin["default"])("flexGrow", [["flex-grow", ["flex-grow"]], ["grow", ["flex-grow"]]]),
  flexBasis: (0, _createUtilityPlugin["default"])("flexBasis", [["basis", ["flex-basis"]]]),
  tableLayout: function tableLayout(_ref37) {
    var addUtilities = _ref37.addUtilities;
    addUtilities({
      ".table-auto": {
        "table-layout": "auto"
      },
      ".table-fixed": {
        "table-layout": "fixed"
      }
    });
  },
  captionSide: function captionSide(_ref38) {
    var addUtilities = _ref38.addUtilities;
    addUtilities({
      ".caption-top": {
        "caption-side": "top"
      },
      ".caption-bottom": {
        "caption-side": "bottom"
      }
    });
  },
  borderCollapse: function borderCollapse(_ref39) {
    var addUtilities = _ref39.addUtilities;
    addUtilities({
      ".border-collapse": {
        "border-collapse": "collapse"
      },
      ".border-separate": {
        "border-collapse": "separate"
      }
    });
  },
  borderSpacing: function borderSpacing(_ref40) {
    var addDefaults = _ref40.addDefaults,
        matchUtilities = _ref40.matchUtilities,
        theme = _ref40.theme;
    addDefaults("border-spacing", {
      "--tw-border-spacing-x": 0,
      "--tw-border-spacing-y": 0
    });
    matchUtilities({
      "border-spacing": function borderSpacing(value) {
        return {
          "--tw-border-spacing-x": value,
          "--tw-border-spacing-y": value,
          "@defaults border-spacing": {},
          "border-spacing": "var(--tw-border-spacing-x) var(--tw-border-spacing-y)"
        };
      },
      "border-spacing-x": function borderSpacingX(value) {
        return {
          "--tw-border-spacing-x": value,
          "@defaults border-spacing": {},
          "border-spacing": "var(--tw-border-spacing-x) var(--tw-border-spacing-y)"
        };
      },
      "border-spacing-y": function borderSpacingY(value) {
        return {
          "--tw-border-spacing-y": value,
          "@defaults border-spacing": {},
          "border-spacing": "var(--tw-border-spacing-x) var(--tw-border-spacing-y)"
        };
      }
    }, {
      values: theme("borderSpacing")
    });
  },
  transformOrigin: (0, _createUtilityPlugin["default"])("transformOrigin", [["origin", ["transformOrigin"]]]),
  translate: (0, _createUtilityPlugin["default"])("translate", [[["translate-x", [["@defaults transform", {}], "--tw-translate-x", ["transform", cssTransformValue]]], ["translate-y", [["@defaults transform", {}], "--tw-translate-y", ["transform", cssTransformValue]]]]], {
    supportsNegativeValues: true
  }),
  rotate: (0, _createUtilityPlugin["default"])("rotate", [["rotate", [["@defaults transform", {}], "--tw-rotate", ["transform", cssTransformValue]]]], {
    supportsNegativeValues: true
  }),
  skew: (0, _createUtilityPlugin["default"])("skew", [[["skew-x", [["@defaults transform", {}], "--tw-skew-x", ["transform", cssTransformValue]]], ["skew-y", [["@defaults transform", {}], "--tw-skew-y", ["transform", cssTransformValue]]]]], {
    supportsNegativeValues: true
  }),
  scale: (0, _createUtilityPlugin["default"])("scale", [["scale", [["@defaults transform", {}], "--tw-scale-x", "--tw-scale-y", ["transform", cssTransformValue]]], [["scale-x", [["@defaults transform", {}], "--tw-scale-x", ["transform", cssTransformValue]]], ["scale-y", [["@defaults transform", {}], "--tw-scale-y", ["transform", cssTransformValue]]]]], {
    supportsNegativeValues: true
  }),
  transform: function transform(_ref41) {
    var addDefaults = _ref41.addDefaults,
        addUtilities = _ref41.addUtilities;
    addDefaults("transform", {
      "--tw-translate-x": "0",
      "--tw-translate-y": "0",
      "--tw-rotate": "0",
      "--tw-skew-x": "0",
      "--tw-skew-y": "0",
      "--tw-scale-x": "1",
      "--tw-scale-y": "1"
    });
    addUtilities({
      ".transform": {
        "@defaults transform": {},
        transform: cssTransformValue
      },
      ".transform-cpu": {
        transform: cssTransformValue
      },
      ".transform-gpu": {
        transform: cssTransformValue.replace("translate(var(--tw-translate-x), var(--tw-translate-y))", "translate3d(var(--tw-translate-x), var(--tw-translate-y), 0)")
      },
      ".transform-none": {
        transform: "none"
      }
    });
  },
  animation: function animation(_ref42) {
    var matchUtilities = _ref42.matchUtilities,
        theme = _ref42.theme,
        config = _ref42.config;

    var prefixName = function prefixName(name) {
      return (0, _escapeClassName["default"])(config("prefix") + name);
    };

    var _theme;

    var keyframes = Object.fromEntries(Object.entries((_theme = theme("keyframes")) !== null && _theme !== void 0 ? _theme : {}).map(function (_ref43) {
      var _ref44 = _slicedToArray(_ref43, 2),
          key = _ref44[0],
          value = _ref44[1];

      return [key, _defineProperty({}, "@keyframes ".concat(prefixName(key)), value)];
    }));
    matchUtilities({
      animate: function animate(value) {
        var animations = (0, _parseAnimationValue["default"])(value);
        return [].concat(_toConsumableArray(animations.flatMap(function (animation) {
          return keyframes[animation.name];
        })), [{
          animation: animations.map(function (_ref46) {
            var name = _ref46.name,
                value = _ref46.value;

            if (name === undefined || keyframes[name] === undefined) {
              return value;
            }

            return value.replace(name, prefixName(name));
          }).join(", ")
        }]);
      }
    }, {
      values: theme("animation")
    });
  },
  cursor: (0, _createUtilityPlugin["default"])("cursor"),
  touchAction: function touchAction(_ref47) {
    var addDefaults = _ref47.addDefaults,
        addUtilities = _ref47.addUtilities;
    addDefaults("touch-action", {
      "--tw-pan-x": " ",
      "--tw-pan-y": " ",
      "--tw-pinch-zoom": " "
    });
    var cssTouchActionValue = "var(--tw-pan-x) var(--tw-pan-y) var(--tw-pinch-zoom)";
    addUtilities({
      ".touch-auto": {
        "touch-action": "auto"
      },
      ".touch-none": {
        "touch-action": "none"
      },
      ".touch-pan-x": {
        "@defaults touch-action": {},
        "--tw-pan-x": "pan-x",
        "touch-action": cssTouchActionValue
      },
      ".touch-pan-left": {
        "@defaults touch-action": {},
        "--tw-pan-x": "pan-left",
        "touch-action": cssTouchActionValue
      },
      ".touch-pan-right": {
        "@defaults touch-action": {},
        "--tw-pan-x": "pan-right",
        "touch-action": cssTouchActionValue
      },
      ".touch-pan-y": {
        "@defaults touch-action": {},
        "--tw-pan-y": "pan-y",
        "touch-action": cssTouchActionValue
      },
      ".touch-pan-up": {
        "@defaults touch-action": {},
        "--tw-pan-y": "pan-up",
        "touch-action": cssTouchActionValue
      },
      ".touch-pan-down": {
        "@defaults touch-action": {},
        "--tw-pan-y": "pan-down",
        "touch-action": cssTouchActionValue
      },
      ".touch-pinch-zoom": {
        "@defaults touch-action": {},
        "--tw-pinch-zoom": "pinch-zoom",
        "touch-action": cssTouchActionValue
      },
      ".touch-manipulation": {
        "touch-action": "manipulation"
      }
    });
  },
  userSelect: function userSelect(_ref48) {
    var addUtilities = _ref48.addUtilities;
    addUtilities({
      ".select-none": {
        "user-select": "none"
      },
      ".select-text": {
        "user-select": "text"
      },
      ".select-all": {
        "user-select": "all"
      },
      ".select-auto": {
        "user-select": "auto"
      }
    });
  },
  resize: function resize(_ref49) {
    var addUtilities = _ref49.addUtilities;
    addUtilities({
      ".resize-none": {
        resize: "none"
      },
      ".resize-y": {
        resize: "vertical"
      },
      ".resize-x": {
        resize: "horizontal"
      },
      ".resize": {
        resize: "both"
      }
    });
  },
  scrollSnapType: function scrollSnapType(_ref50) {
    var addDefaults = _ref50.addDefaults,
        addUtilities = _ref50.addUtilities;
    addDefaults("scroll-snap-type", {
      "--tw-scroll-snap-strictness": "proximity"
    });
    addUtilities({
      ".snap-none": {
        "scroll-snap-type": "none"
      },
      ".snap-x": {
        "@defaults scroll-snap-type": {},
        "scroll-snap-type": "x var(--tw-scroll-snap-strictness)"
      },
      ".snap-y": {
        "@defaults scroll-snap-type": {},
        "scroll-snap-type": "y var(--tw-scroll-snap-strictness)"
      },
      ".snap-both": {
        "@defaults scroll-snap-type": {},
        "scroll-snap-type": "both var(--tw-scroll-snap-strictness)"
      },
      ".snap-mandatory": {
        "--tw-scroll-snap-strictness": "mandatory"
      },
      ".snap-proximity": {
        "--tw-scroll-snap-strictness": "proximity"
      }
    });
  },
  scrollSnapAlign: function scrollSnapAlign(_ref51) {
    var addUtilities = _ref51.addUtilities;
    addUtilities({
      ".snap-start": {
        "scroll-snap-align": "start"
      },
      ".snap-end": {
        "scroll-snap-align": "end"
      },
      ".snap-center": {
        "scroll-snap-align": "center"
      },
      ".snap-align-none": {
        "scroll-snap-align": "none"
      }
    });
  },
  scrollSnapStop: function scrollSnapStop(_ref52) {
    var addUtilities = _ref52.addUtilities;
    addUtilities({
      ".snap-normal": {
        "scroll-snap-stop": "normal"
      },
      ".snap-always": {
        "scroll-snap-stop": "always"
      }
    });
  },
  scrollMargin: (0, _createUtilityPlugin["default"])("scrollMargin", [["scroll-m", ["scroll-margin"]], [["scroll-mx", ["scroll-margin-left", "scroll-margin-right"]], ["scroll-my", ["scroll-margin-top", "scroll-margin-bottom"]]], [["scroll-ms", ["scroll-margin-inline-start"]], ["scroll-me", ["scroll-margin-inline-end"]], ["scroll-mt", ["scroll-margin-top"]], ["scroll-mr", ["scroll-margin-right"]], ["scroll-mb", ["scroll-margin-bottom"]], ["scroll-ml", ["scroll-margin-left"]]]], {
    supportsNegativeValues: true
  }),
  scrollPadding: (0, _createUtilityPlugin["default"])("scrollPadding", [["scroll-p", ["scroll-padding"]], [["scroll-px", ["scroll-padding-left", "scroll-padding-right"]], ["scroll-py", ["scroll-padding-top", "scroll-padding-bottom"]]], [["scroll-ps", ["scroll-padding-inline-start"]], ["scroll-pe", ["scroll-padding-inline-end"]], ["scroll-pt", ["scroll-padding-top"]], ["scroll-pr", ["scroll-padding-right"]], ["scroll-pb", ["scroll-padding-bottom"]], ["scroll-pl", ["scroll-padding-left"]]]]),
  listStylePosition: function listStylePosition(_ref53) {
    var addUtilities = _ref53.addUtilities;
    addUtilities({
      ".list-inside": {
        "list-style-position": "inside"
      },
      ".list-outside": {
        "list-style-position": "outside"
      }
    });
  },
  listStyleType: (0, _createUtilityPlugin["default"])("listStyleType", [["list", ["listStyleType"]]]),
  listStyleImage: (0, _createUtilityPlugin["default"])("listStyleImage", [["list-image", ["listStyleImage"]]]),
  appearance: function appearance(_ref54) {
    var addUtilities = _ref54.addUtilities;
    addUtilities({
      ".appearance-none": {
        appearance: "none"
      }
    });
  },
  columns: (0, _createUtilityPlugin["default"])("columns", [["columns", ["columns"]]]),
  breakBefore: function breakBefore(_ref55) {
    var addUtilities = _ref55.addUtilities;
    addUtilities({
      ".break-before-auto": {
        "break-before": "auto"
      },
      ".break-before-avoid": {
        "break-before": "avoid"
      },
      ".break-before-all": {
        "break-before": "all"
      },
      ".break-before-avoid-page": {
        "break-before": "avoid-page"
      },
      ".break-before-page": {
        "break-before": "page"
      },
      ".break-before-left": {
        "break-before": "left"
      },
      ".break-before-right": {
        "break-before": "right"
      },
      ".break-before-column": {
        "break-before": "column"
      }
    });
  },
  breakInside: function breakInside(_ref56) {
    var addUtilities = _ref56.addUtilities;
    addUtilities({
      ".break-inside-auto": {
        "break-inside": "auto"
      },
      ".break-inside-avoid": {
        "break-inside": "avoid"
      },
      ".break-inside-avoid-page": {
        "break-inside": "avoid-page"
      },
      ".break-inside-avoid-column": {
        "break-inside": "avoid-column"
      }
    });
  },
  breakAfter: function breakAfter(_ref57) {
    var addUtilities = _ref57.addUtilities;
    addUtilities({
      ".break-after-auto": {
        "break-after": "auto"
      },
      ".break-after-avoid": {
        "break-after": "avoid"
      },
      ".break-after-all": {
        "break-after": "all"
      },
      ".break-after-avoid-page": {
        "break-after": "avoid-page"
      },
      ".break-after-page": {
        "break-after": "page"
      },
      ".break-after-left": {
        "break-after": "left"
      },
      ".break-after-right": {
        "break-after": "right"
      },
      ".break-after-column": {
        "break-after": "column"
      }
    });
  },
  gridAutoColumns: (0, _createUtilityPlugin["default"])("gridAutoColumns", [["auto-cols", ["gridAutoColumns"]]]),
  gridAutoFlow: function gridAutoFlow(_ref58) {
    var addUtilities = _ref58.addUtilities;
    addUtilities({
      ".grid-flow-row": {
        gridAutoFlow: "row"
      },
      ".grid-flow-col": {
        gridAutoFlow: "column"
      },
      ".grid-flow-dense": {
        gridAutoFlow: "dense"
      },
      ".grid-flow-row-dense": {
        gridAutoFlow: "row dense"
      },
      ".grid-flow-col-dense": {
        gridAutoFlow: "column dense"
      }
    });
  },
  gridAutoRows: (0, _createUtilityPlugin["default"])("gridAutoRows", [["auto-rows", ["gridAutoRows"]]]),
  gridTemplateColumns: (0, _createUtilityPlugin["default"])("gridTemplateColumns", [["grid-cols", ["gridTemplateColumns"]]]),
  gridTemplateRows: (0, _createUtilityPlugin["default"])("gridTemplateRows", [["grid-rows", ["gridTemplateRows"]]]),
  flexDirection: function flexDirection(_ref59) {
    var addUtilities = _ref59.addUtilities;
    addUtilities({
      ".flex-row": {
        "flex-direction": "row"
      },
      ".flex-row-reverse": {
        "flex-direction": "row-reverse"
      },
      ".flex-col": {
        "flex-direction": "column"
      },
      ".flex-col-reverse": {
        "flex-direction": "column-reverse"
      }
    });
  },
  flexWrap: function flexWrap(_ref60) {
    var addUtilities = _ref60.addUtilities;
    addUtilities({
      ".flex-wrap": {
        "flex-wrap": "wrap"
      },
      ".flex-wrap-reverse": {
        "flex-wrap": "wrap-reverse"
      },
      ".flex-nowrap": {
        "flex-wrap": "nowrap"
      }
    });
  },
  placeContent: function placeContent(_ref61) {
    var addUtilities = _ref61.addUtilities;
    addUtilities({
      ".place-content-center": {
        "place-content": "center"
      },
      ".place-content-start": {
        "place-content": "start"
      },
      ".place-content-end": {
        "place-content": "end"
      },
      ".place-content-between": {
        "place-content": "space-between"
      },
      ".place-content-around": {
        "place-content": "space-around"
      },
      ".place-content-evenly": {
        "place-content": "space-evenly"
      },
      ".place-content-baseline": {
        "place-content": "baseline"
      },
      ".place-content-stretch": {
        "place-content": "stretch"
      }
    });
  },
  placeItems: function placeItems(_ref62) {
    var addUtilities = _ref62.addUtilities;
    addUtilities({
      ".place-items-start": {
        "place-items": "start"
      },
      ".place-items-end": {
        "place-items": "end"
      },
      ".place-items-center": {
        "place-items": "center"
      },
      ".place-items-baseline": {
        "place-items": "baseline"
      },
      ".place-items-stretch": {
        "place-items": "stretch"
      }
    });
  },
  alignContent: function alignContent(_ref63) {
    var addUtilities = _ref63.addUtilities;
    addUtilities({
      ".content-normal": {
        "align-content": "normal"
      },
      ".content-center": {
        "align-content": "center"
      },
      ".content-start": {
        "align-content": "flex-start"
      },
      ".content-end": {
        "align-content": "flex-end"
      },
      ".content-between": {
        "align-content": "space-between"
      },
      ".content-around": {
        "align-content": "space-around"
      },
      ".content-evenly": {
        "align-content": "space-evenly"
      },
      ".content-baseline": {
        "align-content": "baseline"
      },
      ".content-stretch": {
        "align-content": "stretch"
      }
    });
  },
  alignItems: function alignItems(_ref64) {
    var addUtilities = _ref64.addUtilities;
    addUtilities({
      ".items-start": {
        "align-items": "flex-start"
      },
      ".items-end": {
        "align-items": "flex-end"
      },
      ".items-center": {
        "align-items": "center"
      },
      ".items-baseline": {
        "align-items": "baseline"
      },
      ".items-stretch": {
        "align-items": "stretch"
      }
    });
  },
  justifyContent: function justifyContent(_ref65) {
    var addUtilities = _ref65.addUtilities;
    addUtilities({
      ".justify-normal": {
        "justify-content": "normal"
      },
      ".justify-start": {
        "justify-content": "flex-start"
      },
      ".justify-end": {
        "justify-content": "flex-end"
      },
      ".justify-center": {
        "justify-content": "center"
      },
      ".justify-between": {
        "justify-content": "space-between"
      },
      ".justify-around": {
        "justify-content": "space-around"
      },
      ".justify-evenly": {
        "justify-content": "space-evenly"
      },
      ".justify-stretch": {
        "justify-content": "stretch"
      }
    });
  },
  justifyItems: function justifyItems(_ref66) {
    var addUtilities = _ref66.addUtilities;
    addUtilities({
      ".justify-items-start": {
        "justify-items": "start"
      },
      ".justify-items-end": {
        "justify-items": "end"
      },
      ".justify-items-center": {
        "justify-items": "center"
      },
      ".justify-items-stretch": {
        "justify-items": "stretch"
      }
    });
  },
  gap: (0, _createUtilityPlugin["default"])("gap", [["gap", ["gap"]], [["gap-x", ["columnGap"]], ["gap-y", ["rowGap"]]]]),
  space: function space(_ref67) {
    var matchUtilities = _ref67.matchUtilities,
        addUtilities = _ref67.addUtilities,
        theme = _ref67.theme;
    matchUtilities({
      "space-x": function spaceX(value) {
        value = value === "0" ? "0px" : value;

        if (false) {
          return {
            "& > :not([hidden]) ~ :not([hidden])": {
              "--tw-space-x-reverse": "0",
              "margin-inline-end": "calc(".concat(value, " * var(--tw-space-x-reverse))"),
              "margin-inline-start": "calc(".concat(value, " * calc(1 - var(--tw-space-x-reverse)))")
            }
          };
        }

        return {
          "& > :not([hidden]) ~ :not([hidden])": {
            "--tw-space-x-reverse": "0",
            "margin-right": "calc(".concat(value, " * var(--tw-space-x-reverse))"),
            "margin-left": "calc(".concat(value, " * calc(1 - var(--tw-space-x-reverse)))")
          }
        };
      },
      "space-y": function spaceY(value) {
        value = value === "0" ? "0px" : value;
        return {
          "& > :not([hidden]) ~ :not([hidden])": {
            "--tw-space-y-reverse": "0",
            "margin-top": "calc(".concat(value, " * calc(1 - var(--tw-space-y-reverse)))"),
            "margin-bottom": "calc(".concat(value, " * var(--tw-space-y-reverse))")
          }
        };
      }
    }, {
      values: theme("space"),
      supportsNegativeValues: true
    });
    addUtilities({
      ".space-y-reverse > :not([hidden]) ~ :not([hidden])": {
        "--tw-space-y-reverse": "1"
      },
      ".space-x-reverse > :not([hidden]) ~ :not([hidden])": {
        "--tw-space-x-reverse": "1"
      }
    });
  },
  divideWidth: function divideWidth(_ref68) {
    var matchUtilities = _ref68.matchUtilities,
        addUtilities = _ref68.addUtilities,
        theme = _ref68.theme;
    matchUtilities({
      "divide-x": function divideX(value) {
        value = value === "0" ? "0px" : value;

        if (false) {
          return {
            "& > :not([hidden]) ~ :not([hidden])": {
              "@defaults border-width": {},
              "--tw-divide-x-reverse": "0",
              "border-inline-end-width": "calc(".concat(value, " * var(--tw-divide-x-reverse))"),
              "border-inline-start-width": "calc(".concat(value, " * calc(1 - var(--tw-divide-x-reverse)))")
            }
          };
        }

        return {
          "& > :not([hidden]) ~ :not([hidden])": {
            "@defaults border-width": {},
            "--tw-divide-x-reverse": "0",
            "border-right-width": "calc(".concat(value, " * var(--tw-divide-x-reverse))"),
            "border-left-width": "calc(".concat(value, " * calc(1 - var(--tw-divide-x-reverse)))")
          }
        };
      },
      "divide-y": function divideY(value) {
        value = value === "0" ? "0px" : value;
        return {
          "& > :not([hidden]) ~ :not([hidden])": {
            "@defaults border-width": {},
            "--tw-divide-y-reverse": "0",
            "border-top-width": "calc(".concat(value, " * calc(1 - var(--tw-divide-y-reverse)))"),
            "border-bottom-width": "calc(".concat(value, " * var(--tw-divide-y-reverse))")
          }
        };
      }
    }, {
      values: theme("divideWidth"),
      type: ["line-width", "length", "any"]
    });
    addUtilities({
      ".divide-y-reverse > :not([hidden]) ~ :not([hidden])": {
        "@defaults border-width": {},
        "--tw-divide-y-reverse": "1"
      },
      ".divide-x-reverse > :not([hidden]) ~ :not([hidden])": {
        "@defaults border-width": {},
        "--tw-divide-x-reverse": "1"
      }
    });
  },
  divideStyle: function divideStyle(_ref69) {
    var addUtilities = _ref69.addUtilities;
    addUtilities({
      ".divide-solid > :not([hidden]) ~ :not([hidden])": {
        "border-style": "solid"
      },
      ".divide-dashed > :not([hidden]) ~ :not([hidden])": {
        "border-style": "dashed"
      },
      ".divide-dotted > :not([hidden]) ~ :not([hidden])": {
        "border-style": "dotted"
      },
      ".divide-double > :not([hidden]) ~ :not([hidden])": {
        "border-style": "double"
      },
      ".divide-none > :not([hidden]) ~ :not([hidden])": {
        "border-style": "none"
      }
    });
  },
  divideColor: function divideColor(_ref70) {
    var matchUtilities = _ref70.matchUtilities,
        theme = _ref70.theme,
        corePlugins = _ref70.corePlugins;
    matchUtilities({
      divide: function divide(value) {
        if (!corePlugins("divideOpacity")) {
          return _defineProperty({}, "& > :not([hidden]) ~ :not([hidden])", {
            "border-color": (0, _toColorValue["default"])(value)
          });
        }

        return _defineProperty({}, "& > :not([hidden]) ~ :not([hidden])", (0, _withAlphaVariable["default"])({
          color: value,
          property: "border-color",
          variable: "--tw-divide-opacity"
        }));
      }
    }, {
      values: function (_ref73) {
        var _ = _ref73.DEFAULT,
            colors = _objectWithoutProperties(_ref73, ["DEFAULT"]);

        return colors;
      }((0, _flattenColorPalette["default"])(theme("divideColor"))),
      type: ["color", "any"]
    });
  },
  divideOpacity: function divideOpacity(_ref74) {
    var matchUtilities = _ref74.matchUtilities,
        theme = _ref74.theme;
    matchUtilities({
      "divide-opacity": function divideOpacity(value) {
        return _defineProperty({}, "& > :not([hidden]) ~ :not([hidden])", {
          "--tw-divide-opacity": value
        });
      }
    }, {
      values: theme("divideOpacity")
    });
  },
  placeSelf: function placeSelf(_ref76) {
    var addUtilities = _ref76.addUtilities;
    addUtilities({
      ".place-self-auto": {
        "place-self": "auto"
      },
      ".place-self-start": {
        "place-self": "start"
      },
      ".place-self-end": {
        "place-self": "end"
      },
      ".place-self-center": {
        "place-self": "center"
      },
      ".place-self-stretch": {
        "place-self": "stretch"
      }
    });
  },
  alignSelf: function alignSelf(_ref77) {
    var addUtilities = _ref77.addUtilities;
    addUtilities({
      ".self-auto": {
        "align-self": "auto"
      },
      ".self-start": {
        "align-self": "flex-start"
      },
      ".self-end": {
        "align-self": "flex-end"
      },
      ".self-center": {
        "align-self": "center"
      },
      ".self-stretch": {
        "align-self": "stretch"
      },
      ".self-baseline": {
        "align-self": "baseline"
      }
    });
  },
  justifySelf: function justifySelf(_ref78) {
    var addUtilities = _ref78.addUtilities;
    addUtilities({
      ".justify-self-auto": {
        "justify-self": "auto"
      },
      ".justify-self-start": {
        "justify-self": "start"
      },
      ".justify-self-end": {
        "justify-self": "end"
      },
      ".justify-self-center": {
        "justify-self": "center"
      },
      ".justify-self-stretch": {
        "justify-self": "stretch"
      }
    });
  },
  overflow: function overflow(_ref79) {
    var addUtilities = _ref79.addUtilities;
    addUtilities({
      ".overflow-auto": {
        overflow: "auto"
      },
      ".overflow-hidden": {
        overflow: "hidden"
      },
      ".overflow-clip": {
        overflow: "clip"
      },
      ".overflow-visible": {
        overflow: "visible"
      },
      ".overflow-scroll": {
        overflow: "scroll"
      },
      ".overflow-x-auto": {
        "overflow-x": "auto"
      },
      ".overflow-y-auto": {
        "overflow-y": "auto"
      },
      ".overflow-x-hidden": {
        "overflow-x": "hidden"
      },
      ".overflow-y-hidden": {
        "overflow-y": "hidden"
      },
      ".overflow-x-clip": {
        "overflow-x": "clip"
      },
      ".overflow-y-clip": {
        "overflow-y": "clip"
      },
      ".overflow-x-visible": {
        "overflow-x": "visible"
      },
      ".overflow-y-visible": {
        "overflow-y": "visible"
      },
      ".overflow-x-scroll": {
        "overflow-x": "scroll"
      },
      ".overflow-y-scroll": {
        "overflow-y": "scroll"
      }
    });
  },
  overscrollBehavior: function overscrollBehavior(_ref80) {
    var addUtilities = _ref80.addUtilities;
    addUtilities({
      ".overscroll-auto": {
        "overscroll-behavior": "auto"
      },
      ".overscroll-contain": {
        "overscroll-behavior": "contain"
      },
      ".overscroll-none": {
        "overscroll-behavior": "none"
      },
      ".overscroll-y-auto": {
        "overscroll-behavior-y": "auto"
      },
      ".overscroll-y-contain": {
        "overscroll-behavior-y": "contain"
      },
      ".overscroll-y-none": {
        "overscroll-behavior-y": "none"
      },
      ".overscroll-x-auto": {
        "overscroll-behavior-x": "auto"
      },
      ".overscroll-x-contain": {
        "overscroll-behavior-x": "contain"
      },
      ".overscroll-x-none": {
        "overscroll-behavior-x": "none"
      }
    });
  },
  scrollBehavior: function scrollBehavior(_ref81) {
    var addUtilities = _ref81.addUtilities;
    addUtilities({
      ".scroll-auto": {
        "scroll-behavior": "auto"
      },
      ".scroll-smooth": {
        "scroll-behavior": "smooth"
      }
    });
  },
  textOverflow: function textOverflow(_ref82) {
    var addUtilities = _ref82.addUtilities;
    addUtilities({
      ".truncate": {
        overflow: "hidden",
        "text-overflow": "ellipsis",
        "white-space": "nowrap"
      },
      ".overflow-ellipsis": {
        "text-overflow": "ellipsis"
      },
      ".text-ellipsis": {
        "text-overflow": "ellipsis"
      },
      ".text-clip": {
        "text-overflow": "clip"
      }
    });
  },
  hyphens: function hyphens(_ref83) {
    var addUtilities = _ref83.addUtilities;
    addUtilities({
      ".hyphens-none": {
        hyphens: "none"
      },
      ".hyphens-manual": {
        hyphens: "manual"
      },
      ".hyphens-auto": {
        hyphens: "auto"
      }
    });
  },
  whitespace: function whitespace(_ref84) {
    var addUtilities = _ref84.addUtilities;
    addUtilities({
      ".whitespace-normal": {
        "white-space": "normal"
      },
      ".whitespace-nowrap": {
        "white-space": "nowrap"
      },
      ".whitespace-pre": {
        "white-space": "pre"
      },
      ".whitespace-pre-line": {
        "white-space": "pre-line"
      },
      ".whitespace-pre-wrap": {
        "white-space": "pre-wrap"
      },
      ".whitespace-break-spaces": {
        "white-space": "break-spaces"
      }
    });
  },
  wordBreak: function wordBreak(_ref85) {
    var addUtilities = _ref85.addUtilities;
    addUtilities({
      ".break-normal": {
        "overflow-wrap": "normal",
        "word-break": "normal"
      },
      ".break-words": {
        "overflow-wrap": "break-word"
      },
      ".break-all": {
        "word-break": "break-all"
      },
      ".break-keep": {
        "word-break": "keep-all"
      }
    });
  },
  borderRadius: (0, _createUtilityPlugin["default"])("borderRadius", [["rounded", ["border-radius"]], [["rounded-s", ["border-start-start-radius", "border-end-start-radius"]], ["rounded-e", ["border-start-end-radius", "border-end-end-radius"]], ["rounded-t", ["border-top-left-radius", "border-top-right-radius"]], ["rounded-r", ["border-top-right-radius", "border-bottom-right-radius"]], ["rounded-b", ["border-bottom-right-radius", "border-bottom-left-radius"]], ["rounded-l", ["border-top-left-radius", "border-bottom-left-radius"]]], [["rounded-ss", ["border-start-start-radius"]], ["rounded-se", ["border-start-end-radius"]], ["rounded-ee", ["border-end-end-radius"]], ["rounded-es", ["border-end-start-radius"]], ["rounded-tl", ["border-top-left-radius"]], ["rounded-tr", ["border-top-right-radius"]], ["rounded-br", ["border-bottom-right-radius"]], ["rounded-bl", ["border-bottom-left-radius"]]]]),
  borderWidth: (0, _createUtilityPlugin["default"])("borderWidth", [["border", [["@defaults border-width", {}], "border-width"]], [["border-x", [["@defaults border-width", {}], "border-left-width", "border-right-width"]], ["border-y", [["@defaults border-width", {}], "border-top-width", "border-bottom-width"]]], [["border-s", [["@defaults border-width", {}], "border-inline-start-width"]], ["border-e", [["@defaults border-width", {}], "border-inline-end-width"]], ["border-t", [["@defaults border-width", {}], "border-top-width"]], ["border-r", [["@defaults border-width", {}], "border-right-width"]], ["border-b", [["@defaults border-width", {}], "border-bottom-width"]], ["border-l", [["@defaults border-width", {}], "border-left-width"]]]], {
    type: ["line-width", "length"]
  }),
  borderStyle: function borderStyle(_ref86) {
    var addUtilities = _ref86.addUtilities;
    addUtilities({
      ".border-solid": {
        "border-style": "solid"
      },
      ".border-dashed": {
        "border-style": "dashed"
      },
      ".border-dotted": {
        "border-style": "dotted"
      },
      ".border-double": {
        "border-style": "double"
      },
      ".border-hidden": {
        "border-style": "hidden"
      },
      ".border-none": {
        "border-style": "none"
      }
    });
  },
  borderColor: function borderColor(_ref87) {
    var matchUtilities = _ref87.matchUtilities,
        theme = _ref87.theme,
        corePlugins = _ref87.corePlugins;
    matchUtilities({
      border: function border(value) {
        if (!corePlugins("borderOpacity")) {
          return {
            "border-color": (0, _toColorValue["default"])(value)
          };
        }

        return (0, _withAlphaVariable["default"])({
          color: value,
          property: "border-color",
          variable: "--tw-border-opacity"
        });
      }
    }, {
      values: function (_ref88) {
        var _ = _ref88.DEFAULT,
            colors = _objectWithoutProperties(_ref88, ["DEFAULT"]);

        return colors;
      }((0, _flattenColorPalette["default"])(theme("borderColor"))),
      type: ["color", "any"]
    });
    matchUtilities({
      "border-x": function borderX(value) {
        if (!corePlugins("borderOpacity")) {
          return {
            "border-left-color": (0, _toColorValue["default"])(value),
            "border-right-color": (0, _toColorValue["default"])(value)
          };
        }

        return (0, _withAlphaVariable["default"])({
          color: value,
          property: ["border-left-color", "border-right-color"],
          variable: "--tw-border-opacity"
        });
      },
      "border-y": function borderY(value) {
        if (!corePlugins("borderOpacity")) {
          return {
            "border-top-color": (0, _toColorValue["default"])(value),
            "border-bottom-color": (0, _toColorValue["default"])(value)
          };
        }

        return (0, _withAlphaVariable["default"])({
          color: value,
          property: ["border-top-color", "border-bottom-color"],
          variable: "--tw-border-opacity"
        });
      }
    }, {
      values: function (_ref89) {
        var _ = _ref89.DEFAULT,
            colors = _objectWithoutProperties(_ref89, ["DEFAULT"]);

        return colors;
      }((0, _flattenColorPalette["default"])(theme("borderColor"))),
      type: ["color", "any"]
    });
    matchUtilities({
      "border-s": function borderS(value) {
        if (!corePlugins("borderOpacity")) {
          return {
            "border-inline-start-color": (0, _toColorValue["default"])(value)
          };
        }

        return (0, _withAlphaVariable["default"])({
          color: value,
          property: "border-inline-start-color",
          variable: "--tw-border-opacity"
        });
      },
      "border-e": function borderE(value) {
        if (!corePlugins("borderOpacity")) {
          return {
            "border-inline-end-color": (0, _toColorValue["default"])(value)
          };
        }

        return (0, _withAlphaVariable["default"])({
          color: value,
          property: "border-inline-end-color",
          variable: "--tw-border-opacity"
        });
      },
      "border-t": function borderT(value) {
        if (!corePlugins("borderOpacity")) {
          return {
            "border-top-color": (0, _toColorValue["default"])(value)
          };
        }

        return (0, _withAlphaVariable["default"])({
          color: value,
          property: "border-top-color",
          variable: "--tw-border-opacity"
        });
      },
      "border-r": function borderR(value) {
        if (!corePlugins("borderOpacity")) {
          return {
            "border-right-color": (0, _toColorValue["default"])(value)
          };
        }

        return (0, _withAlphaVariable["default"])({
          color: value,
          property: "border-right-color",
          variable: "--tw-border-opacity"
        });
      },
      "border-b": function borderB(value) {
        if (!corePlugins("borderOpacity")) {
          return {
            "border-bottom-color": (0, _toColorValue["default"])(value)
          };
        }

        return (0, _withAlphaVariable["default"])({
          color: value,
          property: "border-bottom-color",
          variable: "--tw-border-opacity"
        });
      },
      "border-l": function borderL(value) {
        if (!corePlugins("borderOpacity")) {
          return {
            "border-left-color": (0, _toColorValue["default"])(value)
          };
        }

        return (0, _withAlphaVariable["default"])({
          color: value,
          property: "border-left-color",
          variable: "--tw-border-opacity"
        });
      }
    }, {
      values: function (_ref90) {
        var _ = _ref90.DEFAULT,
            colors = _objectWithoutProperties(_ref90, ["DEFAULT"]);

        return colors;
      }((0, _flattenColorPalette["default"])(theme("borderColor"))),
      type: ["color", "any"]
    });
  },
  borderOpacity: (0, _createUtilityPlugin["default"])("borderOpacity", [["border-opacity", ["--tw-border-opacity"]]]),
  backgroundColor: function backgroundColor(_ref91) {
    var matchUtilities = _ref91.matchUtilities,
        theme = _ref91.theme,
        corePlugins = _ref91.corePlugins;
    matchUtilities({
      bg: function bg(value) {
        if (!corePlugins("backgroundOpacity")) {
          return {
            "background-color": (0, _toColorValue["default"])(value)
          };
        }

        return (0, _withAlphaVariable["default"])({
          color: value,
          property: "background-color",
          variable: "--tw-bg-opacity"
        });
      }
    }, {
      values: (0, _flattenColorPalette["default"])(theme("backgroundColor")),
      type: ["color", "any"]
    });
  },
  backgroundOpacity: (0, _createUtilityPlugin["default"])("backgroundOpacity", [["bg-opacity", ["--tw-bg-opacity"]]]),
  backgroundImage: (0, _createUtilityPlugin["default"])("backgroundImage", [["bg", ["background-image"]]], {
    type: ["lookup", "image", "url"]
  }),
  gradientColorStops: function () {
    function transparentTo(value) {
      return (0, _withAlphaVariable.withAlphaValue)(value, 0, "rgb(255 255 255 / 0)");
    }

    return function (_ref92) {
      var matchUtilities = _ref92.matchUtilities,
          theme = _ref92.theme,
          addDefaults = _ref92.addDefaults;
      addDefaults("gradient-color-stops", {
        "--tw-gradient-from-position": " ",
        "--tw-gradient-via-position": " ",
        "--tw-gradient-to-position": " "
      });
      var options = {
        values: (0, _flattenColorPalette["default"])(theme("gradientColorStops")),
        type: ["color", "any"]
      };
      var positionOptions = {
        values: theme("gradientColorStopPositions"),
        type: ["length", "percentage"]
      };
      matchUtilities({
        from: function from(value) {
          var transparentToValue = transparentTo(value);
          return {
            "@defaults gradient-color-stops": {},
            "--tw-gradient-from": "".concat((0, _toColorValue["default"])(value), " var(--tw-gradient-from-position)"),
            "--tw-gradient-to": "".concat(transparentToValue, " var(--tw-gradient-to-position)"),
            "--tw-gradient-stops": "var(--tw-gradient-from), var(--tw-gradient-to)"
          };
        }
      }, options);
      matchUtilities({
        from: function from(value) {
          return {
            "--tw-gradient-from-position": value
          };
        }
      }, positionOptions);
      matchUtilities({
        via: function via(value) {
          var transparentToValue = transparentTo(value);
          return {
            "@defaults gradient-color-stops": {},
            "--tw-gradient-to": "".concat(transparentToValue, "  var(--tw-gradient-to-position)"),
            "--tw-gradient-stops": "var(--tw-gradient-from), ".concat((0, _toColorValue["default"])(value), " var(--tw-gradient-via-position), var(--tw-gradient-to)")
          };
        }
      }, options);
      matchUtilities({
        via: function via(value) {
          return {
            "--tw-gradient-via-position": value
          };
        }
      }, positionOptions);
      matchUtilities({
        to: function to(value) {
          return {
            "@defaults gradient-color-stops": {},
            "--tw-gradient-to": "".concat((0, _toColorValue["default"])(value), " var(--tw-gradient-to-position)")
          };
        }
      }, options);
      matchUtilities({
        to: function to(value) {
          return {
            "--tw-gradient-to-position": value
          };
        }
      }, positionOptions);
    };
  }(),
  boxDecorationBreak: function boxDecorationBreak(_ref93) {
    var addUtilities = _ref93.addUtilities;
    addUtilities({
      ".decoration-slice": {
        "box-decoration-break": "slice"
      },
      ".decoration-clone": {
        "box-decoration-break": "clone"
      },
      ".box-decoration-slice": {
        "box-decoration-break": "slice"
      },
      ".box-decoration-clone": {
        "box-decoration-break": "clone"
      }
    });
  },
  backgroundSize: (0, _createUtilityPlugin["default"])("backgroundSize", [["bg", ["background-size"]]], {
    type: ["lookup", "length", "percentage", "size"]
  }),
  backgroundAttachment: function backgroundAttachment(_ref94) {
    var addUtilities = _ref94.addUtilities;
    addUtilities({
      ".bg-fixed": {
        "background-attachment": "fixed"
      },
      ".bg-local": {
        "background-attachment": "local"
      },
      ".bg-scroll": {
        "background-attachment": "scroll"
      }
    });
  },
  backgroundClip: function backgroundClip(_ref95) {
    var addUtilities = _ref95.addUtilities;
    addUtilities({
      ".bg-clip-border": {
        "background-clip": "border-box"
      },
      ".bg-clip-padding": {
        "background-clip": "padding-box"
      },
      ".bg-clip-content": {
        "background-clip": "content-box"
      },
      ".bg-clip-text": {
        "background-clip": "text"
      }
    });
  },
  backgroundPosition: (0, _createUtilityPlugin["default"])("backgroundPosition", [["bg", ["background-position"]]], {
    type: ["lookup", ["position", {
      preferOnConflict: true
    }]]
  }),
  backgroundRepeat: function backgroundRepeat(_ref96) {
    var addUtilities = _ref96.addUtilities;
    addUtilities({
      ".bg-repeat": {
        "background-repeat": "repeat"
      },
      ".bg-no-repeat": {
        "background-repeat": "no-repeat"
      },
      ".bg-repeat-x": {
        "background-repeat": "repeat-x"
      },
      ".bg-repeat-y": {
        "background-repeat": "repeat-y"
      },
      ".bg-repeat-round": {
        "background-repeat": "round"
      },
      ".bg-repeat-space": {
        "background-repeat": "space"
      }
    });
  },
  backgroundOrigin: function backgroundOrigin(_ref97) {
    var addUtilities = _ref97.addUtilities;
    addUtilities({
      ".bg-origin-border": {
        "background-origin": "border-box"
      },
      ".bg-origin-padding": {
        "background-origin": "padding-box"
      },
      ".bg-origin-content": {
        "background-origin": "content-box"
      }
    });
  },
  fill: function fill(_ref98) {
    var matchUtilities = _ref98.matchUtilities,
        theme = _ref98.theme;
    matchUtilities({
      fill: function fill(value) {
        return {
          fill: (0, _toColorValue["default"])(value)
        };
      }
    }, {
      values: (0, _flattenColorPalette["default"])(theme("fill")),
      type: ["color", "any"]
    });
  },
  stroke: function stroke(_ref99) {
    var matchUtilities = _ref99.matchUtilities,
        theme = _ref99.theme;
    matchUtilities({
      stroke: function stroke(value) {
        return {
          stroke: (0, _toColorValue["default"])(value)
        };
      }
    }, {
      values: (0, _flattenColorPalette["default"])(theme("stroke")),
      type: ["color", "url", "any"]
    });
  },
  strokeWidth: (0, _createUtilityPlugin["default"])("strokeWidth", [["stroke", ["stroke-width"]]], {
    type: ["length", "number", "percentage"]
  }),
  objectFit: function objectFit(_ref100) {
    var addUtilities = _ref100.addUtilities;
    addUtilities({
      ".object-contain": {
        "object-fit": "contain"
      },
      ".object-cover": {
        "object-fit": "cover"
      },
      ".object-fill": {
        "object-fit": "fill"
      },
      ".object-none": {
        "object-fit": "none"
      },
      ".object-scale-down": {
        "object-fit": "scale-down"
      }
    });
  },
  objectPosition: (0, _createUtilityPlugin["default"])("objectPosition", [["object", ["object-position"]]]),
  padding: (0, _createUtilityPlugin["default"])("padding", [["p", ["padding"]], [["px", ["padding-left", "padding-right"]], ["py", ["padding-top", "padding-bottom"]]], [["ps", ["padding-inline-start"]], ["pe", ["padding-inline-end"]], ["pt", ["padding-top"]], ["pr", ["padding-right"]], ["pb", ["padding-bottom"]], ["pl", ["padding-left"]]]]),
  textAlign: function textAlign(_ref101) {
    var addUtilities = _ref101.addUtilities;
    addUtilities({
      ".text-left": {
        "text-align": "left"
      },
      ".text-center": {
        "text-align": "center"
      },
      ".text-right": {
        "text-align": "right"
      },
      ".text-justify": {
        "text-align": "justify"
      },
      ".text-start": {
        "text-align": "start"
      },
      ".text-end": {
        "text-align": "end"
      }
    });
  },
  textIndent: (0, _createUtilityPlugin["default"])("textIndent", [["indent", ["text-indent"]]], {
    supportsNegativeValues: true
  }),
  verticalAlign: function verticalAlign(_ref102) {
    var addUtilities = _ref102.addUtilities,
        matchUtilities = _ref102.matchUtilities;
    addUtilities({
      ".align-baseline": {
        "vertical-align": "baseline"
      },
      ".align-top": {
        "vertical-align": "top"
      },
      ".align-middle": {
        "vertical-align": "middle"
      },
      ".align-bottom": {
        "vertical-align": "bottom"
      },
      ".align-text-top": {
        "vertical-align": "text-top"
      },
      ".align-text-bottom": {
        "vertical-align": "text-bottom"
      },
      ".align-sub": {
        "vertical-align": "sub"
      },
      ".align-super": {
        "vertical-align": "super"
      }
    });
    matchUtilities({
      align: function align(value) {
        return {
          "vertical-align": value
        };
      }
    });
  },
  fontFamily: function fontFamily(_ref103) {
    var matchUtilities = _ref103.matchUtilities,
        theme = _ref103.theme;
    matchUtilities({
      font: function font(value) {
        var _ref104 = Array.isArray(value) && (0, _isPlainObject["default"])(value[1]) ? value : [value],
            _ref105 = _slicedToArray(_ref104, 2),
            families = _ref105[0],
            _ref105$ = _ref105[1],
            options = _ref105$ === void 0 ? {} : _ref105$;

        var fontFeatureSettings = options.fontFeatureSettings,
            fontVariationSettings = options.fontVariationSettings;
        return _objectSpread({
          "font-family": Array.isArray(families) ? families.join(", ") : families
        }, fontFeatureSettings === undefined ? {} : {
          "font-feature-settings": fontFeatureSettings
        }, {}, fontVariationSettings === undefined ? {} : {
          "font-variation-settings": fontVariationSettings
        });
      }
    }, {
      values: theme("fontFamily"),
      type: ["lookup", "generic-name", "family-name"]
    });
  },
  fontSize: function fontSize(_ref106) {
    var matchUtilities = _ref106.matchUtilities,
        theme = _ref106.theme;
    matchUtilities({
      text: function text(value, _ref107) {
        var modifier = _ref107.modifier;

        var _ref108 = Array.isArray(value) ? value : [value],
            _ref109 = _slicedToArray(_ref108, 2),
            fontSize = _ref109[0],
            options = _ref109[1];

        if (modifier) {
          return {
            "font-size": fontSize,
            "line-height": modifier
          };
        }

        var _ref110 = (0, _isPlainObject["default"])(options) ? options : {
          lineHeight: options
        },
            lineHeight = _ref110.lineHeight,
            letterSpacing = _ref110.letterSpacing,
            fontWeight = _ref110.fontWeight;

        return _objectSpread({
          "font-size": fontSize
        }, lineHeight === undefined ? {} : {
          "line-height": lineHeight
        }, {}, letterSpacing === undefined ? {} : {
          "letter-spacing": letterSpacing
        }, {}, fontWeight === undefined ? {} : {
          "font-weight": fontWeight
        });
      }
    }, {
      values: theme("fontSize"),
      modifiers: theme("lineHeight"),
      type: ["absolute-size", "relative-size", "length", "percentage"]
    });
  },
  fontWeight: (0, _createUtilityPlugin["default"])("fontWeight", [["font", ["fontWeight"]]], {
    type: ["lookup", "number", "any"]
  }),
  textTransform: function textTransform(_ref111) {
    var addUtilities = _ref111.addUtilities;
    addUtilities({
      ".uppercase": {
        "text-transform": "uppercase"
      },
      ".lowercase": {
        "text-transform": "lowercase"
      },
      ".capitalize": {
        "text-transform": "capitalize"
      },
      ".normal-case": {
        "text-transform": "none"
      }
    });
  },
  fontStyle: function fontStyle(_ref112) {
    var addUtilities = _ref112.addUtilities;
    addUtilities({
      ".italic": {
        "font-style": "italic"
      },
      ".not-italic": {
        "font-style": "normal"
      }
    });
  },
  fontVariantNumeric: function fontVariantNumeric(_ref113) {
    var addDefaults = _ref113.addDefaults,
        addUtilities = _ref113.addUtilities;
    var cssFontVariantNumericValue = "var(--tw-ordinal) var(--tw-slashed-zero) var(--tw-numeric-figure) var(--tw-numeric-spacing) var(--tw-numeric-fraction)";
    addDefaults("font-variant-numeric", {
      "--tw-ordinal": " ",
      "--tw-slashed-zero": " ",
      "--tw-numeric-figure": " ",
      "--tw-numeric-spacing": " ",
      "--tw-numeric-fraction": " "
    });
    addUtilities({
      ".normal-nums": {
        "font-variant-numeric": "normal"
      },
      ".ordinal": {
        "@defaults font-variant-numeric": {},
        "--tw-ordinal": "ordinal",
        "font-variant-numeric": cssFontVariantNumericValue
      },
      ".slashed-zero": {
        "@defaults font-variant-numeric": {},
        "--tw-slashed-zero": "slashed-zero",
        "font-variant-numeric": cssFontVariantNumericValue
      },
      ".lining-nums": {
        "@defaults font-variant-numeric": {},
        "--tw-numeric-figure": "lining-nums",
        "font-variant-numeric": cssFontVariantNumericValue
      },
      ".oldstyle-nums": {
        "@defaults font-variant-numeric": {},
        "--tw-numeric-figure": "oldstyle-nums",
        "font-variant-numeric": cssFontVariantNumericValue
      },
      ".proportional-nums": {
        "@defaults font-variant-numeric": {},
        "--tw-numeric-spacing": "proportional-nums",
        "font-variant-numeric": cssFontVariantNumericValue
      },
      ".tabular-nums": {
        "@defaults font-variant-numeric": {},
        "--tw-numeric-spacing": "tabular-nums",
        "font-variant-numeric": cssFontVariantNumericValue
      },
      ".diagonal-fractions": {
        "@defaults font-variant-numeric": {},
        "--tw-numeric-fraction": "diagonal-fractions",
        "font-variant-numeric": cssFontVariantNumericValue
      },
      ".stacked-fractions": {
        "@defaults font-variant-numeric": {},
        "--tw-numeric-fraction": "stacked-fractions",
        "font-variant-numeric": cssFontVariantNumericValue
      }
    });
  },
  lineHeight: (0, _createUtilityPlugin["default"])("lineHeight", [["leading", ["lineHeight"]]]),
  letterSpacing: (0, _createUtilityPlugin["default"])("letterSpacing", [["tracking", ["letterSpacing"]]], {
    supportsNegativeValues: true
  }),
  textColor: function textColor(_ref114) {
    var matchUtilities = _ref114.matchUtilities,
        theme = _ref114.theme,
        corePlugins = _ref114.corePlugins;
    matchUtilities({
      text: function text(value) {
        if (!corePlugins("textOpacity")) {
          return {
            color: (0, _toColorValue["default"])(value)
          };
        }

        return (0, _withAlphaVariable["default"])({
          color: value,
          property: "color",
          variable: "--tw-text-opacity"
        });
      }
    }, {
      values: (0, _flattenColorPalette["default"])(theme("textColor")),
      type: ["color", "any"]
    });
  },
  textOpacity: (0, _createUtilityPlugin["default"])("textOpacity", [["text-opacity", ["--tw-text-opacity"]]]),
  textDecoration: function textDecoration(_ref115) {
    var addUtilities = _ref115.addUtilities;
    addUtilities({
      ".underline": {
        "text-decoration-line": "underline"
      },
      ".overline": {
        "text-decoration-line": "overline"
      },
      ".line-through": {
        "text-decoration-line": "line-through"
      },
      ".no-underline": {
        "text-decoration-line": "none"
      }
    });
  },
  textDecorationColor: function textDecorationColor(_ref116) {
    var matchUtilities = _ref116.matchUtilities,
        theme = _ref116.theme;
    matchUtilities({
      decoration: function decoration(value) {
        return {
          "text-decoration-color": (0, _toColorValue["default"])(value)
        };
      }
    }, {
      values: (0, _flattenColorPalette["default"])(theme("textDecorationColor")),
      type: ["color", "any"]
    });
  },
  textDecorationStyle: function textDecorationStyle(_ref117) {
    var addUtilities = _ref117.addUtilities;
    addUtilities({
      ".decoration-solid": {
        "text-decoration-style": "solid"
      },
      ".decoration-double": {
        "text-decoration-style": "double"
      },
      ".decoration-dotted": {
        "text-decoration-style": "dotted"
      },
      ".decoration-dashed": {
        "text-decoration-style": "dashed"
      },
      ".decoration-wavy": {
        "text-decoration-style": "wavy"
      }
    });
  },
  textDecorationThickness: (0, _createUtilityPlugin["default"])("textDecorationThickness", [["decoration", ["text-decoration-thickness"]]], {
    type: ["length", "percentage"]
  }),
  textUnderlineOffset: (0, _createUtilityPlugin["default"])("textUnderlineOffset", [["underline-offset", ["text-underline-offset"]]], {
    type: ["length", "percentage", "any"]
  }),
  fontSmoothing: function fontSmoothing(_ref118) {
    var addUtilities = _ref118.addUtilities;
    addUtilities({
      ".antialiased": {
        "-webkit-font-smoothing": "antialiased",
        "-moz-osx-font-smoothing": "grayscale"
      },
      ".subpixel-antialiased": {
        "-webkit-font-smoothing": "auto",
        "-moz-osx-font-smoothing": "auto"
      }
    });
  },
  placeholderColor: function placeholderColor(_ref119) {
    var matchUtilities = _ref119.matchUtilities,
        theme = _ref119.theme,
        corePlugins = _ref119.corePlugins;
    matchUtilities({
      placeholder: function placeholder(value) {
        if (!corePlugins("placeholderOpacity")) {
          return {
            "&::placeholder": {
              color: (0, _toColorValue["default"])(value)
            }
          };
        }

        return {
          "&::placeholder": (0, _withAlphaVariable["default"])({
            color: value,
            property: "color",
            variable: "--tw-placeholder-opacity"
          })
        };
      }
    }, {
      values: (0, _flattenColorPalette["default"])(theme("placeholderColor")),
      type: ["color", "any"]
    });
  },
  placeholderOpacity: function placeholderOpacity(_ref120) {
    var matchUtilities = _ref120.matchUtilities,
        theme = _ref120.theme;
    matchUtilities({
      "placeholder-opacity": function placeholderOpacity(value) {
        return _defineProperty({}, "&::placeholder", {
          "--tw-placeholder-opacity": value
        });
      }
    }, {
      values: theme("placeholderOpacity")
    });
  },
  caretColor: function caretColor(_ref122) {
    var matchUtilities = _ref122.matchUtilities,
        theme = _ref122.theme;
    matchUtilities({
      caret: function caret(value) {
        return {
          "caret-color": (0, _toColorValue["default"])(value)
        };
      }
    }, {
      values: (0, _flattenColorPalette["default"])(theme("caretColor")),
      type: ["color", "any"]
    });
  },
  accentColor: function accentColor(_ref123) {
    var matchUtilities = _ref123.matchUtilities,
        theme = _ref123.theme;
    matchUtilities({
      accent: function accent(value) {
        return {
          "accent-color": (0, _toColorValue["default"])(value)
        };
      }
    }, {
      values: (0, _flattenColorPalette["default"])(theme("accentColor")),
      type: ["color", "any"]
    });
  },
  opacity: (0, _createUtilityPlugin["default"])("opacity", [["opacity", ["opacity"]]]),
  backgroundBlendMode: function backgroundBlendMode(_ref124) {
    var addUtilities = _ref124.addUtilities;
    addUtilities({
      ".bg-blend-normal": {
        "background-blend-mode": "normal"
      },
      ".bg-blend-multiply": {
        "background-blend-mode": "multiply"
      },
      ".bg-blend-screen": {
        "background-blend-mode": "screen"
      },
      ".bg-blend-overlay": {
        "background-blend-mode": "overlay"
      },
      ".bg-blend-darken": {
        "background-blend-mode": "darken"
      },
      ".bg-blend-lighten": {
        "background-blend-mode": "lighten"
      },
      ".bg-blend-color-dodge": {
        "background-blend-mode": "color-dodge"
      },
      ".bg-blend-color-burn": {
        "background-blend-mode": "color-burn"
      },
      ".bg-blend-hard-light": {
        "background-blend-mode": "hard-light"
      },
      ".bg-blend-soft-light": {
        "background-blend-mode": "soft-light"
      },
      ".bg-blend-difference": {
        "background-blend-mode": "difference"
      },
      ".bg-blend-exclusion": {
        "background-blend-mode": "exclusion"
      },
      ".bg-blend-hue": {
        "background-blend-mode": "hue"
      },
      ".bg-blend-saturation": {
        "background-blend-mode": "saturation"
      },
      ".bg-blend-color": {
        "background-blend-mode": "color"
      },
      ".bg-blend-luminosity": {
        "background-blend-mode": "luminosity"
      }
    });
  },
  mixBlendMode: function mixBlendMode(_ref125) {
    var addUtilities = _ref125.addUtilities;
    addUtilities({
      ".mix-blend-normal": {
        "mix-blend-mode": "normal"
      },
      ".mix-blend-multiply": {
        "mix-blend-mode": "multiply"
      },
      ".mix-blend-screen": {
        "mix-blend-mode": "screen"
      },
      ".mix-blend-overlay": {
        "mix-blend-mode": "overlay"
      },
      ".mix-blend-darken": {
        "mix-blend-mode": "darken"
      },
      ".mix-blend-lighten": {
        "mix-blend-mode": "lighten"
      },
      ".mix-blend-color-dodge": {
        "mix-blend-mode": "color-dodge"
      },
      ".mix-blend-color-burn": {
        "mix-blend-mode": "color-burn"
      },
      ".mix-blend-hard-light": {
        "mix-blend-mode": "hard-light"
      },
      ".mix-blend-soft-light": {
        "mix-blend-mode": "soft-light"
      },
      ".mix-blend-difference": {
        "mix-blend-mode": "difference"
      },
      ".mix-blend-exclusion": {
        "mix-blend-mode": "exclusion"
      },
      ".mix-blend-hue": {
        "mix-blend-mode": "hue"
      },
      ".mix-blend-saturation": {
        "mix-blend-mode": "saturation"
      },
      ".mix-blend-color": {
        "mix-blend-mode": "color"
      },
      ".mix-blend-luminosity": {
        "mix-blend-mode": "luminosity"
      },
      ".mix-blend-plus-lighter": {
        "mix-blend-mode": "plus-lighter"
      }
    });
  },
  boxShadow: function () {
    var transformValue = (0, _transformThemeValue["default"])("boxShadow");
    var defaultBoxShadow = ["var(--tw-ring-offset-shadow, 0 0 #0000)", "var(--tw-ring-shadow, 0 0 #0000)", "var(--tw-shadow)"].join(", ");
    return function (_ref126) {
      var matchUtilities = _ref126.matchUtilities,
          addDefaults = _ref126.addDefaults,
          theme = _ref126.theme;
      addDefaults(" box-shadow", {
        "--tw-ring-offset-shadow": "0 0 #0000",
        "--tw-ring-shadow": "0 0 #0000",
        "--tw-shadow": "0 0 #0000",
        "--tw-shadow-colored": "0 0 #0000"
      });
      matchUtilities({
        shadow: function shadow(value) {
          value = transformValue(value);
          var ast = (0, _parseBoxShadowValue.parseBoxShadowValue)(value);
          var _iteratorNormalCompletion8 = true;
          var _didIteratorError8 = false;
          var _iteratorError8 = undefined;

          try {
            for (var _iterator8 = ast[Symbol.iterator](), _step8; !(_iteratorNormalCompletion8 = (_step8 = _iterator8.next()).done); _iteratorNormalCompletion8 = true) {
              var shadow = _step8.value;

              // Don't override color if the whole shadow is a variable
              if (!shadow.valid) {
                continue;
              }

              shadow.color = "var(--tw-shadow-color)";
            }
          } catch (err) {
            _didIteratorError8 = true;
            _iteratorError8 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion8 && _iterator8["return"] != null) {
                _iterator8["return"]();
              }
            } finally {
              if (_didIteratorError8) {
                throw _iteratorError8;
              }
            }
          }

          return {
            "@defaults box-shadow": {},
            "--tw-shadow": value === "none" ? "0 0 #0000" : value,
            "--tw-shadow-colored": value === "none" ? "0 0 #0000" : (0, _parseBoxShadowValue.formatBoxShadowValue)(ast),
            "box-shadow": defaultBoxShadow
          };
        }
      }, {
        values: theme("boxShadow"),
        type: ["shadow"]
      });
    };
  }(),
  boxShadowColor: function boxShadowColor(_ref127) {
    var matchUtilities = _ref127.matchUtilities,
        theme = _ref127.theme;
    matchUtilities({
      shadow: function shadow(value) {
        return {
          "--tw-shadow-color": (0, _toColorValue["default"])(value),
          "--tw-shadow": "var(--tw-shadow-colored)"
        };
      }
    }, {
      values: (0, _flattenColorPalette["default"])(theme("boxShadowColor")),
      type: ["color", "any"]
    });
  },
  outlineStyle: function outlineStyle(_ref128) {
    var addUtilities = _ref128.addUtilities;
    addUtilities({
      ".outline-none": {
        outline: "2px solid transparent",
        "outline-offset": "2px"
      },
      ".outline": {
        "outline-style": "solid"
      },
      ".outline-dashed": {
        "outline-style": "dashed"
      },
      ".outline-dotted": {
        "outline-style": "dotted"
      },
      ".outline-double": {
        "outline-style": "double"
      }
    });
  },
  outlineWidth: (0, _createUtilityPlugin["default"])("outlineWidth", [["outline", ["outline-width"]]], {
    type: ["length", "number", "percentage"]
  }),
  outlineOffset: (0, _createUtilityPlugin["default"])("outlineOffset", [["outline-offset", ["outline-offset"]]], {
    type: ["length", "number", "percentage", "any"],
    supportsNegativeValues: true
  }),
  outlineColor: function outlineColor(_ref129) {
    var matchUtilities = _ref129.matchUtilities,
        theme = _ref129.theme;
    matchUtilities({
      outline: function outline(value) {
        return {
          "outline-color": (0, _toColorValue["default"])(value)
        };
      }
    }, {
      values: (0, _flattenColorPalette["default"])(theme("outlineColor")),
      type: ["color", "any"]
    });
  },
  ringWidth: function ringWidth(_ref130) {
    var matchUtilities = _ref130.matchUtilities,
        addDefaults = _ref130.addDefaults,
        addUtilities = _ref130.addUtilities,
        theme = _ref130.theme,
        config = _ref130.config;

    var ringColorDefault = function () {
      var _theme, _theme1;

      if ((0, _featureFlags.flagEnabled)(config(), "respectDefaultRingColorOpacity")) {
        return theme("ringColor.DEFAULT");
      }

      var ringOpacityDefault = theme("ringOpacity.DEFAULT", "0.5");

      if (!((_theme = theme("ringColor")) === null || _theme === void 0 ? void 0 : _theme.DEFAULT)) {
        return "rgb(147 197 253 / ".concat(ringOpacityDefault, ")");
      }

      return (0, _withAlphaVariable.withAlphaValue)((_theme1 = theme("ringColor")) === null || _theme1 === void 0 ? void 0 : _theme1.DEFAULT, ringOpacityDefault, "rgb(147 197 253 / ".concat(ringOpacityDefault, ")"));
    }();

    addDefaults("ring-width", {
      "--tw-ring-inset": " ",
      "--tw-ring-offset-width": theme("ringOffsetWidth.DEFAULT", "0px"),
      "--tw-ring-offset-color": theme("ringOffsetColor.DEFAULT", "#fff"),
      "--tw-ring-color": ringColorDefault,
      "--tw-ring-offset-shadow": "0 0 #0000",
      "--tw-ring-shadow": "0 0 #0000",
      "--tw-shadow": "0 0 #0000",
      "--tw-shadow-colored": "0 0 #0000"
    });
    matchUtilities({
      ring: function ring(value) {
        return {
          "@defaults ring-width": {},
          "--tw-ring-offset-shadow": "var(--tw-ring-inset) 0 0 0 var(--tw-ring-offset-width) var(--tw-ring-offset-color)",
          "--tw-ring-shadow": "var(--tw-ring-inset) 0 0 0 calc(".concat(value, " + var(--tw-ring-offset-width)) var(--tw-ring-color)"),
          "box-shadow": ["var(--tw-ring-offset-shadow)", "var(--tw-ring-shadow)", "var(--tw-shadow, 0 0 #0000)"].join(", ")
        };
      }
    }, {
      values: theme("ringWidth"),
      type: "length"
    });
    addUtilities({
      ".ring-inset": {
        "@defaults ring-width": {},
        "--tw-ring-inset": "inset"
      }
    });
  },
  ringColor: function ringColor(_ref131) {
    var matchUtilities = _ref131.matchUtilities,
        theme = _ref131.theme,
        corePlugins = _ref131.corePlugins;
    matchUtilities({
      ring: function ring(value) {
        if (!corePlugins("ringOpacity")) {
          return {
            "--tw-ring-color": (0, _toColorValue["default"])(value)
          };
        }

        return (0, _withAlphaVariable["default"])({
          color: value,
          property: "--tw-ring-color",
          variable: "--tw-ring-opacity"
        });
      }
    }, {
      values: Object.fromEntries(Object.entries((0, _flattenColorPalette["default"])(theme("ringColor"))).filter(function (_ref132) {
        var _ref133 = _slicedToArray(_ref132, 1),
            modifier = _ref133[0];

        return modifier !== "DEFAULT";
      })),
      type: ["color", "any"]
    });
  },
  ringOpacity: function ringOpacity(helpers) {
    var config = helpers.config;
    return (0, _createUtilityPlugin["default"])("ringOpacity", [["ring-opacity", ["--tw-ring-opacity"]]], {
      filterDefault: !(0, _featureFlags.flagEnabled)(config(), "respectDefaultRingColorOpacity")
    })(helpers);
  },
  ringOffsetWidth: (0, _createUtilityPlugin["default"])("ringOffsetWidth", [["ring-offset", ["--tw-ring-offset-width"]]], {
    type: "length"
  }),
  ringOffsetColor: function ringOffsetColor(_ref134) {
    var matchUtilities = _ref134.matchUtilities,
        theme = _ref134.theme;
    matchUtilities({
      "ring-offset": function ringOffset(value) {
        return {
          "--tw-ring-offset-color": (0, _toColorValue["default"])(value)
        };
      }
    }, {
      values: (0, _flattenColorPalette["default"])(theme("ringOffsetColor")),
      type: ["color", "any"]
    });
  },
  blur: function blur(_ref135) {
    var matchUtilities = _ref135.matchUtilities,
        theme = _ref135.theme;
    matchUtilities({
      blur: function blur(value) {
        return {
          "--tw-blur": "blur(".concat(value, ")"),
          "@defaults filter": {},
          filter: cssFilterValue
        };
      }
    }, {
      values: theme("blur")
    });
  },
  brightness: function brightness(_ref136) {
    var matchUtilities = _ref136.matchUtilities,
        theme = _ref136.theme;
    matchUtilities({
      brightness: function brightness(value) {
        return {
          "--tw-brightness": "brightness(".concat(value, ")"),
          "@defaults filter": {},
          filter: cssFilterValue
        };
      }
    }, {
      values: theme("brightness")
    });
  },
  contrast: function contrast(_ref137) {
    var matchUtilities = _ref137.matchUtilities,
        theme = _ref137.theme;
    matchUtilities({
      contrast: function contrast(value) {
        return {
          "--tw-contrast": "contrast(".concat(value, ")"),
          "@defaults filter": {},
          filter: cssFilterValue
        };
      }
    }, {
      values: theme("contrast")
    });
  },
  dropShadow: function dropShadow(_ref138) {
    var matchUtilities = _ref138.matchUtilities,
        theme = _ref138.theme;
    matchUtilities({
      "drop-shadow": function dropShadow(value) {
        return {
          "--tw-drop-shadow": Array.isArray(value) ? value.map(function (v) {
            return "drop-shadow(".concat(v, ")");
          }).join(" ") : "drop-shadow(".concat(value, ")"),
          "@defaults filter": {},
          filter: cssFilterValue
        };
      }
    }, {
      values: theme("dropShadow")
    });
  },
  grayscale: function grayscale(_ref139) {
    var matchUtilities = _ref139.matchUtilities,
        theme = _ref139.theme;
    matchUtilities({
      grayscale: function grayscale(value) {
        return {
          "--tw-grayscale": "grayscale(".concat(value, ")"),
          "@defaults filter": {},
          filter: cssFilterValue
        };
      }
    }, {
      values: theme("grayscale")
    });
  },
  hueRotate: function hueRotate(_ref140) {
    var matchUtilities = _ref140.matchUtilities,
        theme = _ref140.theme;
    matchUtilities({
      "hue-rotate": function hueRotate(value) {
        return {
          "--tw-hue-rotate": "hue-rotate(".concat(value, ")"),
          "@defaults filter": {},
          filter: cssFilterValue
        };
      }
    }, {
      values: theme("hueRotate"),
      supportsNegativeValues: true
    });
  },
  invert: function invert(_ref141) {
    var matchUtilities = _ref141.matchUtilities,
        theme = _ref141.theme;
    matchUtilities({
      invert: function invert(value) {
        return {
          "--tw-invert": "invert(".concat(value, ")"),
          "@defaults filter": {},
          filter: cssFilterValue
        };
      }
    }, {
      values: theme("invert")
    });
  },
  saturate: function saturate(_ref142) {
    var matchUtilities = _ref142.matchUtilities,
        theme = _ref142.theme;
    matchUtilities({
      saturate: function saturate(value) {
        return {
          "--tw-saturate": "saturate(".concat(value, ")"),
          "@defaults filter": {},
          filter: cssFilterValue
        };
      }
    }, {
      values: theme("saturate")
    });
  },
  sepia: function sepia(_ref143) {
    var matchUtilities = _ref143.matchUtilities,
        theme = _ref143.theme;
    matchUtilities({
      sepia: function sepia(value) {
        return {
          "--tw-sepia": "sepia(".concat(value, ")"),
          "@defaults filter": {},
          filter: cssFilterValue
        };
      }
    }, {
      values: theme("sepia")
    });
  },
  filter: function filter(_ref144) {
    var addDefaults = _ref144.addDefaults,
        addUtilities = _ref144.addUtilities;
    addDefaults("filter", {
      "--tw-blur": " ",
      "--tw-brightness": " ",
      "--tw-contrast": " ",
      "--tw-grayscale": " ",
      "--tw-hue-rotate": " ",
      "--tw-invert": " ",
      "--tw-saturate": " ",
      "--tw-sepia": " ",
      "--tw-drop-shadow": " "
    });
    addUtilities({
      ".filter": {
        "@defaults filter": {},
        filter: cssFilterValue
      },
      ".filter-none": {
        filter: "none"
      }
    });
  },
  backdropBlur: function backdropBlur(_ref145) {
    var matchUtilities = _ref145.matchUtilities,
        theme = _ref145.theme;
    matchUtilities({
      "backdrop-blur": function backdropBlur(value) {
        return {
          "--tw-backdrop-blur": "blur(".concat(value, ")"),
          "@defaults backdrop-filter": {},
          "backdrop-filter": cssBackdropFilterValue
        };
      }
    }, {
      values: theme("backdropBlur")
    });
  },
  backdropBrightness: function backdropBrightness(_ref146) {
    var matchUtilities = _ref146.matchUtilities,
        theme = _ref146.theme;
    matchUtilities({
      "backdrop-brightness": function backdropBrightness(value) {
        return {
          "--tw-backdrop-brightness": "brightness(".concat(value, ")"),
          "@defaults backdrop-filter": {},
          "backdrop-filter": cssBackdropFilterValue
        };
      }
    }, {
      values: theme("backdropBrightness")
    });
  },
  backdropContrast: function backdropContrast(_ref147) {
    var matchUtilities = _ref147.matchUtilities,
        theme = _ref147.theme;
    matchUtilities({
      "backdrop-contrast": function backdropContrast(value) {
        return {
          "--tw-backdrop-contrast": "contrast(".concat(value, ")"),
          "@defaults backdrop-filter": {},
          "backdrop-filter": cssBackdropFilterValue
        };
      }
    }, {
      values: theme("backdropContrast")
    });
  },
  backdropGrayscale: function backdropGrayscale(_ref148) {
    var matchUtilities = _ref148.matchUtilities,
        theme = _ref148.theme;
    matchUtilities({
      "backdrop-grayscale": function backdropGrayscale(value) {
        return {
          "--tw-backdrop-grayscale": "grayscale(".concat(value, ")"),
          "@defaults backdrop-filter": {},
          "backdrop-filter": cssBackdropFilterValue
        };
      }
    }, {
      values: theme("backdropGrayscale")
    });
  },
  backdropHueRotate: function backdropHueRotate(_ref149) {
    var matchUtilities = _ref149.matchUtilities,
        theme = _ref149.theme;
    matchUtilities({
      "backdrop-hue-rotate": function backdropHueRotate(value) {
        return {
          "--tw-backdrop-hue-rotate": "hue-rotate(".concat(value, ")"),
          "@defaults backdrop-filter": {},
          "backdrop-filter": cssBackdropFilterValue
        };
      }
    }, {
      values: theme("backdropHueRotate"),
      supportsNegativeValues: true
    });
  },
  backdropInvert: function backdropInvert(_ref150) {
    var matchUtilities = _ref150.matchUtilities,
        theme = _ref150.theme;
    matchUtilities({
      "backdrop-invert": function backdropInvert(value) {
        return {
          "--tw-backdrop-invert": "invert(".concat(value, ")"),
          "@defaults backdrop-filter": {},
          "backdrop-filter": cssBackdropFilterValue
        };
      }
    }, {
      values: theme("backdropInvert")
    });
  },
  backdropOpacity: function backdropOpacity(_ref151) {
    var matchUtilities = _ref151.matchUtilities,
        theme = _ref151.theme;
    matchUtilities({
      "backdrop-opacity": function backdropOpacity(value) {
        return {
          "--tw-backdrop-opacity": "opacity(".concat(value, ")"),
          "@defaults backdrop-filter": {},
          "backdrop-filter": cssBackdropFilterValue
        };
      }
    }, {
      values: theme("backdropOpacity")
    });
  },
  backdropSaturate: function backdropSaturate(_ref152) {
    var matchUtilities = _ref152.matchUtilities,
        theme = _ref152.theme;
    matchUtilities({
      "backdrop-saturate": function backdropSaturate(value) {
        return {
          "--tw-backdrop-saturate": "saturate(".concat(value, ")"),
          "@defaults backdrop-filter": {},
          "backdrop-filter": cssBackdropFilterValue
        };
      }
    }, {
      values: theme("backdropSaturate")
    });
  },
  backdropSepia: function backdropSepia(_ref153) {
    var matchUtilities = _ref153.matchUtilities,
        theme = _ref153.theme;
    matchUtilities({
      "backdrop-sepia": function backdropSepia(value) {
        return {
          "--tw-backdrop-sepia": "sepia(".concat(value, ")"),
          "@defaults backdrop-filter": {},
          "backdrop-filter": cssBackdropFilterValue
        };
      }
    }, {
      values: theme("backdropSepia")
    });
  },
  backdropFilter: function backdropFilter(_ref154) {
    var addDefaults = _ref154.addDefaults,
        addUtilities = _ref154.addUtilities;
    addDefaults("backdrop-filter", {
      "--tw-backdrop-blur": " ",
      "--tw-backdrop-brightness": " ",
      "--tw-backdrop-contrast": " ",
      "--tw-backdrop-grayscale": " ",
      "--tw-backdrop-hue-rotate": " ",
      "--tw-backdrop-invert": " ",
      "--tw-backdrop-opacity": " ",
      "--tw-backdrop-saturate": " ",
      "--tw-backdrop-sepia": " "
    });
    addUtilities({
      ".backdrop-filter": {
        "@defaults backdrop-filter": {},
        "backdrop-filter": cssBackdropFilterValue
      },
      ".backdrop-filter-none": {
        "backdrop-filter": "none"
      }
    });
  },
  transitionProperty: function transitionProperty(_ref155) {
    var matchUtilities = _ref155.matchUtilities,
        theme = _ref155.theme;
    var defaultTimingFunction = theme("transitionTimingFunction.DEFAULT");
    var defaultDuration = theme("transitionDuration.DEFAULT");
    matchUtilities({
      transition: function transition(value) {
        return _objectSpread({
          "transition-property": value
        }, value === "none" ? {} : {
          "transition-timing-function": defaultTimingFunction,
          "transition-duration": defaultDuration
        });
      }
    }, {
      values: theme("transitionProperty")
    });
  },
  transitionDelay: (0, _createUtilityPlugin["default"])("transitionDelay", [["delay", ["transitionDelay"]]]),
  transitionDuration: (0, _createUtilityPlugin["default"])("transitionDuration", [["duration", ["transitionDuration"]]], {
    filterDefault: true
  }),
  transitionTimingFunction: (0, _createUtilityPlugin["default"])("transitionTimingFunction", [["ease", ["transitionTimingFunction"]]], {
    filterDefault: true
  }),
  willChange: (0, _createUtilityPlugin["default"])("willChange", [["will-change", ["will-change"]]]),
  content: (0, _createUtilityPlugin["default"])("content", [["content", ["--tw-content", ["content", "var(--tw-content)"]]]])
};