"use strict";

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var _marked =
/*#__PURE__*/
regeneratorRuntime.mark(pathToRoot);

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function get() {
    return expandApplyAtRules;
  }
});

var _postcss =
/*#__PURE__*/
_interop_require_default(require("postcss"));

var _postcssselectorparser =
/*#__PURE__*/
_interop_require_default(require("postcss-selector-parser"));

var _generateRules = require("./generateRules");

var _escapeClassName =
/*#__PURE__*/
_interop_require_default(require("../util/escapeClassName"));

var _applyImportantSelector = require("../util/applyImportantSelector");

var _pseudoElements = require("../util/pseudoElements");

function _interop_require_default(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}
/** @typedef {Map<string, [any, import('postcss').Rule[]]>} ApplyCache */


function extractClasses(node) {
  /** @type {Map<string, Set<string>>} */
  var groups = new Map();

  var container = _postcss["default"].root({
    nodes: [node.clone()]
  });

  container.walkRules(function (rule) {
    (0, _postcssselectorparser["default"])(function (selectors) {
      selectors.walkClasses(function (classSelector) {
        var parentSelector = classSelector.parent.toString();
        var classes = groups.get(parentSelector);

        if (!classes) {
          groups.set(parentSelector, classes = new Set());
        }

        classes.add(classSelector.value);
      });
    }).processSync(rule.selector);
  });
  var normalizedGroups = Array.from(groups.values(), function (classes) {
    return Array.from(classes);
  });
  var classes = normalizedGroups.flat();
  return Object.assign(classes, {
    groups: normalizedGroups
  });
}

var selectorExtractor = (0, _postcssselectorparser["default"])();
/**
 * @param {string} ruleSelectors
 */

function extractSelectors(ruleSelectors) {
  return selectorExtractor.astSync(ruleSelectors);
}

function extractBaseCandidates(candidates, separator) {
  var baseClasses = new Set();
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = candidates[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var candidate = _step.value;
      baseClasses.add(candidate.split(separator).pop());
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator["return"] != null) {
        _iterator["return"]();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  return Array.from(baseClasses);
}

function prefix(context, selector) {
  var prefix = context.tailwindConfig.prefix;
  return typeof prefix === "function" ? prefix(selector) : prefix + selector;
}

function pathToRoot(node) {
  return regeneratorRuntime.wrap(function pathToRoot$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          _context.next = 2;
          return node;

        case 2:
          if (!node.parent) {
            _context.next = 8;
            break;
          }

          _context.next = 5;
          return node.parent;

        case 5:
          node = node.parent;
          _context.next = 2;
          break;

        case 8:
        case "end":
          return _context.stop();
      }
    }
  }, _marked);
}
/**
 * Only clone the node itself and not its children
 *
 * @param {*} node
 * @param {*} overrides
 * @returns
 */


function shallowClone(node) {
  var overrides = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var children = node.nodes;
  node.nodes = [];
  var tmp = node.clone(overrides);
  node.nodes = children;
  return tmp;
}
/**
 * Clone just the nodes all the way to the top that are required to represent
 * this singular rule in the tree.
 *
 * For example, if we have CSS like this:
 * ```css
 * @media (min-width: 768px) {
 *   @supports (display: grid) {
 *     .foo {
 *       display: grid;
 *       grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
 *     }
 *   }
 *
 *   @supports (backdrop-filter: blur(1px)) {
 *     .bar {
 *       backdrop-filter: blur(1px);
 *     }
 *   }
 *
 *   .baz {
 *     color: orange;
 *   }
 * }
 * ```
 *
 * And we're cloning `.bar` it'll return a cloned version of what's required for just that single node:
 *
 * ```css
 * @media (min-width: 768px) {
 *   @supports (backdrop-filter: blur(1px)) {
 *     .bar {
 *       backdrop-filter: blur(1px);
 *     }
 *   }
 * }
 * ```
 *
 * @param {import('postcss').Node} node
 */


function nestedClone(node) {
  var _iteratorNormalCompletion2 = true;
  var _didIteratorError2 = false;
  var _iteratorError2 = undefined;

  try {
    for (var _iterator2 = pathToRoot(node)[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
      var parent = _step2.value;

      if (node === parent) {
        continue;
      }

      if (parent.type === "root") {
        break;
      }

      node = shallowClone(parent, {
        nodes: [node]
      });
    }
  } catch (err) {
    _didIteratorError2 = true;
    _iteratorError2 = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
        _iterator2["return"]();
      }
    } finally {
      if (_didIteratorError2) {
        throw _iteratorError2;
      }
    }
  }

  return node;
}
/**
 * @param {import('postcss').Root} root
 */


function buildLocalApplyCache(root, context) {
  /** @type {ApplyCache} */
  var cache = new Map();
  root.walkRules(function (rule) {
    // Ignore rules generated by Tailwind
    var _iteratorNormalCompletion3 = true;
    var _didIteratorError3 = false;
    var _iteratorError3 = undefined;

    try {
      for (var _iterator3 = pathToRoot(rule)[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
        var node = _step3.value;

        var _node_raws_tailwind;

        if (((_node_raws_tailwind = node.raws.tailwind) === null || _node_raws_tailwind === void 0 ? void 0 : _node_raws_tailwind.layer) !== undefined) {
          return;
        }
      } // Clone what's required to represent this singular rule in the tree

    } catch (err) {
      _didIteratorError3 = true;
      _iteratorError3 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion3 && _iterator3["return"] != null) {
          _iterator3["return"]();
        }
      } finally {
        if (_didIteratorError3) {
          throw _iteratorError3;
        }
      }
    }

    var container = nestedClone(rule);
    var sort = context.offsets.create("user");
    var _iteratorNormalCompletion4 = true;
    var _didIteratorError4 = false;
    var _iteratorError4 = undefined;

    try {
      for (var _iterator4 = extractClasses(rule)[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
        var className = _step4.value;
        var list = cache.get(className) || [];
        cache.set(className, list);
        list.push([{
          layer: "user",
          sort: sort,
          important: false
        }, container]);
      }
    } catch (err) {
      _didIteratorError4 = true;
      _iteratorError4 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion4 && _iterator4["return"] != null) {
          _iterator4["return"]();
        }
      } finally {
        if (_didIteratorError4) {
          throw _iteratorError4;
        }
      }
    }
  });
  return cache;
}
/**
 * @returns {ApplyCache}
 */


function buildApplyCache(applyCandidates, context) {
  var _iteratorNormalCompletion5 = true;
  var _didIteratorError5 = false;
  var _iteratorError5 = undefined;

  try {
    for (var _iterator5 = applyCandidates[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
      var candidate = _step5.value;

      if (context.notClassCache.has(candidate) || context.applyClassCache.has(candidate)) {
        continue;
      }

      if (context.classCache.has(candidate)) {
        context.applyClassCache.set(candidate, context.classCache.get(candidate).map(function (_ref) {
          var _ref2 = _slicedToArray(_ref, 2),
              meta = _ref2[0],
              rule = _ref2[1];

          return [meta, rule.clone()];
        }));
        continue;
      }

      var matches = Array.from((0, _generateRules.resolveMatches)(candidate, context));

      if (matches.length === 0) {
        context.notClassCache.add(candidate);
        continue;
      }

      context.applyClassCache.set(candidate, matches);
    }
  } catch (err) {
    _didIteratorError5 = true;
    _iteratorError5 = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion5 && _iterator5["return"] != null) {
        _iterator5["return"]();
      }
    } finally {
      if (_didIteratorError5) {
        throw _iteratorError5;
      }
    }
  }

  return context.applyClassCache;
}
/**
 * Build a cache only when it's first used
 *
 * @param {() => ApplyCache} buildCacheFn
 * @returns {ApplyCache}
 */


function lazyCache(buildCacheFn) {
  var cache = null;
  return {
    get: function get(name) {
      cache = cache || buildCacheFn();
      return cache.get(name);
    },
    has: function has(name) {
      cache = cache || buildCacheFn();
      return cache.has(name);
    }
  };
}
/**
 * Take a series of multiple caches and merge
 * them so they act like one large cache
 *
 * @param {ApplyCache[]} caches
 * @returns {ApplyCache}
 */


function combineCaches(caches) {
  return {
    get: function get(name) {
      return caches.flatMap(function (cache) {
        return cache.get(name) || [];
      });
    },
    has: function has(name) {
      return caches.some(function (cache) {
        return cache.has(name);
      });
    }
  };
}

function extractApplyCandidates(params) {
  var candidates = params.split(/[\s\t\n]+/g);

  if (candidates[candidates.length - 1] === "!important") {
    return [candidates.slice(0, -1), true];
  }

  return [candidates, false];
}

function processApply(root, context, localCache) {
  var applyCandidates = new Set(); // Collect all @apply rules and candidates

  var applies = [];
  root.walkAtRules("apply", function (rule) {
    var _extractApplyCandidat = extractApplyCandidates(rule.params),
        _extractApplyCandidat2 = _slicedToArray(_extractApplyCandidat, 1),
        candidates = _extractApplyCandidat2[0];

    var _iteratorNormalCompletion6 = true;
    var _didIteratorError6 = false;
    var _iteratorError6 = undefined;

    try {
      for (var _iterator6 = candidates[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {
        var util = _step6.value;
        applyCandidates.add(util);
      }
    } catch (err) {
      _didIteratorError6 = true;
      _iteratorError6 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion6 && _iterator6["return"] != null) {
          _iterator6["return"]();
        }
      } finally {
        if (_didIteratorError6) {
          throw _iteratorError6;
        }
      }
    }

    applies.push(rule);
  }); // Start the @apply process if we have rules with @apply in them

  if (applies.length === 0) {
    return;
  } // Fill up some caches!


  var applyClassCache = combineCaches([localCache, buildApplyCache(applyCandidates, context)]);
  /**
  * When we have an apply like this:
  *
  * .abc {
  *    @apply hover:font-bold;
  * }
  *
  * What we essentially will do is resolve to this:
  *
  * .abc {
  *    @apply .hover\:font-bold:hover {
  *      font-weight: 500;
  *    }
  * }
  *
  * Notice that the to-be-applied class is `.hover\:font-bold:hover` and that the utility candidate was `hover:font-bold`.
  * What happens in this function is that we prepend a `.` and escape the candidate.
  * This will result in `.hover\:font-bold`
  * Which means that we can replace `.hover\:font-bold` with `.abc` in `.hover\:font-bold:hover` resulting in `.abc:hover`
  *
  * @param {string} selector
  * @param {string} utilitySelectors
  * @param {string} candidate
  */

  function replaceSelector(selector, utilitySelectors, candidate) {
    var selectorList = extractSelectors(selector);
    var utilitySelectorsList = extractSelectors(utilitySelectors);
    var candidateList = extractSelectors(".".concat((0, _escapeClassName["default"])(candidate)));
    var candidateClass = candidateList.nodes[0].nodes[0];
    selectorList.each(function (sel) {
      /** @type {Set<import('postcss-selector-parser').Selector>} */
      var replaced = new Set();
      utilitySelectorsList.each(function (utilitySelector) {
        var hasReplaced = false;
        utilitySelector = utilitySelector.clone();
        utilitySelector.walkClasses(function (node) {
          if (node.value !== candidateClass.value) {
            return;
          } // Don't replace multiple instances of the same class
          // This is theoretically correct but only partially
          // We'd need to generate every possible permutation of the replacement
          // For example with `.foo + .foo { … }` and `section { @apply foo; }`
          // We'd need to generate all of these:
          // - `.foo + .foo`
          // - `.foo + section`
          // - `section + .foo`
          // - `section + section`


          if (hasReplaced) {
            return;
          } // Since you can only `@apply` class names this is sufficient
          // We want to replace the matched class name with the selector the user is using
          // Ex: Replace `.text-blue-500` with `.foo.bar:is(.something-cool)`


          node.replaceWith.apply(node, _toConsumableArray(sel.nodes.map(function (node) {
            return node.clone();
          }))); // Record that we did something and we want to use this new selector

          replaced.add(utilitySelector);
          hasReplaced = true;
        });
      }); // Sort tag names before class names (but only sort each group (separated by a combinator)
      // separately and not in total)
      // This happens when replacing `.bar` in `.foo.bar` with a tag like `section`

      var _iteratorNormalCompletion7 = true;
      var _didIteratorError7 = false;
      var _iteratorError7 = undefined;

      try {
        for (var _iterator7 = replaced[Symbol.iterator](), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {
          var _sel = _step7.value;
          var groups = [[]];
          var _iteratorNormalCompletion8 = true;
          var _didIteratorError8 = false;
          var _iteratorError8 = undefined;

          try {
            for (var _iterator8 = _sel.nodes[Symbol.iterator](), _step8; !(_iteratorNormalCompletion8 = (_step8 = _iterator8.next()).done); _iteratorNormalCompletion8 = true) {
              var node = _step8.value;

              if (node.type === "combinator") {
                groups.push(node);
                groups.push([]);
              } else {
                var last = groups[groups.length - 1];
                last.push(node);
              }
            }
          } catch (err) {
            _didIteratorError8 = true;
            _iteratorError8 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion8 && _iterator8["return"] != null) {
                _iterator8["return"]();
              }
            } finally {
              if (_didIteratorError8) {
                throw _iteratorError8;
              }
            }
          }

          _sel.nodes = [];

          for (var _i2 = 0, _groups = groups; _i2 < _groups.length; _i2++) {
            var group = _groups[_i2];

            if (Array.isArray(group)) {
              group.sort(function (a, b) {
                if (a.type === "tag" && b.type === "class") {
                  return -1;
                } else if (a.type === "class" && b.type === "tag") {
                  return 1;
                } else if (a.type === "class" && b.type === "pseudo" && b.value.startsWith("::")) {
                  return -1;
                } else if (a.type === "pseudo" && a.value.startsWith("::") && b.type === "class") {
                  return 1;
                }

                return 0;
              });
            }

            _sel.nodes = _sel.nodes.concat(group);
          }
        }
      } catch (err) {
        _didIteratorError7 = true;
        _iteratorError7 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion7 && _iterator7["return"] != null) {
            _iterator7["return"]();
          }
        } finally {
          if (_didIteratorError7) {
            throw _iteratorError7;
          }
        }
      }

      sel.replaceWith.apply(sel, _toConsumableArray(replaced));
    });
    return selectorList.toString();
  }

  var perParentApplies = new Map(); // Collect all apply candidates and their rules

  for (var _i3 = 0, _applies = applies; _i3 < _applies.length; _i3++) {
    var apply = _applies[_i3];

    var _ref3 = perParentApplies.get(apply.parent) || [[], apply.source],
        _ref4 = _slicedToArray(_ref3, 1),
        candidates = _ref4[0];

    perParentApplies.set(apply.parent, [candidates, apply.source]);

    var _extractApplyCandidat3 = extractApplyCandidates(apply.params),
        _extractApplyCandidat4 = _slicedToArray(_extractApplyCandidat3, 2),
        _applyCandidates = _extractApplyCandidat4[0],
        important = _extractApplyCandidat4[1];

    if (apply.parent.type === "atrule") {
      if (apply.parent.name === "screen") {
        (function () {
          var screenType = apply.parent.params;
          throw apply.error("@apply is not supported within nested at-rules like @screen. We suggest you write this as @apply ".concat(_applyCandidates.map(function (c) {
            return "".concat(screenType, ":").concat(c);
          }).join(" "), " instead."));
        })();
      }

      throw apply.error("@apply is not supported within nested at-rules like @".concat(apply.parent.name, ". You can fix this by un-nesting @").concat(apply.parent.name, "."));
    }

    var _iteratorNormalCompletion10 = true;
    var _didIteratorError10 = false;
    var _iteratorError10 = undefined;

    try {
      for (var _iterator10 = _applyCandidates[Symbol.iterator](), _step10; !(_iteratorNormalCompletion10 = (_step10 = _iterator10.next()).done); _iteratorNormalCompletion10 = true) {
        var applyCandidate = _step10.value;

        if ([prefix(context, "group"), prefix(context, "peer")].includes(applyCandidate)) {
          // TODO: Link to specific documentation page with error code.
          throw apply.error("@apply should not be used with the '".concat(applyCandidate, "' utility"));
        }

        if (!applyClassCache.has(applyCandidate)) {
          throw apply.error("The `".concat(applyCandidate, "` class does not exist. If `").concat(applyCandidate, "` is a custom class, make sure it is defined within a `@layer` directive."));
        }

        var rules = applyClassCache.get(applyCandidate);
        candidates.push([applyCandidate, important, rules]);
      }
    } catch (err) {
      _didIteratorError10 = true;
      _iteratorError10 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion10 && _iterator10["return"] != null) {
          _iterator10["return"]();
        }
      } finally {
        if (_didIteratorError10) {
          throw _iteratorError10;
        }
      }
    }
  }

  var _iteratorNormalCompletion9 = true;
  var _didIteratorError9 = false;
  var _iteratorError9 = undefined;

  try {
    var _loop = function _loop() {
      var _step9$value = _slicedToArray(_step9.value, 2),
          parent = _step9$value[0],
          _step9$value$ = _slicedToArray(_step9$value[1], 2),
          candidates = _step9$value$[0],
          atApplySource = _step9$value$[1];

      var siblings = [];
      var _iteratorNormalCompletion11 = true;
      var _didIteratorError11 = false;
      var _iteratorError11 = undefined;

      try {
        var _loop2 = function _loop2() {
          var _step11$value = _slicedToArray(_step11.value, 3),
              applyCandidate = _step11$value[0],
              important = _step11$value[1],
              rules = _step11$value[2];

          var potentialApplyCandidates = [applyCandidate].concat(_toConsumableArray(extractBaseCandidates([applyCandidate], context.tailwindConfig.separator)));
          var _iteratorNormalCompletion12 = true;
          var _didIteratorError12 = false;
          var _iteratorError12 = undefined;

          try {
            var _loop3 = function _loop3() {
              var _step12$value = _slicedToArray(_step12.value, 2),
                  meta = _step12$value[0],
                  node = _step12$value[1];

              var parentClasses = extractClasses(parent);
              var nodeClasses = extractClasses(node); // When we encounter a rule like `.dark .a, .b { … }` we only want to be left with `[.dark, .a]` if the base applyCandidate is `.a` or with `[.b]` if the base applyCandidate is `.b`
              // So we've split them into groups

              nodeClasses = nodeClasses.groups.filter(function (classList) {
                return classList.some(function (className) {
                  return potentialApplyCandidates.includes(className);
                });
              }).flat(); // Add base utility classes from the @apply node to the list of
              // classes to check whether it intersects and therefore results in a
              // circular dependency or not.
              //
              // E.g.:
              // .foo {
              //   @apply hover:a; // This applies "a" but with a modifier
              // }
              //
              // We only have to do that with base classes of the `node`, not of the `parent`
              // E.g.:
              // .hover\:foo {
              //   @apply bar;
              // }
              // .bar {
              //   @apply foo;
              // }
              //
              // This should not result in a circular dependency because we are
              // just applying `.foo` and the rule above is `.hover\:foo` which is
              // unrelated. However, if we were to apply `hover:foo` then we _did_
              // have to include this one.

              nodeClasses = nodeClasses.concat(extractBaseCandidates(nodeClasses, context.tailwindConfig.separator));
              var intersects = parentClasses.some(function (selector) {
                return nodeClasses.includes(selector);
              });

              if (intersects) {
                throw node.error("You cannot `@apply` the `".concat(applyCandidate, "` utility here because it creates a circular dependency."));
              }

              var root = _postcss["default"].root({
                nodes: [node.clone()]
              }); // Make sure every node in the entire tree points back at the @apply rule that generated it


              root.walk(function (node) {
                node.source = atApplySource;
              });
              var canRewriteSelector = node.type !== "atrule" || node.type === "atrule" && node.name !== "keyframes";

              if (canRewriteSelector) {
                root.walkRules(function (rule) {
                  // Let's imagine you have the following structure:
                  //
                  // .foo {
                  //   @apply bar;
                  // }
                  //
                  // @supports (a: b) {
                  //   .bar {
                  //     color: blue
                  //   }
                  //
                  //   .something-unrelated {}
                  // }
                  //
                  // In this case we want to apply `.bar` but it happens to be in
                  // an atrule node. We clone that node instead of the nested one
                  // because we still want that @supports rule to be there once we
                  // applied everything.
                  //
                  // However it happens to be that the `.something-unrelated` is
                  // also in that same shared @supports atrule. This is not good,
                  // and this should not be there. The good part is that this is
                  // a clone already and it can be safely removed. The question is
                  // how do we know we can remove it. Basically what we can do is
                  // match it against the applyCandidate that you want to apply. If
                  // it doesn't match the we can safely delete it.
                  //
                  // If we didn't do this, then the `replaceSelector` function
                  // would have replaced this with something that didn't exist and
                  // therefore it removed the selector altogether. In this specific
                  // case it would result in `{}` instead of `.something-unrelated {}`
                  if (!extractClasses(rule).some(function (candidate) {
                    return candidate === applyCandidate;
                  })) {
                    rule.remove();
                    return;
                  } // Strip the important selector from the parent selector if at the beginning


                  var importantSelector = typeof context.tailwindConfig.important === "string" ? context.tailwindConfig.important : null; // We only want to move the "important" selector if this is a Tailwind-generated utility
                  // We do *not* want to do this for user CSS that happens to be structured the same

                  var isGenerated = parent.raws.tailwind !== undefined;
                  var parentSelector = isGenerated && importantSelector && parent.selector.indexOf(importantSelector) === 0 ? parent.selector.slice(importantSelector.length) : parent.selector; // If the selector becomes empty after replacing the important selector
                  // This means that it's the same as the parent selector and we don't want to replace it
                  // Otherwise we'll crash

                  if (parentSelector === "") {
                    parentSelector = parent.selector;
                  }

                  rule.selector = replaceSelector(parentSelector, rule.selector, applyCandidate); // And then re-add it if it was removed

                  if (importantSelector && parentSelector !== parent.selector) {
                    rule.selector = (0, _applyImportantSelector.applyImportantSelector)(rule.selector, importantSelector);
                  }

                  rule.walkDecls(function (d) {
                    d.important = meta.important || important;
                  }); // Move pseudo elements to the end of the selector (if necessary)

                  var selector = (0, _postcssselectorparser["default"])().astSync(rule.selector);
                  selector.each(function (sel) {
                    return (0, _pseudoElements.movePseudos)(sel);
                  });
                  rule.selector = selector.toString();
                });
              } // It could be that the node we were inserted was removed because the class didn't match
              // If that was the *only* rule in the parent, then we have nothing add so we skip it


              if (!root.nodes[0]) {
                return "continue";
              } // Insert it


              siblings.push([meta.sort, root.nodes[0]]);
            };

            for (var _iterator12 = rules[Symbol.iterator](), _step12; !(_iteratorNormalCompletion12 = (_step12 = _iterator12.next()).done); _iteratorNormalCompletion12 = true) {
              var _ret = _loop3();

              if (_ret === "continue") continue;
            }
          } catch (err) {
            _didIteratorError12 = true;
            _iteratorError12 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion12 && _iterator12["return"] != null) {
                _iterator12["return"]();
              }
            } finally {
              if (_didIteratorError12) {
                throw _iteratorError12;
              }
            }
          }
        };

        for (var _iterator11 = candidates[Symbol.iterator](), _step11; !(_iteratorNormalCompletion11 = (_step11 = _iterator11.next()).done); _iteratorNormalCompletion11 = true) {
          _loop2();
        } // Inject the rules, sorted, correctly

      } catch (err) {
        _didIteratorError11 = true;
        _iteratorError11 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion11 && _iterator11["return"] != null) {
            _iterator11["return"]();
          }
        } finally {
          if (_didIteratorError11) {
            throw _iteratorError11;
          }
        }
      }

      var nodes = context.offsets.sort(siblings).map(function (s) {
        return s[1];
      }); // `parent` refers to the node at `.abc` in: .abc { @apply mt-2 }

      parent.after(nodes);
    };

    for (var _iterator9 = perParentApplies[Symbol.iterator](), _step9; !(_iteratorNormalCompletion9 = (_step9 = _iterator9.next()).done); _iteratorNormalCompletion9 = true) {
      _loop();
    }
  } catch (err) {
    _didIteratorError9 = true;
    _iteratorError9 = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion9 && _iterator9["return"] != null) {
        _iterator9["return"]();
      }
    } finally {
      if (_didIteratorError9) {
        throw _iteratorError9;
      }
    }
  }

  for (var _i4 = 0, _applies2 = applies; _i4 < _applies2.length; _i4++) {
    var _apply = _applies2[_i4];

    // If there are left-over declarations, just remove the @apply
    if (_apply.parent.nodes.length > 1) {
      _apply.remove();
    } else {
      // The node is empty, drop the full node
      _apply.parent.remove();
    }
  } // Do it again, in case we have other `@apply` rules


  processApply(root, context, localCache);
}

function expandApplyAtRules(context) {
  return function (root) {
    // Build a cache of the user's CSS so we can use it to resolve classes used by @apply
    var localCache = lazyCache(function () {
      return buildLocalApplyCache(root, context);
    });
    processApply(root, context, localCache);
  };
}