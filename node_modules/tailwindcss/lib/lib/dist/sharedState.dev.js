"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

function _export(target, all) {
  for (var name in all) {
    Object.defineProperty(target, name, {
      enumerable: true,
      get: all[name]
    });
  }
}

_export(exports, {
  env: function env() {
    return _env;
  },
  contextMap: function contextMap() {
    return _contextMap;
  },
  configContextMap: function configContextMap() {
    return _configContextMap;
  },
  contextSourcesMap: function contextSourcesMap() {
    return _contextSourcesMap;
  },
  sourceHashMap: function sourceHashMap() {
    return _sourceHashMap;
  },
  NOT_ON_DEMAND: function NOT_ON_DEMAND() {
    return _NOT_ON_DEMAND;
  },
  NONE: function NONE() {
    return _NONE;
  },
  resolveDebug: function resolveDebug() {
    return _resolveDebug;
  }
});

var _packagejson =
/*#__PURE__*/
_interop_require_default(require("../../package.json"));

function _interop_require_default(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}

var _env = typeof process !== "undefined" ? {
  NODE_ENV: process.env.NODE_ENV,
  DEBUG: _resolveDebug(process.env.DEBUG),
  ENGINE: _packagejson["default"].tailwindcss.engine
} : {
  NODE_ENV: "production",
  DEBUG: false,
  ENGINE: _packagejson["default"].tailwindcss.engine
};

var _contextMap = new Map();

var _configContextMap = new Map();

var _contextSourcesMap = new Map();

var _sourceHashMap = new Map();

var _NOT_ON_DEMAND = new String("*");

var _NONE = Symbol("__NONE__");

function _resolveDebug(debug) {
  if (debug === undefined) {
    return false;
  } // Environment variables are strings, so convert to boolean


  if (debug === "true" || debug === "1") {
    return true;
  }

  if (debug === "false" || debug === "0") {
    return false;
  } // Keep the debug convention into account:
  // DEBUG=* -> This enables all debug modes
  // DEBUG=projectA,projectB,projectC -> This enables debug for projectA, projectB and projectC
  // DEBUG=projectA:* -> This enables all debug modes for projectA (if you have sub-types)
  // DEBUG=projectA,-projectB -> This enables debug for projectA and explicitly disables it for projectB


  if (debug === "*") {
    return true;
  }

  var debuggers = debug.split(",").map(function (d) {
    return d.split(":")[0];
  }); // Ignoring tailwindcss

  if (debuggers.includes("-tailwindcss")) {
    return false;
  } // Including tailwindcss


  if (debuggers.includes("tailwindcss")) {
    return true;
  }

  return false;
}