// @ts-check
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "init", {
  enumerable: true,
  get: function get() {
    return init;
  }
});

var _fs =
/*#__PURE__*/
_interop_require_default(require("fs"));

var _path =
/*#__PURE__*/
_interop_require_default(require("path"));

function _interop_require_default(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}

function isESM() {
  var pkgPath = _path["default"].resolve("./package.json");

  try {
    var pkg = JSON.parse(_fs["default"].readFileSync(pkgPath, "utf8"));
    return pkg.type && pkg.type === "module";
  } catch (err) {
    return false;
  }
}

function init(args) {
  var messages = [];
  var isProjectESM = args["--ts"] || args["--esm"] || isESM();
  var syntax = args["--ts"] ? "ts" : isProjectESM ? "js" : "cjs";
  var extension = args["--ts"] ? "ts" : "js";

  var _args___;

  var tailwindConfigLocation = _path["default"].resolve((_args___ = args["_"][1]) !== null && _args___ !== void 0 ? _args___ : "./tailwind.config.".concat(extension));

  if (_fs["default"].existsSync(tailwindConfigLocation)) {
    messages.push("".concat(_path["default"].basename(tailwindConfigLocation), " already exists."));
  } else {
    var stubContentsFile = _fs["default"].readFileSync(args["--full"] ? _path["default"].resolve(__dirname, "../../../stubs/config.full.js") : _path["default"].resolve(__dirname, "../../../stubs/config.simple.js"), "utf8");

    var stubFile = _fs["default"].readFileSync(_path["default"].resolve(__dirname, "../../../stubs/tailwind.config.".concat(syntax)), "utf8"); // Change colors import


    stubContentsFile = stubContentsFile.replace("../colors", "tailwindcss/colors"); // Replace contents of {ts,js,cjs} file with the stub {simple,full}.

    stubFile = stubFile.replace("__CONFIG__", stubContentsFile.replace("module.exports =", "").trim()).trim() + "\n\n";

    _fs["default"].writeFileSync(tailwindConfigLocation, stubFile, "utf8");

    messages.push("Created Tailwind CSS config file: ".concat(_path["default"].basename(tailwindConfigLocation)));
  }

  if (args["--postcss"]) {
    var postcssConfigLocation = _path["default"].resolve("./postcss.config.js");

    if (_fs["default"].existsSync(postcssConfigLocation)) {
      messages.push("".concat(_path["default"].basename(postcssConfigLocation), " already exists."));
    } else {
      var _stubFile = _fs["default"].readFileSync(isProjectESM ? _path["default"].resolve(__dirname, "../../../stubs/postcss.config.js") : _path["default"].resolve(__dirname, "../../../stubs/postcss.config.cjs"), "utf8");

      _fs["default"].writeFileSync(postcssConfigLocation, _stubFile, "utf8");

      messages.push("Created PostCSS config file: ".concat(_path["default"].basename(postcssConfigLocation)));
    }
  }

  if (messages.length > 0) {
    console.log();
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = messages[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        var message = _step.value;
        console.log(message);
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator["return"] != null) {
          _iterator["return"]();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }
  }
}