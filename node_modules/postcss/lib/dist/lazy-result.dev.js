'use strict';

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var _require = require('./symbols'),
    isClean = _require.isClean,
    my = _require.my;

var MapGenerator = require('./map-generator');

var _stringify = require('./stringify');

var Container = require('./container');

var Document = require('./document');

var warnOnce = require('./warn-once');

var Result = require('./result');

var parse = require('./parse');

var Root = require('./root');

var TYPE_TO_CLASS_NAME = {
  atrule: 'AtRule',
  comment: 'Comment',
  decl: 'Declaration',
  document: 'Document',
  root: 'Root',
  rule: 'Rule'
};
var PLUGIN_PROPS = {
  AtRule: true,
  AtRuleExit: true,
  Comment: true,
  CommentExit: true,
  Declaration: true,
  DeclarationExit: true,
  Document: true,
  DocumentExit: true,
  Once: true,
  OnceExit: true,
  postcssPlugin: true,
  prepare: true,
  Root: true,
  RootExit: true,
  Rule: true,
  RuleExit: true
};
var NOT_VISITORS = {
  Once: true,
  postcssPlugin: true,
  prepare: true
};
var CHILDREN = 0;

function isPromise(obj) {
  return _typeof(obj) === 'object' && typeof obj.then === 'function';
}

function getEvents(node) {
  var key = false;
  var type = TYPE_TO_CLASS_NAME[node.type];

  if (node.type === 'decl') {
    key = node.prop.toLowerCase();
  } else if (node.type === 'atrule') {
    key = node.name.toLowerCase();
  }

  if (key && node.append) {
    return [type, type + '-' + key, CHILDREN, type + 'Exit', type + 'Exit-' + key];
  } else if (key) {
    return [type, type + '-' + key, type + 'Exit', type + 'Exit-' + key];
  } else if (node.append) {
    return [type, CHILDREN, type + 'Exit'];
  } else {
    return [type, type + 'Exit'];
  }
}

function toStack(node) {
  var events;

  if (node.type === 'document') {
    events = ['Document', CHILDREN, 'DocumentExit'];
  } else if (node.type === 'root') {
    events = ['Root', CHILDREN, 'RootExit'];
  } else {
    events = getEvents(node);
  }

  return {
    eventIndex: 0,
    events: events,
    iterator: 0,
    node: node,
    visitorIndex: 0,
    visitors: []
  };
}

function cleanMarks(node) {
  node[isClean] = false;
  if (node.nodes) node.nodes.forEach(function (i) {
    return cleanMarks(i);
  });
  return node;
}

var postcss = {};

var LazyResult =
/*#__PURE__*/
function () {
  function LazyResult(processor, css, opts) {
    var _this = this;

    _classCallCheck(this, LazyResult);

    this.stringified = false;
    this.processed = false;
    var root;

    if (_typeof(css) === 'object' && css !== null && (css.type === 'root' || css.type === 'document')) {
      root = cleanMarks(css);
    } else if (css instanceof LazyResult || css instanceof Result) {
      root = cleanMarks(css.root);

      if (css.map) {
        if (typeof opts.map === 'undefined') opts.map = {};
        if (!opts.map.inline) opts.map.inline = false;
        opts.map.prev = css.map;
      }
    } else {
      var parser = parse;
      if (opts.syntax) parser = opts.syntax.parse;
      if (opts.parser) parser = opts.parser;
      if (parser.parse) parser = parser.parse;

      try {
        root = parser(css, opts);
      } catch (error) {
        this.processed = true;
        this.error = error;
      }

      if (root && !root[my]) {
        /* c8 ignore next 2 */
        Container.rebuild(root);
      }
    }

    this.result = new Result(processor, root, opts);
    this.helpers = _objectSpread({}, postcss, {
      postcss: postcss,
      result: this.result
    });
    this.plugins = this.processor.plugins.map(function (plugin) {
      if (_typeof(plugin) === 'object' && plugin.prepare) {
        return _objectSpread({}, plugin, {}, plugin.prepare(_this.result));
      } else {
        return plugin;
      }
    });
  }

  _createClass(LazyResult, [{
    key: "async",
    value: function async() {
      if (this.error) return Promise.reject(this.error);
      if (this.processed) return Promise.resolve(this.result);

      if (!this.processing) {
        this.processing = this.runAsync();
      }

      return this.processing;
    }
  }, {
    key: "catch",
    value: function _catch(onRejected) {
      return this.async()["catch"](onRejected);
    }
  }, {
    key: "finally",
    value: function _finally(onFinally) {
      return this.async().then(onFinally, onFinally);
    }
  }, {
    key: "getAsyncError",
    value: function getAsyncError() {
      throw new Error('Use process(css).then(cb) to work with async plugins');
    }
  }, {
    key: "handleError",
    value: function handleError(error, node) {
      var plugin = this.result.lastPlugin;

      try {
        if (node) node.addToError(error);
        this.error = error;

        if (error.name === 'CssSyntaxError' && !error.plugin) {
          error.plugin = plugin.postcssPlugin;
          error.setMessage();
        } else if (plugin.postcssVersion) {
          if (process.env.NODE_ENV !== 'production') {
            var pluginName = plugin.postcssPlugin;
            var pluginVer = plugin.postcssVersion;
            var runtimeVer = this.result.processor.version;
            var a = pluginVer.split('.');
            var b = runtimeVer.split('.');

            if (a[0] !== b[0] || parseInt(a[1]) > parseInt(b[1])) {
              // eslint-disable-next-line no-console
              console.error('Unknown error from PostCSS plugin. Your current PostCSS ' + 'version is ' + runtimeVer + ', but ' + pluginName + ' uses ' + pluginVer + '. Perhaps this is the source of the error below.');
            }
          }
        }
      } catch (err) {
        /* c8 ignore next 3 */
        // eslint-disable-next-line no-console
        if (console && console.error) console.error(err);
      }

      return error;
    }
  }, {
    key: "prepareVisitors",
    value: function prepareVisitors() {
      var _this2 = this;

      this.listeners = {};

      var add = function add(plugin, type, cb) {
        if (!_this2.listeners[type]) _this2.listeners[type] = [];

        _this2.listeners[type].push([plugin, cb]);
      };

      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = this.plugins[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var plugin = _step.value;

          if (_typeof(plugin) === 'object') {
            for (var event in plugin) {
              if (!PLUGIN_PROPS[event] && /^[A-Z]/.test(event)) {
                throw new Error("Unknown event ".concat(event, " in ").concat(plugin.postcssPlugin, ". ") + "Try to update PostCSS (".concat(this.processor.version, " now)."));
              }

              if (!NOT_VISITORS[event]) {
                if (_typeof(plugin[event]) === 'object') {
                  for (var filter in plugin[event]) {
                    if (filter === '*') {
                      add(plugin, event, plugin[event][filter]);
                    } else {
                      add(plugin, event + '-' + filter.toLowerCase(), plugin[event][filter]);
                    }
                  }
                } else if (typeof plugin[event] === 'function') {
                  add(plugin, event, plugin[event]);
                }
              }
            }
          }
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator["return"] != null) {
            _iterator["return"]();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      this.hasListener = Object.keys(this.listeners).length > 0;
    }
  }, {
    key: "runAsync",
    value: function runAsync() {
      var _this3 = this;

      var i, plugin, promise, root, stack, _promise, node, _iteratorNormalCompletion2, _didIteratorError2, _iteratorError2, _loop, _iterator2, _step2;

      return regeneratorRuntime.async(function runAsync$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              this.plugin = 0;
              i = 0;

            case 2:
              if (!(i < this.plugins.length)) {
                _context2.next = 17;
                break;
              }

              plugin = this.plugins[i];
              promise = this.runOnRoot(plugin);

              if (!isPromise(promise)) {
                _context2.next = 14;
                break;
              }

              _context2.prev = 6;
              _context2.next = 9;
              return regeneratorRuntime.awrap(promise);

            case 9:
              _context2.next = 14;
              break;

            case 11:
              _context2.prev = 11;
              _context2.t0 = _context2["catch"](6);
              throw this.handleError(_context2.t0);

            case 14:
              i++;
              _context2.next = 2;
              break;

            case 17:
              this.prepareVisitors();

              if (!this.hasListener) {
                _context2.next = 66;
                break;
              }

              root = this.result.root;

            case 20:
              if (root[isClean]) {
                _context2.next = 39;
                break;
              }

              root[isClean] = true;
              stack = [toStack(root)];

            case 23:
              if (!(stack.length > 0)) {
                _context2.next = 37;
                break;
              }

              _promise = this.visitTick(stack);

              if (!isPromise(_promise)) {
                _context2.next = 35;
                break;
              }

              _context2.prev = 26;
              _context2.next = 29;
              return regeneratorRuntime.awrap(_promise);

            case 29:
              _context2.next = 35;
              break;

            case 31:
              _context2.prev = 31;
              _context2.t1 = _context2["catch"](26);
              node = stack[stack.length - 1].node;
              throw this.handleError(_context2.t1, node);

            case 35:
              _context2.next = 23;
              break;

            case 37:
              _context2.next = 20;
              break;

            case 39:
              if (!this.listeners.OnceExit) {
                _context2.next = 66;
                break;
              }

              _iteratorNormalCompletion2 = true;
              _didIteratorError2 = false;
              _iteratorError2 = undefined;
              _context2.prev = 43;

              _loop = function _loop() {
                var _step2$value, plugin, visitor, roots;

                return regeneratorRuntime.async(function _loop$(_context) {
                  while (1) {
                    switch (_context.prev = _context.next) {
                      case 0:
                        _step2$value = _slicedToArray(_step2.value, 2), plugin = _step2$value[0], visitor = _step2$value[1];
                        _this3.result.lastPlugin = plugin;
                        _context.prev = 2;

                        if (!(root.type === 'document')) {
                          _context.next = 9;
                          break;
                        }

                        roots = root.nodes.map(function (subRoot) {
                          return visitor(subRoot, _this3.helpers);
                        });
                        _context.next = 7;
                        return regeneratorRuntime.awrap(Promise.all(roots));

                      case 7:
                        _context.next = 11;
                        break;

                      case 9:
                        _context.next = 11;
                        return regeneratorRuntime.awrap(visitor(root, _this3.helpers));

                      case 11:
                        _context.next = 16;
                        break;

                      case 13:
                        _context.prev = 13;
                        _context.t0 = _context["catch"](2);
                        throw _this3.handleError(_context.t0);

                      case 16:
                      case "end":
                        return _context.stop();
                    }
                  }
                }, null, null, [[2, 13]]);
              };

              _iterator2 = this.listeners.OnceExit[Symbol.iterator]();

            case 46:
              if (_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done) {
                _context2.next = 52;
                break;
              }

              _context2.next = 49;
              return regeneratorRuntime.awrap(_loop());

            case 49:
              _iteratorNormalCompletion2 = true;
              _context2.next = 46;
              break;

            case 52:
              _context2.next = 58;
              break;

            case 54:
              _context2.prev = 54;
              _context2.t2 = _context2["catch"](43);
              _didIteratorError2 = true;
              _iteratorError2 = _context2.t2;

            case 58:
              _context2.prev = 58;
              _context2.prev = 59;

              if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
                _iterator2["return"]();
              }

            case 61:
              _context2.prev = 61;

              if (!_didIteratorError2) {
                _context2.next = 64;
                break;
              }

              throw _iteratorError2;

            case 64:
              return _context2.finish(61);

            case 65:
              return _context2.finish(58);

            case 66:
              this.processed = true;
              return _context2.abrupt("return", this.stringify());

            case 68:
            case "end":
              return _context2.stop();
          }
        }
      }, null, this, [[6, 11], [26, 31], [43, 54, 58, 66], [59,, 61, 65]]);
    }
  }, {
    key: "runOnRoot",
    value: function runOnRoot(plugin) {
      var _this4 = this;

      this.result.lastPlugin = plugin;

      try {
        if (_typeof(plugin) === 'object' && plugin.Once) {
          if (this.result.root.type === 'document') {
            var roots = this.result.root.nodes.map(function (root) {
              return plugin.Once(root, _this4.helpers);
            });

            if (isPromise(roots[0])) {
              return Promise.all(roots);
            }

            return roots;
          }

          return plugin.Once(this.result.root, this.helpers);
        } else if (typeof plugin === 'function') {
          return plugin(this.result.root, this.result);
        }
      } catch (error) {
        throw this.handleError(error);
      }
    }
  }, {
    key: "stringify",
    value: function stringify() {
      if (this.error) throw this.error;
      if (this.stringified) return this.result;
      this.stringified = true;
      this.sync();
      var opts = this.result.opts;
      var str = _stringify;
      if (opts.syntax) str = opts.syntax.stringify;
      if (opts.stringifier) str = opts.stringifier;
      if (str.stringify) str = str.stringify;
      var map = new MapGenerator(str, this.result.root, this.result.opts);
      var data = map.generate();
      this.result.css = data[0];
      this.result.map = data[1];
      return this.result;
    }
  }, {
    key: "sync",
    value: function sync() {
      if (this.error) throw this.error;
      if (this.processed) return this.result;
      this.processed = true;

      if (this.processing) {
        throw this.getAsyncError();
      }

      var _iteratorNormalCompletion3 = true;
      var _didIteratorError3 = false;
      var _iteratorError3 = undefined;

      try {
        for (var _iterator3 = this.plugins[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
          var plugin = _step3.value;
          var promise = this.runOnRoot(plugin);

          if (isPromise(promise)) {
            throw this.getAsyncError();
          }
        }
      } catch (err) {
        _didIteratorError3 = true;
        _iteratorError3 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion3 && _iterator3["return"] != null) {
            _iterator3["return"]();
          }
        } finally {
          if (_didIteratorError3) {
            throw _iteratorError3;
          }
        }
      }

      this.prepareVisitors();

      if (this.hasListener) {
        var _root = this.result.root;

        while (!_root[isClean]) {
          _root[isClean] = true;
          this.walkSync(_root);
        }

        if (this.listeners.OnceExit) {
          if (_root.type === 'document') {
            var _iteratorNormalCompletion4 = true;
            var _didIteratorError4 = false;
            var _iteratorError4 = undefined;

            try {
              for (var _iterator4 = _root.nodes[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
                var subRoot = _step4.value;
                this.visitSync(this.listeners.OnceExit, subRoot);
              }
            } catch (err) {
              _didIteratorError4 = true;
              _iteratorError4 = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion4 && _iterator4["return"] != null) {
                  _iterator4["return"]();
                }
              } finally {
                if (_didIteratorError4) {
                  throw _iteratorError4;
                }
              }
            }
          } else {
            this.visitSync(this.listeners.OnceExit, _root);
          }
        }
      }

      return this.result;
    }
  }, {
    key: "then",
    value: function then(onFulfilled, onRejected) {
      if (process.env.NODE_ENV !== 'production') {
        if (!('from' in this.opts)) {
          warnOnce('Without `from` option PostCSS could generate wrong source map ' + 'and will not find Browserslist config. Set it to CSS file path ' + 'or to `undefined` to prevent this warning.');
        }
      }

      return this.async().then(onFulfilled, onRejected);
    }
  }, {
    key: "toString",
    value: function toString() {
      return this.css;
    }
  }, {
    key: "visitSync",
    value: function visitSync(visitors, node) {
      var _iteratorNormalCompletion5 = true;
      var _didIteratorError5 = false;
      var _iteratorError5 = undefined;

      try {
        for (var _iterator5 = visitors[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
          var _step5$value = _slicedToArray(_step5.value, 2),
              plugin = _step5$value[0],
              visitor = _step5$value[1];

          this.result.lastPlugin = plugin;
          var promise = void 0;

          try {
            promise = visitor(node, this.helpers);
          } catch (e) {
            throw this.handleError(e, node.proxyOf);
          }

          if (node.type !== 'root' && node.type !== 'document' && !node.parent) {
            return true;
          }

          if (isPromise(promise)) {
            throw this.getAsyncError();
          }
        }
      } catch (err) {
        _didIteratorError5 = true;
        _iteratorError5 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion5 && _iterator5["return"] != null) {
            _iterator5["return"]();
          }
        } finally {
          if (_didIteratorError5) {
            throw _iteratorError5;
          }
        }
      }
    }
  }, {
    key: "visitTick",
    value: function visitTick(stack) {
      var visit = stack[stack.length - 1];
      var node = visit.node,
          visitors = visit.visitors;

      if (node.type !== 'root' && node.type !== 'document' && !node.parent) {
        stack.pop();
        return;
      }

      if (visitors.length > 0 && visit.visitorIndex < visitors.length) {
        var _visitors$visit$visit = _slicedToArray(visitors[visit.visitorIndex], 2),
            plugin = _visitors$visit$visit[0],
            visitor = _visitors$visit$visit[1];

        visit.visitorIndex += 1;

        if (visit.visitorIndex === visitors.length) {
          visit.visitors = [];
          visit.visitorIndex = 0;
        }

        this.result.lastPlugin = plugin;

        try {
          return visitor(node.toProxy(), this.helpers);
        } catch (e) {
          throw this.handleError(e, node);
        }
      }

      if (visit.iterator !== 0) {
        var iterator = visit.iterator;
        var child;

        while (child = node.nodes[node.indexes[iterator]]) {
          node.indexes[iterator] += 1;

          if (!child[isClean]) {
            child[isClean] = true;
            stack.push(toStack(child));
            return;
          }
        }

        visit.iterator = 0;
        delete node.indexes[iterator];
      }

      var events = visit.events;

      while (visit.eventIndex < events.length) {
        var event = events[visit.eventIndex];
        visit.eventIndex += 1;

        if (event === CHILDREN) {
          if (node.nodes && node.nodes.length) {
            node[isClean] = true;
            visit.iterator = node.getIterator();
          }

          return;
        } else if (this.listeners[event]) {
          visit.visitors = this.listeners[event];
          return;
        }
      }

      stack.pop();
    }
  }, {
    key: "walkSync",
    value: function walkSync(node) {
      var _this5 = this;

      node[isClean] = true;
      var events = getEvents(node);
      var _iteratorNormalCompletion6 = true;
      var _didIteratorError6 = false;
      var _iteratorError6 = undefined;

      try {
        for (var _iterator6 = events[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {
          var event = _step6.value;

          if (event === CHILDREN) {
            if (node.nodes) {
              node.each(function (child) {
                if (!child[isClean]) _this5.walkSync(child);
              });
            }
          } else {
            var visitors = this.listeners[event];

            if (visitors) {
              if (this.visitSync(visitors, node.toProxy())) return;
            }
          }
        }
      } catch (err) {
        _didIteratorError6 = true;
        _iteratorError6 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion6 && _iterator6["return"] != null) {
            _iterator6["return"]();
          }
        } finally {
          if (_didIteratorError6) {
            throw _iteratorError6;
          }
        }
      }
    }
  }, {
    key: "warnings",
    value: function warnings() {
      return this.sync().warnings();
    }
  }, {
    key: "content",
    get: function get() {
      return this.stringify().content;
    }
  }, {
    key: "css",
    get: function get() {
      return this.stringify().css;
    }
  }, {
    key: "map",
    get: function get() {
      return this.stringify().map;
    }
  }, {
    key: "messages",
    get: function get() {
      return this.sync().messages;
    }
  }, {
    key: "opts",
    get: function get() {
      return this.result.opts;
    }
  }, {
    key: "processor",
    get: function get() {
      return this.result.processor;
    }
  }, {
    key: "root",
    get: function get() {
      return this.sync().root;
    }
  }, {
    key: Symbol.toStringTag,
    get: function get() {
      return 'LazyResult';
    }
  }]);

  return LazyResult;
}();

LazyResult.registerPostcss = function (dependant) {
  postcss = dependant;
};

module.exports = LazyResult;
LazyResult["default"] = LazyResult;
Root.registerLazyResult(LazyResult);
Document.registerLazyResult(LazyResult);