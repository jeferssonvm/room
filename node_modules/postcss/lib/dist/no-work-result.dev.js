'use strict';

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var MapGenerator = require('./map-generator');

var stringify = require('./stringify');

var warnOnce = require('./warn-once');

var parse = require('./parse');

var Result = require('./result');

var NoWorkResult =
/*#__PURE__*/
function () {
  function NoWorkResult(processor, css, opts) {
    _classCallCheck(this, NoWorkResult);

    css = css.toString();
    this.stringified = false;
    this._processor = processor;
    this._css = css;
    this._opts = opts;
    this._map = undefined;
    var root;
    var str = stringify;
    this.result = new Result(this._processor, root, this._opts);
    this.result.css = css;
    var self = this;
    Object.defineProperty(this.result, 'root', {
      get: function get() {
        return self.root;
      }
    });
    var map = new MapGenerator(str, root, this._opts, css);

    if (map.isMap()) {
      var _map$generate = map.generate(),
          _map$generate2 = _slicedToArray(_map$generate, 2),
          generatedCSS = _map$generate2[0],
          generatedMap = _map$generate2[1];

      if (generatedCSS) {
        this.result.css = generatedCSS;
      }

      if (generatedMap) {
        this.result.map = generatedMap;
      }
    }
  }

  _createClass(NoWorkResult, [{
    key: "async",
    value: function async() {
      if (this.error) return Promise.reject(this.error);
      return Promise.resolve(this.result);
    }
  }, {
    key: "catch",
    value: function _catch(onRejected) {
      return this.async()["catch"](onRejected);
    }
  }, {
    key: "finally",
    value: function _finally(onFinally) {
      return this.async().then(onFinally, onFinally);
    }
  }, {
    key: "sync",
    value: function sync() {
      if (this.error) throw this.error;
      return this.result;
    }
  }, {
    key: "then",
    value: function then(onFulfilled, onRejected) {
      if (process.env.NODE_ENV !== 'production') {
        if (!('from' in this._opts)) {
          warnOnce('Without `from` option PostCSS could generate wrong source map ' + 'and will not find Browserslist config. Set it to CSS file path ' + 'or to `undefined` to prevent this warning.');
        }
      }

      return this.async().then(onFulfilled, onRejected);
    }
  }, {
    key: "toString",
    value: function toString() {
      return this._css;
    }
  }, {
    key: "warnings",
    value: function warnings() {
      return [];
    }
  }, {
    key: "content",
    get: function get() {
      return this.result.css;
    }
  }, {
    key: "css",
    get: function get() {
      return this.result.css;
    }
  }, {
    key: "map",
    get: function get() {
      return this.result.map;
    }
  }, {
    key: "messages",
    get: function get() {
      return [];
    }
  }, {
    key: "opts",
    get: function get() {
      return this.result.opts;
    }
  }, {
    key: "processor",
    get: function get() {
      return this.result.processor;
    }
  }, {
    key: "root",
    get: function get() {
      if (this._root) {
        return this._root;
      }

      var root;
      var parser = parse;

      try {
        root = parser(this._css, this._opts);
      } catch (error) {
        this.error = error;
      }

      if (this.error) {
        throw this.error;
      } else {
        this._root = root;
        return root;
      }
    }
  }, {
    key: Symbol.toStringTag,
    get: function get() {
      return 'NoWorkResult';
    }
  }]);

  return NoWorkResult;
}();

module.exports = NoWorkResult;
NoWorkResult["default"] = NoWorkResult;