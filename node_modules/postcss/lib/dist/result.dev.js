'use strict';

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var Warning = require('./warning');

var Result =
/*#__PURE__*/
function () {
  function Result(processor, root, opts) {
    _classCallCheck(this, Result);

    this.processor = processor;
    this.messages = [];
    this.root = root;
    this.opts = opts;
    this.css = undefined;
    this.map = undefined;
  }

  _createClass(Result, [{
    key: "toString",
    value: function toString() {
      return this.css;
    }
  }, {
    key: "warn",
    value: function warn(text) {
      var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      if (!opts.plugin) {
        if (this.lastPlugin && this.lastPlugin.postcssPlugin) {
          opts.plugin = this.lastPlugin.postcssPlugin;
        }
      }

      var warning = new Warning(text, opts);
      this.messages.push(warning);
      return warning;
    }
  }, {
    key: "warnings",
    value: function warnings() {
      return this.messages.filter(function (i) {
        return i.type === 'warning';
      });
    }
  }, {
    key: "content",
    get: function get() {
      return this.css;
    }
  }]);

  return Result;
}();

module.exports = Result;
Result["default"] = Result;