'use strict';

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var _require = require('source-map-js'),
    SourceMapConsumer = _require.SourceMapConsumer,
    SourceMapGenerator = _require.SourceMapGenerator;

var _require2 = require('fs'),
    existsSync = _require2.existsSync,
    readFileSync = _require2.readFileSync;

var _require3 = require('path'),
    dirname = _require3.dirname,
    join = _require3.join;

function fromBase64(str) {
  if (Buffer) {
    return Buffer.from(str, 'base64').toString();
  } else {
    /* c8 ignore next 2 */
    return window.atob(str);
  }
}

var PreviousMap =
/*#__PURE__*/
function () {
  function PreviousMap(css, opts) {
    _classCallCheck(this, PreviousMap);

    if (opts.map === false) return;
    this.loadAnnotation(css);
    this.inline = this.startWith(this.annotation, 'data:');
    var prev = opts.map ? opts.map.prev : undefined;
    var text = this.loadMap(opts.from, prev);

    if (!this.mapFile && opts.from) {
      this.mapFile = opts.from;
    }

    if (this.mapFile) this.root = dirname(this.mapFile);
    if (text) this.text = text;
  }

  _createClass(PreviousMap, [{
    key: "consumer",
    value: function consumer() {
      if (!this.consumerCache) {
        this.consumerCache = new SourceMapConsumer(this.text);
      }

      return this.consumerCache;
    }
  }, {
    key: "decodeInline",
    value: function decodeInline(text) {
      var baseCharsetUri = /^data:application\/json;charset=utf-?8;base64,/;
      var baseUri = /^data:application\/json;base64,/;
      var charsetUri = /^data:application\/json;charset=utf-?8,/;
      var uri = /^data:application\/json,/;

      if (charsetUri.test(text) || uri.test(text)) {
        return decodeURIComponent(text.substr(RegExp.lastMatch.length));
      }

      if (baseCharsetUri.test(text) || baseUri.test(text)) {
        return fromBase64(text.substr(RegExp.lastMatch.length));
      }

      var encoding = text.match(/data:application\/json;([^,]+),/)[1];
      throw new Error('Unsupported source map encoding ' + encoding);
    }
  }, {
    key: "getAnnotationURL",
    value: function getAnnotationURL(sourceMapString) {
      return sourceMapString.replace(/^\/\*\s*# sourceMappingURL=/, '').trim();
    }
  }, {
    key: "isMap",
    value: function isMap(map) {
      if (_typeof(map) !== 'object') return false;
      return typeof map.mappings === 'string' || typeof map._mappings === 'string' || Array.isArray(map.sections);
    }
  }, {
    key: "loadAnnotation",
    value: function loadAnnotation(css) {
      var comments = css.match(/\/\*\s*# sourceMappingURL=/gm);
      if (!comments) return; // sourceMappingURLs from comments, strings, etc.

      var start = css.lastIndexOf(comments.pop());
      var end = css.indexOf('*/', start);

      if (start > -1 && end > -1) {
        // Locate the last sourceMappingURL to avoid pickin
        this.annotation = this.getAnnotationURL(css.substring(start, end));
      }
    }
  }, {
    key: "loadFile",
    value: function loadFile(path) {
      this.root = dirname(path);

      if (existsSync(path)) {
        this.mapFile = path;
        return readFileSync(path, 'utf-8').toString().trim();
      }
    }
  }, {
    key: "loadMap",
    value: function loadMap(file, prev) {
      if (prev === false) return false;

      if (prev) {
        if (typeof prev === 'string') {
          return prev;
        } else if (typeof prev === 'function') {
          var prevPath = prev(file);

          if (prevPath) {
            var map = this.loadFile(prevPath);

            if (!map) {
              throw new Error('Unable to load previous source map: ' + prevPath.toString());
            }

            return map;
          }
        } else if (prev instanceof SourceMapConsumer) {
          return SourceMapGenerator.fromSourceMap(prev).toString();
        } else if (prev instanceof SourceMapGenerator) {
          return prev.toString();
        } else if (this.isMap(prev)) {
          return JSON.stringify(prev);
        } else {
          throw new Error('Unsupported previous source map format: ' + prev.toString());
        }
      } else if (this.inline) {
        return this.decodeInline(this.annotation);
      } else if (this.annotation) {
        var _map = this.annotation;
        if (file) _map = join(dirname(file), _map);
        return this.loadFile(_map);
      }
    }
  }, {
    key: "startWith",
    value: function startWith(string, start) {
      if (!string) return false;
      return string.substr(0, start.length) === start;
    }
  }, {
    key: "withContent",
    value: function withContent() {
      return !!(this.consumer().sourcesContent && this.consumer().sourcesContent.length > 0);
    }
  }]);

  return PreviousMap;
}();

module.exports = PreviousMap;
PreviousMap["default"] = PreviousMap;