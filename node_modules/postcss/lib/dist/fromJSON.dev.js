'use strict';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var Declaration = require('./declaration');

var PreviousMap = require('./previous-map');

var Comment = require('./comment');

var AtRule = require('./at-rule');

var Input = require('./input');

var Root = require('./root');

var Rule = require('./rule');

function fromJSON(json, inputs) {
  if (Array.isArray(json)) return json.map(function (n) {
    return fromJSON(n);
  });

  var ownInputs = json.inputs,
      defaults = _objectWithoutProperties(json, ["inputs"]);

  if (ownInputs) {
    inputs = [];
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = ownInputs[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        var input = _step.value;

        var inputHydrated = _objectSpread({}, input, {
          __proto__: Input.prototype
        });

        if (inputHydrated.map) {
          inputHydrated.map = _objectSpread({}, inputHydrated.map, {
            __proto__: PreviousMap.prototype
          });
        }

        inputs.push(inputHydrated);
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator["return"] != null) {
          _iterator["return"]();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }
  }

  if (defaults.nodes) {
    defaults.nodes = json.nodes.map(function (n) {
      return fromJSON(n, inputs);
    });
  }

  if (defaults.source) {
    var _defaults$source = defaults.source,
        inputId = _defaults$source.inputId,
        source = _objectWithoutProperties(_defaults$source, ["inputId"]);

    defaults.source = source;

    if (inputId != null) {
      defaults.source.input = inputs[inputId];
    }
  }

  if (defaults.type === 'root') {
    return new Root(defaults);
  } else if (defaults.type === 'decl') {
    return new Declaration(defaults);
  } else if (defaults.type === 'rule') {
    return new Rule(defaults);
  } else if (defaults.type === 'comment') {
    return new Comment(defaults);
  } else if (defaults.type === 'atrule') {
    return new AtRule(defaults);
  } else {
    throw new Error('Unknown node type: ' + json.type);
  }
}

module.exports = fromJSON;
fromJSON["default"] = fromJSON;