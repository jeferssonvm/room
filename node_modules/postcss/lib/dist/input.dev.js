'use strict';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var _require = require('source-map-js'),
    SourceMapConsumer = _require.SourceMapConsumer,
    SourceMapGenerator = _require.SourceMapGenerator;

var _require2 = require('url'),
    fileURLToPath = _require2.fileURLToPath,
    pathToFileURL = _require2.pathToFileURL;

var _require3 = require('path'),
    isAbsolute = _require3.isAbsolute,
    resolve = _require3.resolve;

var _require4 = require('nanoid/non-secure'),
    nanoid = _require4.nanoid;

var terminalHighlight = require('./terminal-highlight');

var CssSyntaxError = require('./css-syntax-error');

var PreviousMap = require('./previous-map');

var fromOffsetCache = Symbol('fromOffsetCache');
var sourceMapAvailable = Boolean(SourceMapConsumer && SourceMapGenerator);
var pathAvailable = Boolean(resolve && isAbsolute);

var Input =
/*#__PURE__*/
function () {
  function Input(css) {
    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    _classCallCheck(this, Input);

    if (css === null || typeof css === 'undefined' || _typeof(css) === 'object' && !css.toString) {
      throw new Error("PostCSS received ".concat(css, " instead of CSS string"));
    }

    this.css = css.toString();

    if (this.css[0] === "\uFEFF" || this.css[0] === "\uFFFE") {
      this.hasBOM = true;
      this.css = this.css.slice(1);
    } else {
      this.hasBOM = false;
    }

    if (opts.from) {
      if (!pathAvailable || /^\w+:\/\//.test(opts.from) || isAbsolute(opts.from)) {
        this.file = opts.from;
      } else {
        this.file = resolve(opts.from);
      }
    }

    if (pathAvailable && sourceMapAvailable) {
      var map = new PreviousMap(this.css, opts);

      if (map.text) {
        this.map = map;
        var file = map.consumer().file;
        if (!this.file && file) this.file = this.mapResolve(file);
      }
    }

    if (!this.file) {
      this.id = '<input css ' + nanoid(6) + '>';
    }

    if (this.map) this.map.file = this.from;
  }

  _createClass(Input, [{
    key: "error",
    value: function error(message, line, column) {
      var opts = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
      var result, endLine, endColumn;

      if (line && _typeof(line) === 'object') {
        var start = line;
        var end = column;

        if (typeof start.offset === 'number') {
          var pos = this.fromOffset(start.offset);
          line = pos.line;
          column = pos.col;
        } else {
          line = start.line;
          column = start.column;
        }

        if (typeof end.offset === 'number') {
          var _pos = this.fromOffset(end.offset);

          endLine = _pos.line;
          endColumn = _pos.col;
        } else {
          endLine = end.line;
          endColumn = end.column;
        }
      } else if (!column) {
        var _pos2 = this.fromOffset(line);

        line = _pos2.line;
        column = _pos2.col;
      }

      var origin = this.origin(line, column, endLine, endColumn);

      if (origin) {
        result = new CssSyntaxError(message, origin.endLine === undefined ? origin.line : {
          column: origin.column,
          line: origin.line
        }, origin.endLine === undefined ? origin.column : {
          column: origin.endColumn,
          line: origin.endLine
        }, origin.source, origin.file, opts.plugin);
      } else {
        result = new CssSyntaxError(message, endLine === undefined ? line : {
          column: column,
          line: line
        }, endLine === undefined ? column : {
          column: endColumn,
          line: endLine
        }, this.css, this.file, opts.plugin);
      }

      result.input = {
        column: column,
        endColumn: endColumn,
        endLine: endLine,
        line: line,
        source: this.css
      };

      if (this.file) {
        if (pathToFileURL) {
          result.input.url = pathToFileURL(this.file).toString();
        }

        result.input.file = this.file;
      }

      return result;
    }
  }, {
    key: "fromOffset",
    value: function fromOffset(offset) {
      var lastLine, lineToIndex;

      if (!this[fromOffsetCache]) {
        var lines = this.css.split('\n');
        lineToIndex = new Array(lines.length);
        var prevIndex = 0;

        for (var i = 0, l = lines.length; i < l; i++) {
          lineToIndex[i] = prevIndex;
          prevIndex += lines[i].length + 1;
        }

        this[fromOffsetCache] = lineToIndex;
      } else {
        lineToIndex = this[fromOffsetCache];
      }

      lastLine = lineToIndex[lineToIndex.length - 1];
      var min = 0;

      if (offset >= lastLine) {
        min = lineToIndex.length - 1;
      } else {
        var max = lineToIndex.length - 2;
        var mid;

        while (min < max) {
          mid = min + (max - min >> 1);

          if (offset < lineToIndex[mid]) {
            max = mid - 1;
          } else if (offset >= lineToIndex[mid + 1]) {
            min = mid + 1;
          } else {
            min = mid;
            break;
          }
        }
      }

      return {
        col: offset - lineToIndex[min] + 1,
        line: min + 1
      };
    }
  }, {
    key: "mapResolve",
    value: function mapResolve(file) {
      if (/^\w+:\/\//.test(file)) {
        return file;
      }

      return resolve(this.map.consumer().sourceRoot || this.map.root || '.', file);
    }
  }, {
    key: "origin",
    value: function origin(line, column, endLine, endColumn) {
      if (!this.map) return false;
      var consumer = this.map.consumer();
      var from = consumer.originalPositionFor({
        column: column,
        line: line
      });
      if (!from.source) return false;
      var to;

      if (typeof endLine === 'number') {
        to = consumer.originalPositionFor({
          column: endColumn,
          line: endLine
        });
      }

      var fromUrl;

      if (isAbsolute(from.source)) {
        fromUrl = pathToFileURL(from.source);
      } else {
        fromUrl = new URL(from.source, this.map.consumer().sourceRoot || pathToFileURL(this.map.mapFile));
      }

      var result = {
        column: from.column,
        endColumn: to && to.column,
        endLine: to && to.line,
        line: from.line,
        url: fromUrl.toString()
      };

      if (fromUrl.protocol === 'file:') {
        if (fileURLToPath) {
          result.file = fileURLToPath(fromUrl);
        } else {
          /* c8 ignore next 2 */
          throw new Error("file: protocol is not available in this PostCSS build");
        }
      }

      var source = consumer.sourceContentFor(from.source);
      if (source) result.source = source;
      return result;
    }
  }, {
    key: "toJSON",
    value: function toJSON() {
      var json = {};

      for (var _i = 0, _arr = ['hasBOM', 'css', 'file', 'id']; _i < _arr.length; _i++) {
        var name = _arr[_i];

        if (this[name] != null) {
          json[name] = this[name];
        }
      }

      if (this.map) {
        json.map = _objectSpread({}, this.map);

        if (json.map.consumerCache) {
          json.map.consumerCache = undefined;
        }
      }

      return json;
    }
  }, {
    key: "from",
    get: function get() {
      return this.file || this.id;
    }
  }]);

  return Input;
}();

module.exports = Input;
Input["default"] = Input;

if (terminalHighlight && terminalHighlight.registerInput) {
  terminalHighlight.registerInput(Input);
}