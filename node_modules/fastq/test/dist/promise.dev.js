'use strict';

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var test = require('tape');

var buildQueue = require('../').promise;

var _require = require('util'),
    promisify = _require.promisify;

var sleep = promisify(setTimeout);
var immediate = promisify(setImmediate);
test('concurrency', function (t) {
  t.plan(2);
  t["throws"](buildQueue.bind(null, worker, 0));
  t.doesNotThrow(buildQueue.bind(null, worker, 1));

  function worker(arg) {
    return regeneratorRuntime.async(function worker$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            return _context.abrupt("return", true);

          case 1:
          case "end":
            return _context.stop();
        }
      }
    });
  }
});
test('worker execution', function _callee(t) {
  var queue, result, worker;
  return regeneratorRuntime.async(function _callee$(_context3) {
    while (1) {
      switch (_context3.prev = _context3.next) {
        case 0:
          worker = function _ref(arg) {
            return regeneratorRuntime.async(function worker$(_context2) {
              while (1) {
                switch (_context2.prev = _context2.next) {
                  case 0:
                    t.equal(arg, 42);
                    return _context2.abrupt("return", true);

                  case 2:
                  case "end":
                    return _context2.stop();
                }
              }
            });
          };

          queue = buildQueue(worker, 1);
          _context3.next = 4;
          return regeneratorRuntime.awrap(queue.push(42));

        case 4:
          result = _context3.sent;
          t.equal(result, true, 'result matches');

        case 6:
        case "end":
          return _context3.stop();
      }
    }
  });
});
test('limit', function _callee2(t) {
  var queue, _ref2, _ref3, res1, res2, worker;

  return regeneratorRuntime.async(function _callee2$(_context5) {
    while (1) {
      switch (_context5.prev = _context5.next) {
        case 0:
          worker = function _ref4(arg) {
            return regeneratorRuntime.async(function worker$(_context4) {
              while (1) {
                switch (_context4.prev = _context4.next) {
                  case 0:
                    _context4.next = 2;
                    return regeneratorRuntime.awrap(sleep(arg));

                  case 2:
                    return _context4.abrupt("return", arg);

                  case 3:
                  case "end":
                    return _context4.stop();
                }
              }
            });
          };

          queue = buildQueue(worker, 1);
          _context5.next = 4;
          return regeneratorRuntime.awrap(Promise.all([queue.push(10), queue.push(0)]));

        case 4:
          _ref2 = _context5.sent;
          _ref3 = _slicedToArray(_ref2, 2);
          res1 = _ref3[0];
          res2 = _ref3[1];
          t.equal(res1, 10, 'the result matches');
          t.equal(res2, 0, 'the result matches');

        case 10:
        case "end":
          return _context5.stop();
      }
    }
  });
});
test('multiple executions', function _callee4(t) {
  var queue, toExec, expected, count, worker;
  return regeneratorRuntime.async(function _callee4$(_context8) {
    while (1) {
      switch (_context8.prev = _context8.next) {
        case 0:
          worker = function _ref5(arg) {
            return regeneratorRuntime.async(function worker$(_context7) {
              while (1) {
                switch (_context7.prev = _context7.next) {
                  case 0:
                    t.equal(arg, toExec[count], 'arg matches');
                    return _context7.abrupt("return", expected[count++]);

                  case 2:
                  case "end":
                    return _context7.stop();
                }
              }
            });
          };

          queue = buildQueue(worker, 1);
          toExec = [1, 2, 3, 4, 5];
          expected = ['a', 'b', 'c', 'd', 'e'];
          count = 0;
          _context8.next = 7;
          return regeneratorRuntime.awrap(Promise.all(toExec.map(function _callee3(task, i) {
            var result;
            return regeneratorRuntime.async(function _callee3$(_context6) {
              while (1) {
                switch (_context6.prev = _context6.next) {
                  case 0:
                    _context6.next = 2;
                    return regeneratorRuntime.awrap(queue.push(task));

                  case 2:
                    result = _context6.sent;
                    t.equal(result, expected[i], 'the result matches');

                  case 4:
                  case "end":
                    return _context6.stop();
                }
              }
            });
          })));

        case 7:
        case "end":
          return _context8.stop();
      }
    }
  });
});
test('drained', function _callee5(t) {
  var queue, toExec, count, worker;
  return regeneratorRuntime.async(function _callee5$(_context10) {
    while (1) {
      switch (_context10.prev = _context10.next) {
        case 0:
          worker = function _ref6(arg) {
            return regeneratorRuntime.async(function worker$(_context9) {
              while (1) {
                switch (_context9.prev = _context9.next) {
                  case 0:
                    _context9.next = 2;
                    return regeneratorRuntime.awrap(sleep(arg));

                  case 2:
                    count++;

                  case 3:
                  case "end":
                    return _context9.stop();
                }
              }
            });
          };

          queue = buildQueue(worker, 2);
          toExec = new Array(10).fill(10);
          count = 0;
          toExec.forEach(function (i) {
            queue.push(i);
          });
          _context10.next = 7;
          return regeneratorRuntime.awrap(queue.drained());

        case 7:
          t.equal(count, toExec.length);
          toExec.forEach(function (i) {
            queue.push(i);
          });
          _context10.next = 11;
          return regeneratorRuntime.awrap(queue.drained());

        case 11:
          t.equal(count, toExec.length * 2);

        case 12:
        case "end":
          return _context10.stop();
      }
    }
  });
});
test('drained with exception should not throw', function _callee6(t) {
  var queue, toExec, worker;
  return regeneratorRuntime.async(function _callee6$(_context12) {
    while (1) {
      switch (_context12.prev = _context12.next) {
        case 0:
          worker = function _ref7() {
            return regeneratorRuntime.async(function worker$(_context11) {
              while (1) {
                switch (_context11.prev = _context11.next) {
                  case 0:
                    throw new Error('foo');

                  case 1:
                  case "end":
                    return _context11.stop();
                }
              }
            });
          };

          queue = buildQueue(worker, 2);
          toExec = new Array(10).fill(10);
          toExec.forEach(function (i) {
            queue.push(i);
          });
          _context12.next = 6;
          return regeneratorRuntime.awrap(queue.drained());

        case 6:
        case "end":
          return _context12.stop();
      }
    }
  });
});
test('drained with drain function', function _callee7(t) {
  var drainCalled, queue, toExec, count, worker;
  return regeneratorRuntime.async(function _callee7$(_context14) {
    while (1) {
      switch (_context14.prev = _context14.next) {
        case 0:
          worker = function _ref8(arg) {
            return regeneratorRuntime.async(function worker$(_context13) {
              while (1) {
                switch (_context13.prev = _context13.next) {
                  case 0:
                    _context13.next = 2;
                    return regeneratorRuntime.awrap(sleep(arg));

                  case 2:
                    count++;

                  case 3:
                  case "end":
                    return _context13.stop();
                }
              }
            });
          };

          drainCalled = false;
          queue = buildQueue(worker, 2);

          queue.drain = function () {
            drainCalled = true;
          };

          toExec = new Array(10).fill(10);
          count = 0;
          toExec.forEach(function () {
            queue.push();
          });
          _context14.next = 9;
          return regeneratorRuntime.awrap(queue.drained());

        case 9:
          t.equal(count, toExec.length);
          t.equal(drainCalled, true);

        case 11:
        case "end":
          return _context14.stop();
      }
    }
  });
});
test('drained while idle should resolve', function _callee8(t) {
  var queue, worker;
  return regeneratorRuntime.async(function _callee8$(_context16) {
    while (1) {
      switch (_context16.prev = _context16.next) {
        case 0:
          worker = function _ref9(arg) {
            return regeneratorRuntime.async(function worker$(_context15) {
              while (1) {
                switch (_context15.prev = _context15.next) {
                  case 0:
                    _context15.next = 2;
                    return regeneratorRuntime.awrap(sleep(arg));

                  case 2:
                  case "end":
                    return _context15.stop();
                }
              }
            });
          };

          queue = buildQueue(worker, 2);
          _context16.next = 4;
          return regeneratorRuntime.awrap(queue.drained());

        case 4:
        case "end":
          return _context16.stop();
      }
    }
  });
});
test('drained while idle should not call the drain function', function _callee9(t) {
  var drainCalled, queue, worker;
  return regeneratorRuntime.async(function _callee9$(_context18) {
    while (1) {
      switch (_context18.prev = _context18.next) {
        case 0:
          worker = function _ref10(arg) {
            return regeneratorRuntime.async(function worker$(_context17) {
              while (1) {
                switch (_context17.prev = _context17.next) {
                  case 0:
                    _context17.next = 2;
                    return regeneratorRuntime.awrap(sleep(arg));

                  case 2:
                  case "end":
                    return _context17.stop();
                }
              }
            });
          };

          drainCalled = false;
          queue = buildQueue(worker, 2);

          queue.drain = function () {
            drainCalled = true;
          };

          _context18.next = 6;
          return regeneratorRuntime.awrap(queue.drained());

        case 6:
          t.equal(drainCalled, false);

        case 7:
        case "end":
          return _context18.stop();
      }
    }
  });
});
test('set this', function _callee10(t) {
  var that, queue, worker;
  return regeneratorRuntime.async(function _callee10$(_context20) {
    while (1) {
      switch (_context20.prev = _context20.next) {
        case 0:
          worker = function _ref11(arg) {
            return regeneratorRuntime.async(function worker$(_context19) {
              while (1) {
                switch (_context19.prev = _context19.next) {
                  case 0:
                    t.equal(this, that, 'this matches');

                  case 1:
                  case "end":
                    return _context19.stop();
                }
              }
            }, null, this);
          };

          t.plan(1);
          that = {};
          queue = buildQueue(that, worker, 1);
          _context20.next = 6;
          return regeneratorRuntime.awrap(queue.push(42));

        case 6:
        case "end":
          return _context20.stop();
      }
    }
  });
});
test('unshift', function _callee11(t) {
  var queue, expected, worker;
  return regeneratorRuntime.async(function _callee11$(_context22) {
    while (1) {
      switch (_context22.prev = _context22.next) {
        case 0:
          worker = function _ref12(arg) {
            return regeneratorRuntime.async(function worker$(_context21) {
              while (1) {
                switch (_context21.prev = _context21.next) {
                  case 0:
                    t.equal(expected.shift(), arg, 'tasks come in order');

                  case 1:
                  case "end":
                    return _context21.stop();
                }
              }
            });
          };

          queue = buildQueue(worker, 1);
          expected = [1, 2, 3, 4];
          _context22.next = 5;
          return regeneratorRuntime.awrap(Promise.all([queue.push(1), queue.push(4), queue.unshift(3), queue.unshift(2)]));

        case 5:
          t.is(expected.length, 0);

        case 6:
        case "end":
          return _context22.stop();
      }
    }
  });
});
test('push with worker throwing error', function _callee13(t) {
  var q;
  return regeneratorRuntime.async(function _callee13$(_context24) {
    while (1) {
      switch (_context24.prev = _context24.next) {
        case 0:
          t.plan(5);
          q = buildQueue(function _callee12(task, cb) {
            return regeneratorRuntime.async(function _callee12$(_context23) {
              while (1) {
                switch (_context23.prev = _context23.next) {
                  case 0:
                    throw new Error('test error');

                  case 1:
                  case "end":
                    return _context23.stop();
                }
              }
            });
          }, 1);
          q.error(function (err, task) {
            t.ok(err instanceof Error, 'global error handler should catch the error');
            t.match(err.message, /test error/, 'error message should be "test error"');
            t.equal(task, 42, 'The task executed should be passed');
          });
          _context24.prev = 3;
          _context24.next = 6;
          return regeneratorRuntime.awrap(q.push(42));

        case 6:
          _context24.next = 12;
          break;

        case 8:
          _context24.prev = 8;
          _context24.t0 = _context24["catch"](3);
          t.ok(_context24.t0 instanceof Error, 'push callback should catch the error');
          t.match(_context24.t0.message, /test error/, 'error message should be "test error"');

        case 12:
        case "end":
          return _context24.stop();
      }
    }
  }, null, null, [[3, 8]]);
});
test('unshift with worker throwing error', function _callee15(t) {
  var q;
  return regeneratorRuntime.async(function _callee15$(_context26) {
    while (1) {
      switch (_context26.prev = _context26.next) {
        case 0:
          t.plan(2);
          q = buildQueue(function _callee14(task, cb) {
            return regeneratorRuntime.async(function _callee14$(_context25) {
              while (1) {
                switch (_context25.prev = _context25.next) {
                  case 0:
                    throw new Error('test error');

                  case 1:
                  case "end":
                    return _context25.stop();
                }
              }
            });
          }, 1);
          _context26.prev = 2;
          _context26.next = 5;
          return regeneratorRuntime.awrap(q.unshift(42));

        case 5:
          _context26.next = 11;
          break;

        case 7:
          _context26.prev = 7;
          _context26.t0 = _context26["catch"](2);
          t.ok(_context26.t0 instanceof Error, 'push callback should catch the error');
          t.match(_context26.t0.message, /test error/, 'error message should be "test error"');

        case 11:
        case "end":
          return _context26.stop();
      }
    }
  }, null, null, [[2, 7]]);
});
test('no unhandledRejection (push)', function _callee17(t) {
  var handleRejection, q;
  return regeneratorRuntime.async(function _callee17$(_context28) {
    while (1) {
      switch (_context28.prev = _context28.next) {
        case 0:
          handleRejection = function _ref13() {
            t.fail('unhandledRejection');
          };

          process.once('unhandledRejection', handleRejection);
          q = buildQueue(function _callee16(task, cb) {
            return regeneratorRuntime.async(function _callee16$(_context27) {
              while (1) {
                switch (_context27.prev = _context27.next) {
                  case 0:
                    throw new Error('test error');

                  case 1:
                  case "end":
                    return _context27.stop();
                }
              }
            });
          }, 1);
          q.push(42);
          _context28.next = 6;
          return regeneratorRuntime.awrap(immediate());

        case 6:
          process.removeListener('unhandledRejection', handleRejection);

        case 7:
        case "end":
          return _context28.stop();
      }
    }
  });
});
test('no unhandledRejection (unshift)', function _callee19(t) {
  var handleRejection, q;
  return regeneratorRuntime.async(function _callee19$(_context30) {
    while (1) {
      switch (_context30.prev = _context30.next) {
        case 0:
          handleRejection = function _ref14() {
            t.fail('unhandledRejection');
          };

          process.once('unhandledRejection', handleRejection);
          q = buildQueue(function _callee18(task, cb) {
            return regeneratorRuntime.async(function _callee18$(_context29) {
              while (1) {
                switch (_context29.prev = _context29.next) {
                  case 0:
                    throw new Error('test error');

                  case 1:
                  case "end":
                    return _context29.stop();
                }
              }
            });
          }, 1);
          q.unshift(42);
          _context30.next = 6;
          return regeneratorRuntime.awrap(immediate());

        case 6:
          process.removeListener('unhandledRejection', handleRejection);

        case 7:
        case "end":
          return _context30.stop();
      }
    }
  });
});