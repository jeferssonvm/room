"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "urlAlphabet", {
  enumerable: true,
  get: function get() {
    return _index.urlAlphabet;
  }
});
exports.random = exports.customRandom = exports.customAlphabet = exports.nanoid = void 0;

var _crypto = _interopRequireDefault(require("crypto"));

var _index = require("./url-alphabet/index.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

var POOL_SIZE_MULTIPLIER = 128;
var pool, poolOffset;

var fillPool = function fillPool(bytes) {
  if (!pool || pool.length < bytes) {
    pool = Buffer.allocUnsafe(bytes * POOL_SIZE_MULTIPLIER);

    _crypto["default"].randomFillSync(pool);

    poolOffset = 0;
  } else if (poolOffset + bytes > pool.length) {
    _crypto["default"].randomFillSync(pool);

    poolOffset = 0;
  }

  poolOffset += bytes;
};

var random = function random(bytes) {
  fillPool(bytes -= 0);
  return pool.subarray(poolOffset - bytes, poolOffset);
};

exports.random = random;

var customRandom = function customRandom(alphabet, defaultSize, getRandom) {
  var mask = (2 << 31 - Math.clz32(alphabet.length - 1 | 1)) - 1;
  var step = Math.ceil(1.6 * mask * defaultSize / alphabet.length);
  return function () {
    var size = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaultSize;
    var id = '';

    while (true) {
      var bytes = getRandom(step);
      var i = step;

      while (i--) {
        id += alphabet[bytes[i] & mask] || '';
        if (id.length === size) return id;
      }
    }
  };
};

exports.customRandom = customRandom;

var customAlphabet = function customAlphabet(alphabet) {
  var size = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 21;
  return customRandom(alphabet, size, random);
};

exports.customAlphabet = customAlphabet;

var nanoid = function nanoid() {
  var size = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 21;
  fillPool(size -= 0);
  var id = '';

  for (var i = poolOffset - size; i < poolOffset; i++) {
    id += _index.urlAlphabet[pool[i] & 63];
  }

  return id;
};

exports.nanoid = nanoid;