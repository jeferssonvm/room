"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "urlAlphabet", {
  enumerable: true,
  get: function get() {
    return _index.urlAlphabet;
  }
});
exports.random = exports.customRandom = exports.customAlphabet = exports.nanoid = void 0;

var _index = require("./url-alphabet/index.js");

var random = function random(bytes) {
  return crypto.getRandomValues(new Uint8Array(bytes));
};

exports.random = random;

var customRandom = function customRandom(alphabet, defaultSize, getRandom) {
  var mask = (2 << Math.log(alphabet.length - 1) / Math.LN2) - 1;
  var step = -~(1.6 * mask * defaultSize / alphabet.length);
  return function () {
    var size = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaultSize;
    var id = '';

    while (true) {
      var bytes = getRandom(step);
      var j = step;

      while (j--) {
        id += alphabet[bytes[j] & mask] || '';
        if (id.length === size) return id;
      }
    }
  };
};

exports.customRandom = customRandom;

var customAlphabet = function customAlphabet(alphabet) {
  var size = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 21;
  return customRandom(alphabet, size, random);
};

exports.customAlphabet = customAlphabet;

var nanoid = function nanoid() {
  var size = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 21;
  return crypto.getRandomValues(new Uint8Array(size)).reduce(function (id, _byte) {
    _byte &= 63;

    if (_byte < 36) {
      id += _byte.toString(36);
    } else if (_byte < 62) {
      id += (_byte - 26).toString(36).toUpperCase();
    } else if (_byte > 62) {
      id += '-';
    } else {
      id += '_';
    }

    return id;
  }, '');
};

exports.nanoid = nanoid;